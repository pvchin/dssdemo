{"ast":null,"code":"import { BaseTextSource } from \"./BaseTextSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\n\nclass SubtitlesSource extends BaseTextSource {\n  constructor(fileName) {\n    super(fileName);\n    this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n  }\n  /**\n   * @description Set the textStyle for the subtitles layer\n   * @param {TextStyle} textStyle\n   */\n\n\n  textStyle(textStyle) {\n    this._textStyle = textStyle;\n    return this;\n  }\n  /**\n   *\n   * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n   * Subtitle file names require a different encoding than texts\n   * @param text\n   * @example\n   * encodeText('foo/bar'); // -> foo:bar\n   */\n\n\n  encodeText(text) {\n    return text.replace(/\\//g, ':');\n  }\n\n}\n\nexport { SubtitlesSource };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/SubtitlesSource.js"],"names":["BaseTextSource","SubtitlesSource","constructor","fileName","type","textStyle","_textStyle","encodeText","text","replace"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAN,SAA8BD,cAA9B,CAA6C;AACzCE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB,UAAMA,QAAN;AACA,SAAKC,IAAL,GAAY,WAAZ,CAFkB,CAEO;AAC5B;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,SAAS,CAACA,SAAD,EAAY;AACjB,SAAKC,UAAL,GAAkBD,SAAlB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,WAAOA,IAAI,CAACC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACH;;AAvBwC;;AAyB7C,SAASR,eAAT","sourcesContent":["import { BaseTextSource } from \"./BaseTextSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n    constructor(fileName) {\n        super(fileName);\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n    }\n    /**\n     * @description Set the textStyle for the subtitles layer\n     * @param {TextStyle} textStyle\n     */\n    textStyle(textStyle) {\n        this._textStyle = textStyle;\n        return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n    encodeText(text) {\n        return text.replace(/\\//g, ':');\n    }\n}\nexport { SubtitlesSource };\n"]},"metadata":{},"sourceType":"module"}