{"ast":null,"code":"/**\n * Globalize v1.7.0\n *\n * https://github.com/globalizejs/globalize\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-08-02T11:53Z\n */\n\n/*!\n * Globalize v1.7.0 2021-08-02T11:53Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function (root, factory) {\n  // UMD returnExports\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"cldr\", \"../globalize\", \"./number\", \"./plural\", \"cldr/event\", \"cldr/supplemental\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory(require(\"cldrjs\"), require(\"../globalize\"));\n  } else {\n    // Extend global\n    factory(root.Cldr, root.Globalize);\n  }\n})(this, function (Cldr, Globalize) {\n  var formatMessage = Globalize._formatMessage,\n      runtimeBind = Globalize._runtimeBind,\n      validateCldr = Globalize._validateCldr,\n      validateDefaultLocale = Globalize._validateDefaultLocale,\n      validateParameterPresence = Globalize._validateParameterPresence,\n      validateParameterTypeString = Globalize._validateParameterTypeString,\n      validateParameterTypeNumber = Globalize._validateParameterTypeNumber;\n  /**\n   * format( value, numberFormatter, pluralGenerator, properties )\n   *\n   * @value [Number] The number to format\n   *\n   * @numberFormatter [String] A numberFormatter from Globalize.numberFormatter\n   *\n   * @pluralGenerator [String] A pluralGenerator from Globalize.pluralGenerator\n   *\n   * @properties [Object] containing relative time plural message.\n   *\n   * Format relative time.\n   */\n\n  var relativeTimeFormat = function (value, numberFormatter, pluralGenerator, properties) {\n    var relativeTime,\n        message = properties[\"relative-type-\" + value];\n\n    if (message) {\n      return message;\n    }\n\n    relativeTime = value <= 0 ? properties[\"relativeTime-type-past\"] : properties[\"relativeTime-type-future\"];\n    value = Math.abs(value);\n    message = relativeTime[\"relativeTimePattern-count-\" + pluralGenerator(value)];\n    return formatMessage(message, [numberFormatter(value)]);\n  };\n\n  var relativeTimeFormatterFn = function (numberFormatter, pluralGenerator, properties) {\n    return function relativeTimeFormatter(value) {\n      validateParameterPresence(value, \"value\");\n      validateParameterTypeNumber(value, \"value\");\n      return relativeTimeFormat(value, numberFormatter, pluralGenerator, properties);\n    };\n  };\n  /**\n   * properties( unit, cldr, options )\n   *\n   * @unit [String] eg. \"day\", \"week\", \"month\", etc.\n   *\n   * @cldr [Cldr instance].\n   *\n   * @options [Object]\n   * - form: [String] eg. \"short\" or \"narrow\". Or falsy for default long form.\n   *\n   * Return relative time properties.\n   */\n\n\n  var relativeTimeProperties = function (unit, cldr, options) {\n    var form = options.form,\n        raw,\n        properties,\n        key,\n        match;\n\n    if (form) {\n      unit = unit + \"-\" + form;\n    }\n\n    raw = cldr.main([\"dates\", \"fields\", unit]);\n    properties = {\n      \"relativeTime-type-future\": raw[\"relativeTime-type-future\"],\n      \"relativeTime-type-past\": raw[\"relativeTime-type-past\"]\n    };\n\n    for (key in raw) {\n      if (raw.hasOwnProperty(key)) {\n        match = /relative-type-(-?[0-9]+)/.exec(key);\n\n        if (match) {\n          properties[key] = raw[key];\n        }\n      }\n    }\n\n    return properties;\n  };\n  /**\n   * .formatRelativeTime( value, unit [, options] )\n   *\n   * @value [Number] The number of unit to format.\n   *\n   * @unit [String] see .relativeTimeFormatter() for details.\n   *\n   * @options [Object] see .relativeTimeFormatter() for details.\n   *\n   * Formats a relative time according to the given unit, options, and the default/instance locale.\n   */\n\n\n  Globalize.formatRelativeTime = Globalize.prototype.formatRelativeTime = function (value, unit, options) {\n    validateParameterPresence(value, \"value\");\n    validateParameterTypeNumber(value, \"value\");\n    return this.relativeTimeFormatter(unit, options)(value);\n  };\n  /**\n   * .relativeTimeFormatter( unit [, options ])\n   *\n   * @unit [String] String value indicating the unit to be formatted. eg. \"day\", \"week\", \"month\", etc.\n   *\n   * @options [Object]\n   * - form: [String] eg. \"short\" or \"narrow\". Or falsy for default long form.\n   *\n   * Returns a function that formats a relative time according to the given unit, options, and the\n   * default/instance locale.\n   */\n\n\n  Globalize.relativeTimeFormatter = Globalize.prototype.relativeTimeFormatter = function (unit, options) {\n    var args, cldr, numberFormatter, pluralGenerator, properties, returnFn;\n    validateParameterPresence(unit, \"unit\");\n    validateParameterTypeString(unit, \"unit\");\n    cldr = this.cldr;\n    options = options || {};\n    args = [unit, options];\n    validateDefaultLocale(cldr);\n    cldr.on(\"get\", validateCldr);\n\n    try {\n      properties = relativeTimeProperties(unit, cldr, options);\n    } finally {\n      cldr.off(\"get\", validateCldr);\n    }\n\n    numberFormatter = this.numberFormatter(options);\n    pluralGenerator = this.pluralGenerator();\n    returnFn = relativeTimeFormatterFn(numberFormatter, pluralGenerator, properties);\n    runtimeBind(args, cldr, returnFn, [numberFormatter, pluralGenerator, properties]);\n    return returnFn;\n  };\n\n  return Globalize;\n});","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/globalize/dist/globalize/relative-time.js"],"names":["root","factory","define","amd","exports","module","require","Cldr","Globalize","formatMessage","_formatMessage","runtimeBind","_runtimeBind","validateCldr","_validateCldr","validateDefaultLocale","_validateDefaultLocale","validateParameterPresence","_validateParameterPresence","validateParameterTypeString","_validateParameterTypeString","validateParameterTypeNumber","_validateParameterTypeNumber","relativeTimeFormat","value","numberFormatter","pluralGenerator","properties","relativeTime","message","Math","abs","relativeTimeFormatterFn","relativeTimeFormatter","relativeTimeProperties","unit","cldr","options","form","raw","key","match","main","hasOwnProperty","exec","formatRelativeTime","prototype","args","returnFn","on","off"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACC,WAAUA,IAAV,EAAgBC,OAAhB,EAA0B;AAE1B;AACA,MAAK,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,GAA5C,EAAkD;AAEjD;AACAD,IAAAA,MAAM,CAAC,CACN,MADM,EAEN,cAFM,EAGN,UAHM,EAIN,UAJM,EAKN,YALM,EAMN,mBANM,CAAD,EAOHD,OAPG,CAAN;AAQA,GAXD,MAWO,IAAK,OAAOG,OAAP,KAAmB,QAAxB,EAAmC;AAEzC;AACAC,IAAAA,MAAM,CAACD,OAAP,GAAiBH,OAAO,CAAEK,OAAO,CAAE,QAAF,CAAT,EAAuBA,OAAO,CAAE,cAAF,CAA9B,CAAxB;AACA,GAJM,MAIA;AAEN;AACAL,IAAAA,OAAO,CAAED,IAAI,CAACO,IAAP,EAAaP,IAAI,CAACQ,SAAlB,CAAP;AACA;AACD,CAvBA,EAuBC,IAvBD,EAuBO,UAAUD,IAAV,EAAgBC,SAAhB,EAA4B;AAEpC,MAAIC,aAAa,GAAGD,SAAS,CAACE,cAA9B;AAAA,MACCC,WAAW,GAAGH,SAAS,CAACI,YADzB;AAAA,MAECC,YAAY,GAAGL,SAAS,CAACM,aAF1B;AAAA,MAGCC,qBAAqB,GAAGP,SAAS,CAACQ,sBAHnC;AAAA,MAICC,yBAAyB,GAAGT,SAAS,CAACU,0BAJvC;AAAA,MAKCC,2BAA2B,GAAGX,SAAS,CAACY,4BALzC;AAAA,MAMCC,2BAA2B,GAAGb,SAAS,CAACc,4BANzC;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIC,kBAAkB,GAAG,UAAUC,KAAV,EAAiBC,eAAjB,EAAkCC,eAAlC,EAAmDC,UAAnD,EAAgE;AAExF,QAAIC,YAAJ;AAAA,QACCC,OAAO,GAAGF,UAAU,CAAE,mBAAmBH,KAArB,CADrB;;AAGA,QAAKK,OAAL,EAAe;AACd,aAAOA,OAAP;AACA;;AAEDD,IAAAA,YAAY,GAAGJ,KAAK,IAAI,CAAT,GAAaG,UAAU,CAAE,wBAAF,CAAvB,GACdA,UAAU,CAAE,0BAAF,CADX;AAGAH,IAAAA,KAAK,GAAGM,IAAI,CAACC,GAAL,CAAUP,KAAV,CAAR;AAEAK,IAAAA,OAAO,GAAGD,YAAY,CAAE,+BAA+BF,eAAe,CAAEF,KAAF,CAAhD,CAAtB;AACA,WAAOf,aAAa,CAAEoB,OAAF,EAAW,CAAEJ,eAAe,CAAED,KAAF,CAAjB,CAAX,CAApB;AACA,GAhBD;;AAqBA,MAAIQ,uBAAuB,GAAG,UAAUP,eAAV,EAA2BC,eAA3B,EAA4CC,UAA5C,EAAyD;AACtF,WAAO,SAASM,qBAAT,CAAgCT,KAAhC,EAAwC;AAC9CP,MAAAA,yBAAyB,CAAEO,KAAF,EAAS,OAAT,CAAzB;AACAH,MAAAA,2BAA2B,CAAEG,KAAF,EAAS,OAAT,CAA3B;AAEA,aAAOD,kBAAkB,CAAEC,KAAF,EAASC,eAAT,EAA0BC,eAA1B,EAA2CC,UAA3C,CAAzB;AACA,KALD;AAOA,GARD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIO,sBAAsB,GAAG,UAAUC,IAAV,EAAgBC,IAAhB,EAAsBC,OAAtB,EAAgC;AAE5D,QAAIC,IAAI,GAAGD,OAAO,CAACC,IAAnB;AAAA,QACCC,GADD;AAAA,QACMZ,UADN;AAAA,QACkBa,GADlB;AAAA,QACuBC,KADvB;;AAGA,QAAKH,IAAL,EAAY;AACXH,MAAAA,IAAI,GAAGA,IAAI,GAAG,GAAP,GAAaG,IAApB;AACA;;AAEDC,IAAAA,GAAG,GAAGH,IAAI,CAACM,IAAL,CAAW,CAAE,OAAF,EAAW,QAAX,EAAqBP,IAArB,CAAX,CAAN;AACAR,IAAAA,UAAU,GAAG;AACZ,kCAA4BY,GAAG,CAAE,0BAAF,CADnB;AAEZ,gCAA0BA,GAAG,CAAE,wBAAF;AAFjB,KAAb;;AAIA,SAAMC,GAAN,IAAaD,GAAb,EAAmB;AAClB,UAAKA,GAAG,CAACI,cAAJ,CAAoBH,GAApB,CAAL,EAAiC;AAChCC,QAAAA,KAAK,GAAG,2BAA2BG,IAA3B,CAAiCJ,GAAjC,CAAR;;AACA,YAAKC,KAAL,EAAa;AACZd,UAAAA,UAAU,CAAEa,GAAF,CAAV,GAAoBD,GAAG,CAAEC,GAAF,CAAvB;AACA;AACD;AACD;;AAED,WAAOb,UAAP;AACA,GAxBD;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAnB,EAAAA,SAAS,CAACqC,kBAAV,GACArC,SAAS,CAACsC,SAAV,CAAoBD,kBAApB,GAAyC,UAAUrB,KAAV,EAAiBW,IAAjB,EAAuBE,OAAvB,EAAiC;AACzEpB,IAAAA,yBAAyB,CAAEO,KAAF,EAAS,OAAT,CAAzB;AACAH,IAAAA,2BAA2B,CAAEG,KAAF,EAAS,OAAT,CAA3B;AAEA,WAAO,KAAKS,qBAAL,CAA4BE,IAA5B,EAAkCE,OAAlC,EAA6Cb,KAA7C,CAAP;AACA,GAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAhB,EAAAA,SAAS,CAACyB,qBAAV,GACAzB,SAAS,CAACsC,SAAV,CAAoBb,qBAApB,GAA4C,UAAUE,IAAV,EAAgBE,OAAhB,EAA0B;AACrE,QAAIU,IAAJ,EAAUX,IAAV,EAAgBX,eAAhB,EAAiCC,eAAjC,EAAkDC,UAAlD,EAA8DqB,QAA9D;AAEA/B,IAAAA,yBAAyB,CAAEkB,IAAF,EAAQ,MAAR,CAAzB;AACAhB,IAAAA,2BAA2B,CAAEgB,IAAF,EAAQ,MAAR,CAA3B;AAEAC,IAAAA,IAAI,GAAG,KAAKA,IAAZ;AACAC,IAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEAU,IAAAA,IAAI,GAAG,CAAEZ,IAAF,EAAQE,OAAR,CAAP;AAEAtB,IAAAA,qBAAqB,CAAEqB,IAAF,CAArB;AAEAA,IAAAA,IAAI,CAACa,EAAL,CAAS,KAAT,EAAgBpC,YAAhB;;AACA,QAAI;AACHc,MAAAA,UAAU,GAAGO,sBAAsB,CAAEC,IAAF,EAAQC,IAAR,EAAcC,OAAd,CAAnC;AACA,KAFD,SAEU;AACTD,MAAAA,IAAI,CAACc,GAAL,CAAU,KAAV,EAAiBrC,YAAjB;AACA;;AACDY,IAAAA,eAAe,GAAG,KAAKA,eAAL,CAAsBY,OAAtB,CAAlB;AACAX,IAAAA,eAAe,GAAG,KAAKA,eAAL,EAAlB;AAEAsB,IAAAA,QAAQ,GAAGhB,uBAAuB,CAAEP,eAAF,EAAmBC,eAAnB,EAAoCC,UAApC,CAAlC;AAEAhB,IAAAA,WAAW,CAAEoC,IAAF,EAAQX,IAAR,EAAcY,QAAd,EAAwB,CAAEvB,eAAF,EAAmBC,eAAnB,EAAoCC,UAApC,CAAxB,CAAX;AAEA,WAAOqB,QAAP;AACA,GA5BD;;AA8BA,SAAOxC,SAAP;AAKC,CA3LA,CAAD","sourcesContent":["/**\n * Globalize v1.7.0\n *\n * https://github.com/globalizejs/globalize\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-08-02T11:53Z\n */\n/*!\n * Globalize v1.7.0 2021-08-02T11:53Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function( root, factory ) {\n\n\t// UMD returnExports\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD\n\t\tdefine([\n\t\t\t\"cldr\",\n\t\t\t\"../globalize\",\n\t\t\t\"./number\",\n\t\t\t\"./plural\",\n\t\t\t\"cldr/event\",\n\t\t\t\"cldr/supplemental\"\n\t\t], factory );\n\t} else if ( typeof exports === \"object\" ) {\n\n\t\t// Node, CommonJS\n\t\tmodule.exports = factory( require( \"cldrjs\" ), require( \"../globalize\" ) );\n\t} else {\n\n\t\t// Extend global\n\t\tfactory( root.Cldr, root.Globalize );\n\t}\n}(this, function( Cldr, Globalize ) {\n\nvar formatMessage = Globalize._formatMessage,\n\truntimeBind = Globalize._runtimeBind,\n\tvalidateCldr = Globalize._validateCldr,\n\tvalidateDefaultLocale = Globalize._validateDefaultLocale,\n\tvalidateParameterPresence = Globalize._validateParameterPresence,\n\tvalidateParameterTypeString = Globalize._validateParameterTypeString,\n\tvalidateParameterTypeNumber = Globalize._validateParameterTypeNumber;\n\n\n/**\n * format( value, numberFormatter, pluralGenerator, properties )\n *\n * @value [Number] The number to format\n *\n * @numberFormatter [String] A numberFormatter from Globalize.numberFormatter\n *\n * @pluralGenerator [String] A pluralGenerator from Globalize.pluralGenerator\n *\n * @properties [Object] containing relative time plural message.\n *\n * Format relative time.\n */\nvar relativeTimeFormat = function( value, numberFormatter, pluralGenerator, properties ) {\n\n\tvar relativeTime,\n\t\tmessage = properties[ \"relative-type-\" + value ];\n\n\tif ( message ) {\n\t\treturn message;\n\t}\n\n\trelativeTime = value <= 0 ? properties[ \"relativeTime-type-past\" ] :\n\t\tproperties[ \"relativeTime-type-future\" ];\n\n\tvalue = Math.abs( value );\n\n\tmessage = relativeTime[ \"relativeTimePattern-count-\" + pluralGenerator( value ) ];\n\treturn formatMessage( message, [ numberFormatter( value ) ] );\n};\n\n\n\n\nvar relativeTimeFormatterFn = function( numberFormatter, pluralGenerator, properties ) {\n\treturn function relativeTimeFormatter( value ) {\n\t\tvalidateParameterPresence( value, \"value\" );\n\t\tvalidateParameterTypeNumber( value, \"value\" );\n\n\t\treturn relativeTimeFormat( value, numberFormatter, pluralGenerator, properties );\n\t};\n\n};\n\n\n\n\n/**\n * properties( unit, cldr, options )\n *\n * @unit [String] eg. \"day\", \"week\", \"month\", etc.\n *\n * @cldr [Cldr instance].\n *\n * @options [Object]\n * - form: [String] eg. \"short\" or \"narrow\". Or falsy for default long form.\n *\n * Return relative time properties.\n */\nvar relativeTimeProperties = function( unit, cldr, options ) {\n\n\tvar form = options.form,\n\t\traw, properties, key, match;\n\n\tif ( form ) {\n\t\tunit = unit + \"-\" + form;\n\t}\n\n\traw = cldr.main( [ \"dates\", \"fields\", unit ] );\n\tproperties = {\n\t\t\"relativeTime-type-future\": raw[ \"relativeTime-type-future\" ],\n\t\t\"relativeTime-type-past\": raw[ \"relativeTime-type-past\" ]\n\t};\n\tfor ( key in raw ) {\n\t\tif ( raw.hasOwnProperty( key ) ) {\n\t\t\tmatch = /relative-type-(-?[0-9]+)/.exec( key );\n\t\t\tif ( match ) {\n\t\t\t\tproperties[ key ] = raw[ key ];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn properties;\n};\n\n\n\n\n/**\n * .formatRelativeTime( value, unit [, options] )\n *\n * @value [Number] The number of unit to format.\n *\n * @unit [String] see .relativeTimeFormatter() for details.\n *\n * @options [Object] see .relativeTimeFormatter() for details.\n *\n * Formats a relative time according to the given unit, options, and the default/instance locale.\n */\nGlobalize.formatRelativeTime =\nGlobalize.prototype.formatRelativeTime = function( value, unit, options ) {\n\tvalidateParameterPresence( value, \"value\" );\n\tvalidateParameterTypeNumber( value, \"value\" );\n\n\treturn this.relativeTimeFormatter( unit, options )( value );\n};\n\n/**\n * .relativeTimeFormatter( unit [, options ])\n *\n * @unit [String] String value indicating the unit to be formatted. eg. \"day\", \"week\", \"month\", etc.\n *\n * @options [Object]\n * - form: [String] eg. \"short\" or \"narrow\". Or falsy for default long form.\n *\n * Returns a function that formats a relative time according to the given unit, options, and the\n * default/instance locale.\n */\nGlobalize.relativeTimeFormatter =\nGlobalize.prototype.relativeTimeFormatter = function( unit, options ) {\n\tvar args, cldr, numberFormatter, pluralGenerator, properties, returnFn;\n\n\tvalidateParameterPresence( unit, \"unit\" );\n\tvalidateParameterTypeString( unit, \"unit\" );\n\n\tcldr = this.cldr;\n\toptions = options || {};\n\n\targs = [ unit, options ];\n\n\tvalidateDefaultLocale( cldr );\n\n\tcldr.on( \"get\", validateCldr );\n\ttry {\n\t\tproperties = relativeTimeProperties( unit, cldr, options );\n\t} finally {\n\t\tcldr.off( \"get\", validateCldr );\n\t}\n\tnumberFormatter = this.numberFormatter( options );\n\tpluralGenerator = this.pluralGenerator();\n\n\treturnFn = relativeTimeFormatterFn( numberFormatter, pluralGenerator, properties );\n\n\truntimeBind( args, cldr, returnFn, [ numberFormatter, pluralGenerator, properties ] );\n\n\treturn returnFn;\n};\n\nreturn Globalize;\n\n\n\n\n}));\n"]},"metadata":{},"sourceType":"script"}