{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { DeliveryAction } from \"./DeliveryAction\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\n\nclass DeliveryQualityAction extends DeliveryAction {\n  /**\n   * @param {Qualifiers.Quality} qualityValue a Quality value\n   */\n  constructor(qualityValue) {\n    super('q', qualityValue.toString());\n    this.qualityValue = qualityValue;\n  }\n  /**\n   * Selet the Chroma sub sampling</br>\n   * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_transformations#toggling_chroma_subsampling | Toggling chroma subsampling}\n   * @param {420 | 444 | number} type The chroma sub sampling type\n   */\n\n\n  chromaSubSampling(type) {\n    const qualityWithSubSampling = new QualifierValue([this.qualityValue, type]);\n    qualityWithSubSampling.setDelimiter(':'); // We either have chroma or quantization, but not both\n\n    return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n  }\n  /**\n   * Controls the final quality by setting a maximum quantization percentage\n   * @param {number} val\n   */\n\n\n  quantization(val) {\n    const qualityWithQuantization = new QualifierValue([this.qualityValue, `qmax_${val}`]);\n    qualityWithQuantization.setDelimiter(':'); // We either have chroma or quantization, but not both\n\n    return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n  }\n\n}\n\nexport { DeliveryQualityAction };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/actions/delivery/DeliveryQuality.js"],"names":["QualifierValue","Qualifier","DeliveryAction","DeliveryQualityAction","constructor","qualityValue","toString","chromaSubSampling","type","qualityWithSubSampling","setDelimiter","addQualifier","quantization","val","qualityWithQuantization"],"mappings":"AAAA,SAASA,cAAT,QAA+B,yCAA/B;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAN,SAAoCD,cAApC,CAAmD;AAC/C;AACJ;AACA;AACIE,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,UAAM,GAAN,EAAWA,YAAY,CAACC,QAAb,EAAX;AACA,SAAKD,YAAL,GAAoBA,YAApB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,iBAAiB,CAACC,IAAD,EAAO;AACpB,UAAMC,sBAAsB,GAAG,IAAIT,cAAJ,CAAmB,CAAC,KAAKK,YAAN,EAAoBG,IAApB,CAAnB,CAA/B;AACAC,IAAAA,sBAAsB,CAACC,YAAvB,CAAoC,GAApC,EAFoB,CAGpB;;AACA,WAAO,KAAKC,YAAL,CAAkB,IAAIV,SAAJ,CAAc,GAAd,EAAmBQ,sBAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIG,EAAAA,YAAY,CAACC,GAAD,EAAM;AACd,UAAMC,uBAAuB,GAAG,IAAId,cAAJ,CAAmB,CAAC,KAAKK,YAAN,EAAqB,QAAOQ,GAAI,EAAhC,CAAnB,CAAhC;AACAC,IAAAA,uBAAuB,CAACJ,YAAxB,CAAqC,GAArC,EAFc,CAGd;;AACA,WAAO,KAAKC,YAAL,CAAkB,IAAIV,SAAJ,CAAc,GAAd,EAAmBa,uBAAnB,CAAlB,CAAP;AACH;;AA5B8C;;AA8BnD,SAASX,qBAAT","sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { DeliveryAction } from \"./DeliveryAction\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryQualityAction extends DeliveryAction {\n    /**\n     * @param {Qualifiers.Quality} qualityValue a Quality value\n     */\n    constructor(qualityValue) {\n        super('q', qualityValue.toString());\n        this.qualityValue = qualityValue;\n    }\n    /**\n     * Selet the Chroma sub sampling</br>\n     * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_transformations#toggling_chroma_subsampling | Toggling chroma subsampling}\n     * @param {420 | 444 | number} type The chroma sub sampling type\n     */\n    chromaSubSampling(type) {\n        const qualityWithSubSampling = new QualifierValue([this.qualityValue, type]);\n        qualityWithSubSampling.setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n    }\n    /**\n     * Controls the final quality by setting a maximum quantization percentage\n     * @param {number} val\n     */\n    quantization(val) {\n        const qualityWithQuantization = new QualifierValue([this.qualityValue, `qmax_${val}`]);\n        qualityWithQuantization.setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n    }\n}\nexport { DeliveryQualityAction };\n"]},"metadata":{},"sourceType":"module"}