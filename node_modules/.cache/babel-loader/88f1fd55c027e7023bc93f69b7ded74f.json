{"ast":null,"code":"const dirMap = {\n  // greater-than\n  gt: {\n    asc: 1,\n    desc: -1\n  },\n  // less-than\n  lt: {\n    asc: -1,\n    desc: 1\n  }\n};\n\nconst doSort = (A, B, property, direction = \"ASC\") => {\n  const a = A[property];\n  const b = B[property];\n\n  if (a < b) {\n    return dirMap.lt[direction.toLowerCase()];\n  }\n\n  if (a > b) {\n    return dirMap.gt[direction.toLowerCase()];\n  }\n\n  return 0;\n};\n\nconst createSorter = (...args) => {\n  if (typeof args[0] === \"string\") {\n    args = [{\n      direction: args[1],\n      property: args[0]\n    }];\n  }\n\n  return (A, B) => {\n    let ret = 0;\n    args.some(sorter => {\n      const {\n        property,\n        direction = \"ASC\"\n      } = sorter;\n      const value = doSort(A, B, property, direction);\n\n      if (value === 0) {\n        // they are equal, continue to next sorter if any\n        return false;\n      } else {\n        // they are different, stop at current sorter\n        ret = value;\n        return true;\n      }\n    });\n    return ret;\n  };\n};\n\nexport { createSorter };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/helpers/Sort.js"],"names":["dirMap","gt","asc","desc","lt","doSort","A","B","property","direction","a","b","toLowerCase","createSorter","args","ret","some","sorter","value"],"mappings":"AAAA,MAAMA,MAAM,GAAG;AACb;AACAC,EAAAA,EAAE,EAAE;AAAEC,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,IAAI,EAAE,CAAC;AAAjB,GAFS;AAGb;AACAC,EAAAA,EAAE,EAAE;AAAEF,IAAAA,GAAG,EAAE,CAAC,CAAR;AAAWC,IAAAA,IAAI,EAAE;AAAjB;AAJS,CAAf;;AAOA,MAAME,MAAM,GAAG,CAACC,CAAD,EAAIC,CAAJ,EAAOC,QAAP,EAAiBC,SAAS,GAAG,KAA7B,KAAuC;AACpD,QAAMC,CAAC,GAAGJ,CAAC,CAACE,QAAD,CAAX;AACA,QAAMG,CAAC,GAAGJ,CAAC,CAACC,QAAD,CAAX;;AAEA,MAAIE,CAAC,GAAGC,CAAR,EAAW;AACT,WAAOX,MAAM,CAACI,EAAP,CAAUK,SAAS,CAACG,WAAV,EAAV,CAAP;AACD;;AACD,MAAIF,CAAC,GAAGC,CAAR,EAAW;AACT,WAAOX,MAAM,CAACC,EAAP,CAAUQ,SAAS,CAACG,WAAV,EAAV,CAAP;AACD;;AACD,SAAO,CAAP;AACD,CAXD;;AAaA,MAAMC,YAAY,GAAG,CAAC,GAAGC,IAAJ,KAAa;AAChC,MAAI,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAvB,EAAiC;AAC/BA,IAAAA,IAAI,GAAG,CACL;AACEL,MAAAA,SAAS,EAAEK,IAAI,CAAC,CAAD,CADjB;AAEEN,MAAAA,QAAQ,EAAEM,IAAI,CAAC,CAAD;AAFhB,KADK,CAAP;AAMD;;AAED,SAAO,CAACR,CAAD,EAAIC,CAAJ,KAAU;AACf,QAAIQ,GAAG,GAAG,CAAV;AAEAD,IAAAA,IAAI,CAACE,IAAL,CAAWC,MAAD,IAAY;AACpB,YAAM;AAAET,QAAAA,QAAF;AAAYC,QAAAA,SAAS,GAAG;AAAxB,UAAkCQ,MAAxC;AACA,YAAMC,KAAK,GAAGb,MAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,QAAP,EAAiBC,SAAjB,CAApB;;AAEA,UAAIS,KAAK,KAAK,CAAd,EAAiB;AACf;AACA,eAAO,KAAP;AACD,OAHD,MAGO;AACL;AACAH,QAAAA,GAAG,GAAGG,KAAN;AAEA,eAAO,IAAP;AACD;AACF,KAbD;AAeA,WAAOH,GAAP;AACD,GAnBD;AAoBD,CA9BD;;AAgCA,SAASF,YAAT","sourcesContent":["const dirMap = {\r\n  // greater-than\r\n  gt: { asc: 1, desc: -1 },\r\n  // less-than\r\n  lt: { asc: -1, desc: 1 },\r\n};\r\n\r\nconst doSort = (A, B, property, direction = \"ASC\") => {\r\n  const a = A[property];\r\n  const b = B[property];\r\n\r\n  if (a < b) {\r\n    return dirMap.lt[direction.toLowerCase()];\r\n  }\r\n  if (a > b) {\r\n    return dirMap.gt[direction.toLowerCase()];\r\n  }\r\n  return 0;\r\n};\r\n\r\nconst createSorter = (...args) => {\r\n  if (typeof args[0] === \"string\") {\r\n    args = [\r\n      {\r\n        direction: args[1],\r\n        property: args[0],\r\n      },\r\n    ];\r\n  }\r\n\r\n  return (A, B) => {\r\n    let ret = 0;\r\n\r\n    args.some((sorter) => {\r\n      const { property, direction = \"ASC\" } = sorter;\r\n      const value = doSort(A, B, property, direction);\r\n\r\n      if (value === 0) {\r\n        // they are equal, continue to next sorter if any\r\n        return false;\r\n      } else {\r\n        // they are different, stop at current sorter\r\n        ret = value;\r\n\r\n        return true;\r\n      }\r\n    });\r\n\r\n    return ret;\r\n  };\r\n};\r\n\r\nexport { createSorter };\r\n"]},"metadata":{},"sourceType":"module"}