{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../../internal/Action\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nvar Pixelate = /*#__PURE__*/function (_Action) {\n  _inherits(Pixelate, _Action);\n\n  var _super = _createSuper(Pixelate);\n\n  function Pixelate(squareSize) {\n    var _this;\n\n    _classCallCheck(this, Pixelate);\n\n    _this = _super.call(this);\n    _this._squareSize = squareSize;\n    return _this;\n  }\n  /**\n   * @description Specifies the region to piexlate.\n   * @param {NamedRegion} pixelateRegion\n   */\n\n\n  _createClass(Pixelate, [{\n    key: \"region\",\n    value: function region(pixelateRegion) {\n      this._region = pixelateRegion;\n      return this;\n    }\n    /**\n     * @description Sets the squareSize of the pixelate effect.\n     * @param {number | string} squareSize\n     */\n\n  }, {\n    key: \"squareSize\",\n    value: function squareSize(_squareSize) {\n      this._squareSize = _squareSize;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var _this2 = this;\n\n      /*\n       * pixelate with region is a unique object in this codebase.\n       * On top of pixelate being an Action with Qualifiers,\n       * it also accepts a Qualifier called Region.\n       *\n       * This Qualifier is in itself composite of qualifiers (such as height, or width).\n       * The existence of Region changes the output of pixelate in non traditional ways\n       * which forced this relatively ad-hoc implementation.\n       *\n       * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n       * This happens naturally in the Action class,\n       * however since we're dealing with two levels of qualifiers (pixelate and Region),\n       * these need to be merged.\n       *\n       * This function will merge the Region qualifiers with pixelate\n       * and add all needed implicit qualifiers (like g_ocr_text).\n       * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n       */\n      var str = this._squareSize ? \":\".concat(this._squareSize) : '';\n\n      if ('_region' in this) {\n        var qualifiers = this._region.qualifiers; // Copy qualifiers from the region \"action\" to the pixelate action\n\n        qualifiers.forEach(function (q) {\n          return _this2.addQualifier(q);\n        });\n\n        if (this._region.regionType === 'named') {\n          this.addQualifier(new Qualifier('e', \"pixelate_region\".concat(str)));\n        }\n\n        if (this._region.regionType === 'ocr_text') {\n          this.addQualifier(new Qualifier('e', \"pixelate_region\".concat(str)));\n          this.addQualifier(new Qualifier('g', \"ocr_text\"));\n        }\n\n        if (this._region.regionType === 'faces') {\n          this.addQualifier(new Qualifier('e', \"pixelate_faces\".concat(str)));\n        }\n      } else {\n        this.addQualifier(new Qualifier('e', \"pixelate\".concat(str)));\n      }\n    }\n  }]);\n\n  return Pixelate;\n}(Action);\n\nexport { Pixelate };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/effect/pixelate/pixelate.js"],"names":["Qualifier","Action","Pixelate","squareSize","_squareSize","pixelateRegion","_region","str","qualifiers","forEach","q","addQualifier","regionType"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,uCAA1B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,Q;;;;;AACF,oBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AACpB;AACA,UAAKC,WAAL,GAAmBD,UAAnB;AAFoB;AAGvB;AACD;AACJ;AACA;AACA;;;;;WACI,gBAAOE,cAAP,EAAuB;AACnB,WAAKC,OAAL,GAAeD,cAAf;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,oBAAWF,WAAX,EAAuB;AACnB,WAAKC,WAAL,GAAmBD,WAAnB;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAAA;;AAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,UAAMI,GAAG,GAAG,KAAKH,WAAL,cAAuB,KAAKA,WAA5B,IAA4C,EAAxD;;AACA,UAAI,aAAa,IAAjB,EAAuB;AACnB,YAAMI,UAAU,GAAG,KAAKF,OAAL,CAAaE,UAAhC,CADmB,CAEnB;;AACAA,QAAAA,UAAU,CAACC,OAAX,CAAmB,UAACC,CAAD;AAAA,iBAAO,MAAI,CAACC,YAAL,CAAkBD,CAAlB,CAAP;AAAA,SAAnB;;AACA,YAAI,KAAKJ,OAAL,CAAaM,UAAb,KAA4B,OAAhC,EAAyC;AACrC,eAAKD,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,2BAAqCO,GAArC,EAAlB;AACH;;AACD,YAAI,KAAKD,OAAL,CAAaM,UAAb,KAA4B,UAAhC,EAA4C;AACxC,eAAKD,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,2BAAqCO,GAArC,EAAlB;AACA,eAAKI,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,aAAlB;AACH;;AACD,YAAI,KAAKM,OAAL,CAAaM,UAAb,KAA4B,OAAhC,EAAyC;AACrC,eAAKD,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,0BAAoCO,GAApC,EAAlB;AACH;AACJ,OAdD,MAeK;AACD,aAAKI,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,oBAA8BO,GAA9B,EAAlB;AACH;AACJ;;;;EA3DkBN,M;;AA6DvB,SAASC,QAAT","sourcesContent":["import { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../../internal/Action\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Pixelate extends Action {\n    constructor(squareSize) {\n        super();\n        this._squareSize = squareSize;\n    }\n    /**\n     * @description Specifies the region to piexlate.\n     * @param {NamedRegion} pixelateRegion\n     */\n    region(pixelateRegion) {\n        this._region = pixelateRegion;\n        return this;\n    }\n    /**\n     * @description Sets the squareSize of the pixelate effect.\n     * @param {number | string} squareSize\n     */\n    squareSize(squareSize) {\n        this._squareSize = squareSize;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * pixelate with region is a unique object in this codebase.\n         * On top of pixelate being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of pixelate in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (pixelate and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with pixelate\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const str = this._squareSize ? `:${this._squareSize}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the pixelate action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'named') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `pixelate${str}`));\n        }\n    }\n}\nexport { Pixelate };\n"]},"metadata":{},"sourceType":"module"}