{"ast":null,"code":"import { BaseSource } from \"../BaseSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\n\nclass VideoSource extends BaseSource {\n  constructor(publicID) {\n    super();\n    this._publicID = publicID;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  getOpenSourceString(layerType) {\n    const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n    return `${layerType}_video:${encodedPublicID}`;\n  }\n\n}\n\nexport { VideoSource };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/VideoSource.js"],"names":["BaseSource","VideoSource","constructor","publicID","_publicID","getOpenSourceString","layerType","encodedPublicID","encodeAssetPublicID"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,SAA0BD,UAA1B,CAAqC;AACjCE,EAAAA,WAAW,CAACC,QAAD,EAAW;AAClB;AACA,SAAKC,SAAL,GAAiBD,QAAjB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,mBAAmB,CAACC,SAAD,EAAY;AAC3B,UAAMC,eAAe,GAAG,KAAKC,mBAAL,CAAyB,KAAKJ,SAA9B,CAAxB;AACA,WAAQ,GAAEE,SAAU,UAASC,eAAgB,EAA7C;AACH;;AAdgC;;AAgBrC,SAASN,WAAT","sourcesContent":["import { BaseSource } from \"../BaseSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a video layer, is an instance of a {@link VideoTransformation|VideoTransformation}\n * <div class=\"panel panel-primary\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass VideoSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        return `${layerType}_video:${encodedPublicID}`;\n    }\n}\nexport { VideoSource };\n"]},"metadata":{},"sourceType":"module"}