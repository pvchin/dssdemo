{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BaseSource } from \"../BaseSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\n\nvar ImageSource = /*#__PURE__*/function (_BaseSource) {\n  _inherits(ImageSource, _BaseSource);\n\n  var _super = _createSuper(ImageSource);\n\n  function ImageSource(publicID) {\n    var _this;\n\n    _classCallCheck(this, ImageSource);\n\n    _this = _super.call(this);\n    _this._publicID = publicID;\n    return _this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  _createClass(ImageSource, [{\n    key: \"getOpenSourceString\",\n    value: function getOpenSourceString(layerType) {\n      var encodedPublicID = this.encodeAssetPublicID(this._publicID);\n\n      if (this._format) {\n        return \"\".concat(layerType, \"_\").concat(encodedPublicID, \".\").concat(this._format.toString());\n      } else {\n        return \"\".concat(layerType, \"_\").concat(encodedPublicID);\n      }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(_format) {\n      this._format = _format;\n      return this;\n    }\n  }]);\n\n  return ImageSource;\n}(BaseSource);\n\nexport { ImageSource };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/ImageSource.js"],"names":["BaseSource","ImageSource","publicID","_publicID","layerType","encodedPublicID","encodeAssetPublicID","_format","toString","format"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;;;;;AACF,uBAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AAClB;AACA,UAAKC,SAAL,GAAiBD,QAAjB;AAFkB;AAGrB;AACD;AACJ;AACA;AACA;AACA;AACA;;;;;WACI,6BAAoBE,SAApB,EAA+B;AAC3B,UAAMC,eAAe,GAAG,KAAKC,mBAAL,CAAyB,KAAKH,SAA9B,CAAxB;;AACA,UAAI,KAAKI,OAAT,EAAkB;AACd,yBAAUH,SAAV,cAAuBC,eAAvB,cAA0C,KAAKE,OAAL,CAAaC,QAAb,EAA1C;AACH,OAFD,MAGK;AACD,yBAAUJ,SAAV,cAAuBC,eAAvB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOI,OAAP,EAAe;AACX,WAAKF,OAAL,GAAeE,OAAf;AACA,aAAO,IAAP;AACH;;;;EA7BqBT,U;;AA+B1B,SAASC,WAAT","sourcesContent":["import { BaseSource } from \"../BaseSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate an image layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}\n *   </ul>\n * </div>\n */\nclass ImageSource extends BaseSource {\n    constructor(publicID) {\n        super();\n        this._publicID = publicID;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const encodedPublicID = this.encodeAssetPublicID(this._publicID);\n        if (this._format) {\n            return `${layerType}_${encodedPublicID}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_${encodedPublicID}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n}\nexport { ImageSource };\n"]},"metadata":{},"sourceType":"module"}