{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @extends SDK.Action\n * @memberOf SDK\n * @description\n * A generic Layer action that can add a Video, Text or Image layer.<br>\n * This class can represent an overlay or an underlay.\n */\n\nvar LayerAction = /*#__PURE__*/function (_Action) {\n  _inherits(LayerAction, _Action);\n\n  var _super = _createSuper(LayerAction);\n\n  /**\n   * @description Creates a LayerAction to be used with overlays and underlays\n   * @param {ImageSource | TextSource | VideoSource} layerSource The Source used for the layer, use the builders provided {@link Qualifiers.Source|here}\n   */\n  function LayerAction(layerSource) {\n    var _this;\n\n    _classCallCheck(this, LayerAction);\n\n    _this = _super.call(this);\n    _this.source = layerSource;\n    return _this;\n  }\n  /**\n   * @description Sets the layerType to 'u' (underlay) or 'l' (overlay).\n   * @param {'u' | 'l'} type\n   * @return {this}\n   */\n\n\n  _createClass(LayerAction, [{\n    key: \"setLayerType\",\n    value: function setLayerType(type) {\n      this.layerType = type;\n      return this;\n    }\n    /**\n     * @description Sets the timeline position of the video layer\n     * @param {Qualifiers.TimelinePosition} timelinePosition\n     * @return {this}\n     */\n\n  }, {\n    key: \"timeline\",\n    value: function timeline(timelinePosition) {\n      this._timelinePosition = timelinePosition;\n      return this;\n    }\n    /**\n     * @description Sets the position of the layer\n     * @param {Qualifiers.Position} position\n     * @return {this}\n     */\n\n  }, {\n    key: \"position\",\n    value: function position(_position) {\n      this._position = _position;\n      return this;\n    }\n    /**\n     * @description Specifies how to blend the image overlay with the base overlay\n     * @param {Qualifiers.BlendMode} blendMode\n     * @return {this}\n     */\n\n  }, {\n    key: \"blendMode\",\n    value: function blendMode(_blendMode) {\n      this._blendMode = _blendMode;\n      return this;\n    }\n    /**\n     * @private\n     * @description\n     * Closes a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return {SDK.Action}\n     */\n\n  }, {\n    key: \"closeLayer\",\n    value: function closeLayer() {\n      var _a, _b, _c, _d;\n\n      var bit = new Action().addFlag(new FlagQualifier('layer_apply'));\n      (_a = this._position) === null || _a === void 0 ? void 0 : _a.qualifiers.forEach(function (qualifier) {\n        bit.addQualifier(qualifier);\n      }); // Flags are stored separately from qualifiers, we need to add those as well\n\n      (_b = this._position) === null || _b === void 0 ? void 0 : _b.flags.forEach(function (flag) {\n        bit.addFlag(flag);\n      });\n      (_c = this._blendMode) === null || _c === void 0 ? void 0 : _c.qualifiers.forEach(function (qualifier) {\n        bit.addQualifier(qualifier);\n      });\n      (_d = this._timelinePosition) === null || _d === void 0 ? void 0 : _d.qualifiers.forEach(function (qualifier) {\n        bit.addQualifier(qualifier);\n      });\n      return bit;\n    }\n    /**\n     * @private\n     * @description\n     * Opens a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return string\n     */\n\n  }, {\n    key: \"openLayer\",\n    value: function openLayer() {\n      return \"\".concat(this.source.getOpenSourceString(this.layerType));\n    }\n    /**\n     * @description\n     * Serializes the Layer to a string\n     * @return {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return [this.openLayer(), this.source.getTransformation() && this.source.getTransformation().toString(), this.closeLayer()].filter(function (a) {\n        return a;\n      }).join('/');\n    }\n  }]);\n\n  return LayerAction;\n}(Action);\n\nexport { LayerAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/layer/LayerAction.js"],"names":["Action","FlagQualifier","LayerAction","layerSource","source","type","layerType","timelinePosition","_timelinePosition","position","_position","blendMode","_blendMode","_a","_b","_c","_d","bit","addFlag","qualifiers","forEach","qualifier","addQualifier","flags","flag","getOpenSourceString","openLayer","getTransformation","toString","closeLayer","filter","a","join"],"mappings":"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","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @extends SDK.Action\n * @memberOf SDK\n * @description\n * A generic Layer action that can add a Video, Text or Image layer.<br>\n * This class can represent an overlay or an underlay.\n */\nclass LayerAction extends Action {\n    /**\n     * @description Creates a LayerAction to be used with overlays and underlays\n     * @param {ImageSource | TextSource | VideoSource} layerSource The Source used for the layer, use the builders provided {@link Qualifiers.Source|here}\n     */\n    constructor(layerSource) {\n        super();\n        this.source = layerSource;\n    }\n    /**\n     * @description Sets the layerType to 'u' (underlay) or 'l' (overlay).\n     * @param {'u' | 'l'} type\n     * @return {this}\n     */\n    setLayerType(type) {\n        this.layerType = type;\n        return this;\n    }\n    /**\n     * @description Sets the timeline position of the video layer\n     * @param {Qualifiers.TimelinePosition} timelinePosition\n     * @return {this}\n     */\n    timeline(timelinePosition) {\n        this._timelinePosition = timelinePosition;\n        return this;\n    }\n    /**\n     * @description Sets the position of the layer\n     * @param {Qualifiers.Position} position\n     * @return {this}\n     */\n    position(position) {\n        this._position = position;\n        return this;\n    }\n    /**\n     * @description Specifies how to blend the image overlay with the base overlay\n     * @param {Qualifiers.BlendMode} blendMode\n     * @return {this}\n     */\n    blendMode(blendMode) {\n        this._blendMode = blendMode;\n        return this;\n    }\n    /**\n     * @private\n     * @description\n     * Closes a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return {SDK.Action}\n     */\n    closeLayer() {\n        var _a, _b, _c, _d;\n        const bit = new Action().addFlag(new FlagQualifier('layer_apply'));\n        (_a = this._position) === null || _a === void 0 ? void 0 : _a.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        // Flags are stored separately from qualifiers, we need to add those as well\n        (_b = this._position) === null || _b === void 0 ? void 0 : _b.flags.forEach((flag) => {\n            bit.addFlag(flag);\n        });\n        (_c = this._blendMode) === null || _c === void 0 ? void 0 : _c.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        (_d = this._timelinePosition) === null || _d === void 0 ? void 0 : _d.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        return bit;\n    }\n    /**\n     * @private\n     * @description\n     * Opens a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return string\n     */\n    openLayer() {\n        return `${this.source.getOpenSourceString(this.layerType)}`;\n    }\n    /**\n     * @description\n     * Serializes the Layer to a string\n     * @return {string}\n     */\n    toString() {\n        return [\n            this.openLayer(),\n            this.source.getTransformation() && this.source.getTransformation().toString(),\n            this.closeLayer()\n        ].filter((a) => a).join('/');\n    }\n}\nexport { LayerAction };\n"]},"metadata":{},"sourceType":"module"}