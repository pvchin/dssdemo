{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @extends SDK.Action\n * @memberOf SDK\n * @description\n * A generic Layer action that can add a Video, Text or Image layer.<br>\n * This class can represent an overlay or an underlay.\n */\n\nclass LayerAction extends Action {\n  /**\n   * @description Creates a LayerAction to be used with overlays and underlays\n   * @param {ImageSource | TextSource | VideoSource} layerSource The Source used for the layer, use the builders provided {@link Qualifiers.Source|here}\n   */\n  constructor(layerSource) {\n    super();\n    this.source = layerSource;\n  }\n  /**\n   * @description Sets the layerType to 'u' (underlay) or 'l' (overlay).\n   * @param {'u' | 'l'} type\n   * @return {this}\n   */\n\n\n  setLayerType(type) {\n    this.layerType = type;\n    return this;\n  }\n  /**\n   * @description Sets the timeline position of the video layer\n   * @param {Qualifiers.TimelinePosition} timelinePosition\n   * @return {this}\n   */\n\n\n  timeline(timelinePosition) {\n    this._timelinePosition = timelinePosition;\n    return this;\n  }\n  /**\n   * @description Sets the position of the layer\n   * @param {Qualifiers.Position} position\n   * @return {this}\n   */\n\n\n  position(position) {\n    this._position = position;\n    return this;\n  }\n  /**\n   * @description Specifies how to blend the image overlay with the base overlay\n   * @param {Qualifiers.BlendMode} blendMode\n   * @return {this}\n   */\n\n\n  blendMode(blendMode) {\n    this._blendMode = blendMode;\n    return this;\n  }\n  /**\n   * @private\n   * @description\n   * Closes a layer (layers are built in three stages -> /Open/Transform/Close).\n   * @return {SDK.Action}\n   */\n\n\n  closeLayer() {\n    var _a, _b, _c, _d;\n\n    const bit = new Action().addFlag(new FlagQualifier('layer_apply'));\n    (_a = this._position) === null || _a === void 0 ? void 0 : _a.qualifiers.forEach(qualifier => {\n      bit.addQualifier(qualifier);\n    }); // Flags are stored separately from qualifiers, we need to add those as well\n\n    (_b = this._position) === null || _b === void 0 ? void 0 : _b.flags.forEach(flag => {\n      bit.addFlag(flag);\n    });\n    (_c = this._blendMode) === null || _c === void 0 ? void 0 : _c.qualifiers.forEach(qualifier => {\n      bit.addQualifier(qualifier);\n    });\n    (_d = this._timelinePosition) === null || _d === void 0 ? void 0 : _d.qualifiers.forEach(qualifier => {\n      bit.addQualifier(qualifier);\n    });\n    return bit;\n  }\n  /**\n   * @private\n   * @description\n   * Opens a layer (layers are built in three stages -> /Open/Transform/Close).\n   * @return string\n   */\n\n\n  openLayer() {\n    return `${this.source.getOpenSourceString(this.layerType)}`;\n  }\n  /**\n   * @description\n   * Serializes the Layer to a string\n   * @return {string}\n   */\n\n\n  toString() {\n    return [this.openLayer(), this.source.getTransformation() && this.source.getTransformation().toString(), this.closeLayer()].filter(a => a).join('/');\n  }\n\n}\n\nexport { LayerAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/layer/LayerAction.js"],"names":["Action","FlagQualifier","LayerAction","constructor","layerSource","source","setLayerType","type","layerType","timeline","timelinePosition","_timelinePosition","position","_position","blendMode","_blendMode","closeLayer","_a","_b","_c","_d","bit","addFlag","qualifiers","forEach","qualifier","addQualifier","flags","flag","openLayer","getOpenSourceString","toString","getTransformation","filter","a","join"],"mappings":"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","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @extends SDK.Action\n * @memberOf SDK\n * @description\n * A generic Layer action that can add a Video, Text or Image layer.<br>\n * This class can represent an overlay or an underlay.\n */\nclass LayerAction extends Action {\n    /**\n     * @description Creates a LayerAction to be used with overlays and underlays\n     * @param {ImageSource | TextSource | VideoSource} layerSource The Source used for the layer, use the builders provided {@link Qualifiers.Source|here}\n     */\n    constructor(layerSource) {\n        super();\n        this.source = layerSource;\n    }\n    /**\n     * @description Sets the layerType to 'u' (underlay) or 'l' (overlay).\n     * @param {'u' | 'l'} type\n     * @return {this}\n     */\n    setLayerType(type) {\n        this.layerType = type;\n        return this;\n    }\n    /**\n     * @description Sets the timeline position of the video layer\n     * @param {Qualifiers.TimelinePosition} timelinePosition\n     * @return {this}\n     */\n    timeline(timelinePosition) {\n        this._timelinePosition = timelinePosition;\n        return this;\n    }\n    /**\n     * @description Sets the position of the layer\n     * @param {Qualifiers.Position} position\n     * @return {this}\n     */\n    position(position) {\n        this._position = position;\n        return this;\n    }\n    /**\n     * @description Specifies how to blend the image overlay with the base overlay\n     * @param {Qualifiers.BlendMode} blendMode\n     * @return {this}\n     */\n    blendMode(blendMode) {\n        this._blendMode = blendMode;\n        return this;\n    }\n    /**\n     * @private\n     * @description\n     * Closes a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return {SDK.Action}\n     */\n    closeLayer() {\n        var _a, _b, _c, _d;\n        const bit = new Action().addFlag(new FlagQualifier('layer_apply'));\n        (_a = this._position) === null || _a === void 0 ? void 0 : _a.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        // Flags are stored separately from qualifiers, we need to add those as well\n        (_b = this._position) === null || _b === void 0 ? void 0 : _b.flags.forEach((flag) => {\n            bit.addFlag(flag);\n        });\n        (_c = this._blendMode) === null || _c === void 0 ? void 0 : _c.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        (_d = this._timelinePosition) === null || _d === void 0 ? void 0 : _d.qualifiers.forEach((qualifier) => {\n            bit.addQualifier(qualifier);\n        });\n        return bit;\n    }\n    /**\n     * @private\n     * @description\n     * Opens a layer (layers are built in three stages -> /Open/Transform/Close).\n     * @return string\n     */\n    openLayer() {\n        return `${this.source.getOpenSourceString(this.layerType)}`;\n    }\n    /**\n     * @description\n     * Serializes the Layer to a string\n     * @return {string}\n     */\n    toString() {\n        return [\n            this.openLayer(),\n            this.source.getTransformation() && this.source.getTransformation().toString(),\n            this.closeLayer()\n        ].filter((a) => a).join('/');\n    }\n}\nexport { LayerAction };\n"]},"metadata":{},"sourceType":"module"}