{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { Transformation } from \"../../transformation/Transformation\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos | Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\n\nvar ConcatenateAction = /*#__PURE__*/function (_Action) {\n  _inherits(ConcatenateAction, _Action);\n\n  var _super = _createSuper(ConcatenateAction);\n\n  /**\n   *\n   * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n   *         the Source to concatenate\n   */\n  function ConcatenateAction(source) {\n    var _this;\n\n    _classCallCheck(this, ConcatenateAction);\n\n    _this = _super.call(this);\n    _this.concatSource = source;\n    return _this;\n  }\n  /**\n   * @description Sets the transition between a video and a concatenated source\n   * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n   * @return {this}\n   */\n\n\n  _createClass(ConcatenateAction, [{\n    key: \"transition\",\n    value: function transition(source) {\n      this._transition = source;\n      return this;\n    }\n    /**\n     * @description Prepend the concatenated video - Adds the video before the original\n     * @return {this}\n     */\n\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      this._prepend = true;\n      return this;\n    }\n    /**\n     * The duration in seconds\n     * @param {number} sec\n     * @return {this}\n     */\n\n  }, {\n    key: \"duration\",\n    value: function duration(sec) {\n      this._duration = sec;\n      return this;\n    }\n    /**\n     * @description Get the transitionString for the toString() method\n     * @return {string}\n     */\n\n  }, {\n    key: \"getTransitionString\",\n    value: function getTransitionString() {\n      var transTx = this._transition.getTransformation();\n\n      return [\"e_transition,\".concat(this._transition.getOpenSourceString('l')), transTx && transTx.toString(), 'fl_layer_apply'].filter(function (a) {\n        return a;\n      }).join('/');\n    }\n    /**\n     * @description Get the string representation of the Concatenation action\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      /*\n       *\n       * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n       *\n       * First, we calculate the open and close parts of the top-level transformation:\n       *   - {open}/{sourceTransformation}/{close}\n       *\n       * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n       * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n       * - fl_splice is also added, but only if a transition is not needed.\n       *\n       * once we've calculated the open and close parts, we now need to deal with the Transition.\n       * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n       *\n       * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n       */\n      // Calculate the open part\n      var open = [this._duration && \"du_\".concat(this._duration), !this._transition && \"fl_splice\", \"\".concat(this.concatSource.getOpenSourceString('l'))].filter(function (a) {\n        return a;\n      }).join(','); // Calculate the open part\n\n      var close = ['fl_layer_apply', this._prepend && 'so_0'].filter(function (a) {\n        return a;\n      }).join(','); // Calculate the Transition part\n\n      var concatSourceTx;\n\n      if (this.concatSource.getTransformation()) {\n        concatSourceTx = this.concatSource.getTransformation();\n      } else {\n        concatSourceTx = new Transformation();\n      }\n\n      if (this._transition) {\n        concatSourceTx.addTransformation(this.getTransitionString());\n      } // Put it all together, the transition is already part of the concatSourceTx\n\n\n      return [open, concatSourceTx.toString(), close].filter(function (a) {\n        return a;\n      }).join('/');\n    }\n  }]);\n\n  return ConcatenateAction;\n}(Action);\n\nexport default ConcatenateAction;","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/videoEdit/ConcatenateAction.js"],"names":["Action","Transformation","ConcatenateAction","source","concatSource","_transition","_prepend","sec","_duration","transTx","getTransformation","getOpenSourceString","toString","filter","a","join","open","close","concatSourceTx","addTransformation","getTransitionString"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,qCAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,iB;;;;;AACF;AACJ;AACA;AACA;AACA;AACI,6BAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAChB;AACA,UAAKC,YAAL,GAAoBD,MAApB;AAFgB;AAGnB;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,oBAAWA,MAAX,EAAmB;AACf,WAAKE,WAAL,GAAmBF,MAAnB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,mBAAU;AACN,WAAKG,QAAL,GAAgB,IAAhB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,kBAASC,GAAT,EAAc;AACV,WAAKC,SAAL,GAAiBD,GAAjB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,+BAAsB;AAClB,UAAME,OAAO,GAAG,KAAKJ,WAAL,CAAiBK,iBAAjB,EAAhB;;AACA,aAAO,wBACa,KAAKL,WAAL,CAAiBM,mBAAjB,CAAqC,GAArC,CADb,GAEHF,OAAO,IAAIA,OAAO,CAACG,QAAR,EAFR,EAGH,gBAHG,EAILC,MAJK,CAIE,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAJF,EAIYC,IAJZ,CAIiB,GAJjB,CAAP;AAKH;AACD;AACJ;AACA;;;;WACI,oBAAW;AACP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ;AACA,UAAMC,IAAI,GAAG,CACT,KAAKR,SAAL,iBAAwB,KAAKA,SAA7B,CADS,EAET,CAAC,KAAKH,WAAN,eAFS,YAGN,KAAKD,YAAL,CAAkBO,mBAAlB,CAAsC,GAAtC,CAHM,GAIXE,MAJW,CAIJ,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAJI,EAIMC,IAJN,CAIW,GAJX,CAAb,CAlBO,CAuBP;;AACA,UAAME,KAAK,GAAG,CACV,gBADU,EAEV,KAAKX,QAAL,IAAiB,MAFP,EAGZO,MAHY,CAGL,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAHK,EAGKC,IAHL,CAGU,GAHV,CAAd,CAxBO,CA4BP;;AACA,UAAIG,cAAJ;;AACA,UAAI,KAAKd,YAAL,CAAkBM,iBAAlB,EAAJ,EAA2C;AACvCQ,QAAAA,cAAc,GAAG,KAAKd,YAAL,CAAkBM,iBAAlB,EAAjB;AACH,OAFD,MAGK;AACDQ,QAAAA,cAAc,GAAG,IAAIjB,cAAJ,EAAjB;AACH;;AACD,UAAI,KAAKI,WAAT,EAAsB;AAClBa,QAAAA,cAAc,CAACC,iBAAf,CAAiC,KAAKC,mBAAL,EAAjC;AACH,OAtCM,CAuCP;;;AACA,aAAO,CACHJ,IADG,EAEHE,cAAc,CAACN,QAAf,EAFG,EAGHK,KAHG,EAILJ,MAJK,CAIE,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAJF,EAIYC,IAJZ,CAIiB,GAJjB,CAAP;AAKH;;;;EAhG2Bf,M;;AAkGhC,eAAeE,iBAAf","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Transformation } from \"../../transformation/Transformation\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos | Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass ConcatenateAction extends Action {\n    /**\n     *\n     * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n     *         the Source to concatenate\n     */\n    constructor(source) {\n        super();\n        this.concatSource = source;\n    }\n    /**\n     * @description Sets the transition between a video and a concatenated source\n     * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n     * @return {this}\n     */\n    transition(source) {\n        this._transition = source;\n        return this;\n    }\n    /**\n     * @description Prepend the concatenated video - Adds the video before the original\n     * @return {this}\n     */\n    prepend() {\n        this._prepend = true;\n        return this;\n    }\n    /**\n     * The duration in seconds\n     * @param {number} sec\n     * @return {this}\n     */\n    duration(sec) {\n        this._duration = sec;\n        return this;\n    }\n    /**\n     * @description Get the transitionString for the toString() method\n     * @return {string}\n     */\n    getTransitionString() {\n        const transTx = this._transition.getTransformation();\n        return [\n            `e_transition,${this._transition.getOpenSourceString('l')}`,\n            transTx && transTx.toString(),\n            'fl_layer_apply'\n        ].filter((a) => a).join('/');\n    }\n    /**\n     * @description Get the string representation of the Concatenation action\n     */\n    toString() {\n        /*\n         *\n         * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n         *\n         * First, we calculate the open and close parts of the top-level transformation:\n         *   - {open}/{sourceTransformation}/{close}\n         *\n         * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n         * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n         * - fl_splice is also added, but only if a transition is not needed.\n         *\n         * once we've calculated the open and close parts, we now need to deal with the Transition.\n         * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n         *\n         * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n         */\n        // Calculate the open part\n        const open = [\n            this._duration && `du_${this._duration}`,\n            !this._transition && `fl_splice`,\n            `${this.concatSource.getOpenSourceString('l')}`\n        ].filter((a) => a).join(',');\n        // Calculate the open part\n        const close = [\n            'fl_layer_apply',\n            this._prepend && 'so_0'\n        ].filter((a) => a).join(',');\n        // Calculate the Transition part\n        let concatSourceTx;\n        if (this.concatSource.getTransformation()) {\n            concatSourceTx = this.concatSource.getTransformation();\n        }\n        else {\n            concatSourceTx = new Transformation();\n        }\n        if (this._transition) {\n            concatSourceTx.addTransformation(this.getTransitionString());\n        }\n        // Put it all together, the transition is already part of the concatSourceTx\n        return [\n            open,\n            concatSourceTx.toString(),\n            close\n        ].filter((a) => a).join('/');\n    }\n}\nexport default ConcatenateAction;\n"]},"metadata":{},"sourceType":"module"}