{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nvar QUALIFIER_KEY = 'a';\n/**\n * @description Rotates or flips an image or video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#rotating_image | Rotating images}\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#rotating_videos | Rotating videos}\n * @extends SDK.Action\n * @memberOf Actions.Rotate\n * @see Visit {@link Actions.Rotate|Rotate} for an example\n */\n\nvar RotateAction = /*#__PURE__*/function (_Action) {\n  _inherits(RotateAction, _Action);\n\n  var _super = _createSuper(RotateAction);\n\n  function RotateAction(angle) {\n    var _this;\n\n    _classCallCheck(this, RotateAction);\n\n    _this = _super.call(this);\n\n    _this.addQualifier(new Qualifier(QUALIFIER_KEY, angle));\n\n    return _this;\n  }\n  /**\n   * @description Rotates an asset using a defined mode.\n   * @param {Qualifiers.RotationMode | string} rotationMode\n   * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\n   * possible values\n   * @return {this}\n   */\n\n\n  _createClass(RotateAction, [{\n    key: \"mode\",\n    value: function mode(rotationMode) {\n      return this.addValueToQualifier(QUALIFIER_KEY, rotationMode);\n    }\n    /**\n     * @description Rotates an asset by the specified degrees.\n     * @param {number} degrees rotation in degrees e.g 90, 45, 33\n     * @return {this}\n     */\n\n  }, {\n    key: \"angle\",\n    value: function angle(degrees) {\n      return this.addValueToQualifier(QUALIFIER_KEY, degrees);\n    }\n  }]);\n\n  return RotateAction;\n}(Action);\n\nexport default RotateAction;","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/rotate/RotateAction.js"],"names":["Action","Qualifier","QUALIFIER_KEY","RotateAction","angle","addQualifier","rotationMode","addValueToQualifier","degrees"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,IAAMC,aAAa,GAAG,GAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,Y;;;;;AACF,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf;;AACA,UAAKC,YAAL,CAAkB,IAAIJ,SAAJ,CAAcC,aAAd,EAA6BE,KAA7B,CAAlB;;AAFe;AAGlB;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;WACI,cAAKE,YAAL,EAAmB;AACf,aAAO,KAAKC,mBAAL,CAAyBL,aAAzB,EAAwCI,YAAxC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,eAAME,OAAN,EAAe;AACX,aAAO,KAAKD,mBAAL,CAAyBL,aAAzB,EAAwCM,OAAxC,CAAP;AACH;;;;EAtBsBR,M;;AAwB3B,eAAeG,YAAf","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nconst QUALIFIER_KEY = 'a';\n/**\n * @description Rotates or flips an image or video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#rotating_image | Rotating images}\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#rotating_videos | Rotating videos}\n * @extends SDK.Action\n * @memberOf Actions.Rotate\n * @see Visit {@link Actions.Rotate|Rotate} for an example\n */\nclass RotateAction extends Action {\n    constructor(angle) {\n        super();\n        this.addQualifier(new Qualifier(QUALIFIER_KEY, angle));\n    }\n    /**\n     * @description Rotates an asset using a defined mode.\n     * @param {Qualifiers.RotationMode | string} rotationMode\n     * For a list of supported rotation modes see {@link Qualifiers.RotationMode| types of rotation modes} for\n     * possible values\n     * @return {this}\n     */\n    mode(rotationMode) {\n        return this.addValueToQualifier(QUALIFIER_KEY, rotationMode);\n    }\n    /**\n     * @description Rotates an asset by the specified degrees.\n     * @param {number} degrees rotation in degrees e.g 90, 45, 33\n     * @return {this}\n     */\n    angle(degrees) {\n        return this.addValueToQualifier(QUALIFIER_KEY, degrees);\n    }\n}\nexport default RotateAction;\n"]},"metadata":{},"sourceType":"module"}