{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\Payrun.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MaterialTable from \"material-table\";\nimport { Text } from \"@chakra-ui/react\";\nimport clsx from \"clsx\";\nimport { useHistory } from \"react-router-dom\";\nimport { Button, Paper, Grid, Icon, Divider, TextField } from \"@material-ui/core\";\nimport { Box, Modal, ModalOverlay, ModalContent, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, useDisclosure } from \"@chakra-ui/react\";\nimport { Input, InputGroup, InputLeftAddon, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, Stack } from \"@chakra-ui/react\";\nimport { useRecoilState } from \"recoil\";\nimport { useEmployeesContext } from \"../context/employees_context\";\nimport { usePayslipsContext } from \"../context/payslips_context\";\nimport { useExpensesContext } from \"../context/expenses_context\";\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\nimport { payrunState, payrunIdState } from \"./data/atomdata\";\nimport { usePayrun } from \"./payrun/usePayrun\";\nimport { useCurrency } from \"./currency/useCurrency\";\nimport { useExpenses } from \"./expenses/useExpenses\";\nimport UpdateCurrency from \"./CurrencyTable\"; //const drawerWidth = 240;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\",\n  cellStyle: {\n    width: 280,\n    maxWidth: 280\n  }\n}];\nconst selectmonths = [{\n  mth: \"January\"\n}, {\n  mth: \"February\"\n}, {\n  mth: \"March\"\n}, {\n  mth: \"April\"\n}, {\n  mth: \"May\"\n}, {\n  mth: \"June\"\n}, {\n  mth: \"July\"\n}, {\n  mth: \"August\"\n}, {\n  mth: \"September\"\n}, {\n  mth: \"October\"\n}, {\n  mth: \"November\"\n}, {\n  mth: \"December\"\n}];\n\nconst Payrun = () => {\n  _s();\n\n  let history = useHistory();\n  let date = new Date();\n  let longMonth = date.toLocaleString(\"en-us\", {\n    month: \"long\"\n  });\n  const classes = useStyles();\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight); //const { payrun } = usePayrun();\n\n  const {\n    currency\n  } = useCurrency(); //const { expenses, setPayrunId } = useExpensesPayrun();\n\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\n  const {\n    loadEmployees,\n    employees\n  } = useEmployeesContext();\n  const {\n    loadUnpaidExpenses,\n    expenses,\n    unpaidexpenses,\n    updateExpense\n  } = useExpensesContext();\n  const {\n    unpaiddailyallows,\n    loadUnpaidDailyAllows,\n    updateDailyAllowance\n  } = useDailyAllowancesContext();\n  const {\n    addPayrun,\n    getPayrun,\n    payrun,\n    payrun_loading,\n    addPayslip,\n    resetPayslipsData,\n    singlebatch_payslip_loading,\n    setPayslipPeriod\n  } = usePayslipsContext();\n  const [input, setInput] = useRecoilState(payrunState);\n  const [payrunId, setPayrunId] = useRecoilState(payrunIdState);\n  const [alert, setAlert] = useState(false);\n  const [error, setError] = useState(false);\n  const [errornoselect, setErrornoselect] = useState(false);\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\n  useEffect(() => {\n    if (!payrun_loading) {\n      setLoadPaybatch(false);\n    }\n  }, [loadPaybatch]);\n\n  function formatDate(string) {\n    var options = {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\"\n    };\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\n  }\n\n  function formatPayrun() {\n    const yy = input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\n    const mm = input.fromdate.substring(5, 7);\n    const d = input.fromdate;\n  }\n\n  const payrunExists = data => {\n    return payrun.some(function (el) {\n      return el.payrun === data;\n    });\n  };\n\n  const handleChange = e => {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const handlePayrunSubmit = e => {\n    e.preventDefault();\n    setPayrunId(\"\");\n    var count = employees.reduce((acc, r) => {\n      if (r.tableData.checked) {\n        return acc + 1;\n      } else {\n        return acc;\n      }\n    }, 0); //console.log(\"count\", count);\n\n    if (count === 0) {\n      setErrornoselect(true);\n      setTimeout(() => {\n        setErrornoselect(false);\n      }, 3000);\n      return null;\n    }\n\n    const period = formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\n    const payrundata = input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\n    setInput({ ...input,\n      period: period,\n      payrun: payrundata\n    });\n    formatPayrun();\n    setPayslipPeriod(payrundata);\n    const isExist = payrunExists(payrundata);\n\n    if (isExist) {\n      //console.log(\"exist\");\n      setIsPayrunExist(true);\n      setAlert(true);\n    } else {\n      //console.log(\"add\");\n      add_Payrun(period, payrundata);\n      checkSelectedEmployees(period, payrundata);\n      setIsPayrunExist(false);\n      setAlert(true);\n      setLoadPaybatch(true);\n    }\n  };\n\n  const selectAllEmployees = () => {\n    employees && employees.forEach(emp => {\n      emp.tableData.checked = true;\n    });\n  };\n\n  const checkSelectedEmployees = (period, payrun) => {\n    //console.log(\"payrun\", payrun, period);\n    var exp = 0,\n        allows = 0,\n        tmpbasicsalary = 0,\n        tmptotalallows = 0,\n        tmptotalTAP = 0,\n        tmptotalSCP = 0,\n        tmpnettpay = 0;\n    resetPayslipsData();\n    employees && employees.forEach((emp, index) => {\n      if (emp.tableData.checked) {\n        exp = 0;\n\n        if (unpaidexpenses) {\n          unpaidexpenses.filter(r => r.empid === emp.id).map(i => {\n            updateExpense({\n              id: i.id,\n              payrun: payrun\n            });\n            return exp = exp + i.amount;\n          });\n        }\n\n        allows = 0;\n\n        if (unpaiddailyallows) {\n          unpaiddailyallows.filter(r => r.empid === emp.id).map(i => {\n            updateDailyAllowance({\n              id: i.id,\n              payrun: payrun\n            });\n            return allows = allows + i.amount;\n          });\n        }\n\n        const {\n          id,\n          name,\n          bank_name,\n          bank_acno,\n          basic_salary,\n          salary_currency,\n          tap_acno,\n          scp_acno,\n          tap_checkbox\n        } = emp;\n        tmpbasicsalary = basic_salary;\n\n        if (salary_currency === \"USD\") {\n          var table = currency.filter(r => r.currency === \"USD\").map(rec => {\n            return { ...rec\n            };\n          });\n          tmpbasicsalary = basic_salary * table[0].rate;\n          console.log(\"USD\", table, basic_salary, tmpbasicsalary);\n        }\n\n        tmptotalallows = allows + exp;\n        tmptotalTAP = tap_checkbox ? Math.ceil(tmpbasicsalary * 0.05) : 0;\n        tmptotalSCP = tap_checkbox ? Math.round((tmpbasicsalary + Number.EPSILON) * 0.035 * 100) / 100 : 0;\n\n        if (tmptotalSCP > 98) {\n          tmptotalSCP = 98;\n        }\n\n        tmpnettpay = tmpbasicsalary + tmptotalallows - tmptotalTAP - tmptotalSCP;\n        const data = {\n          name: name,\n          period: period,\n          pay_date: input.pay_date,\n          payrun: payrun,\n          wages: tmpbasicsalary,\n          nett_pay: tmpnettpay,\n          bank_name: bank_name,\n          bank_acno: bank_acno,\n          tap_acno: tap_acno,\n          tap_amount: tmptotalTAP,\n          scp_acno: scp_acno,\n          scp_amount: tmptotalSCP,\n          tap_checkbox: tap_checkbox,\n          total_allowances: tmptotalallows,\n          total_deductions: 0,\n          empid: id,\n          status: \"Pending\",\n          allows_type1: \"Site Allowances\",\n          allows_type1amt: allows,\n          allows_type2: \"Expenses Claims\",\n          allows_type2amt: exp,\n          allows_type3: \" \",\n          allows_type3amt: 0,\n          allows_type4: \" \",\n          allows_type4amt: 0,\n          allows_type5: \" \",\n          allows_type5amt: 0,\n          allows_type6: \" \",\n          allows_type6amt: 0,\n          allows_type7: \" \",\n          allows_type7amt: 0,\n          allows_type8: \" \",\n          allows_type8amt: 0,\n          deducts_type1: \" \",\n          deducts_type1amt: 0,\n          deducts_type2: \" \",\n          deducts_type2amt: 0,\n          deducts_type3: \" \",\n          deducts_type3amt: 0,\n          deducts_type4: \" \",\n          deducts_type4amt: 0,\n          deducts_type5: \" \",\n          deducts_type5amt: 0,\n          deducts_type6: \" \",\n          deducts_type6amt: 0,\n          deducts_type7: \" \",\n          deducts_type7amt: 0,\n          deducts_type8: \" \",\n          deducts_type8amt: 0\n        };\n        addPayslip({ ...data\n        });\n      }\n    });\n  };\n\n  const handleNext = () => {\n    history.push(\"/payrunbatch\");\n  };\n\n  const add_Payrun = (period, payrun) => {\n    //update payrun\n    addPayrun({\n      pay_freq: input.payfreq,\n      from_date: input.fromdate,\n      to_date: input.todate,\n      pay_date: input.paydate,\n      period: period,\n      payrun: payrun,\n      status: \"Pending\"\n    });\n    getPayrun();\n  };\n\n  useEffect(() => {\n    loadEmployees();\n    loadUnpaidExpenses();\n    loadUnpaidDailyAllows();\n    getPayrun();\n  }, []); // useEffect(() => {\n  //   loadUnpaidDailyAllows();\n  // }, []);\n  // useEffect(() => {\n  //   console.log(\"useEffect here\", input.payrun);\n  //   // getSingleBatchPayslip(input.payrun);\n  //   if (singlebatchpayslip) {\n  //     checkSelectedEmployees(input.period, input.payrun);\n  //     setLoadPaybatch(false);\n  //   }\n  // }, [loadPaybatch]);\n  //   useEffect(() => {\n  //     if (input.period && input.payrun) {\n  //       //add_Payrun();\n  //       setAlert(true);\n  //     }\n  //   }, [input]);\n\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: fixedHeightPaper,\n    style: {\n      backgroundColor: \"659dbd\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      className: classes.section,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        direction: \"row\",\n        container: true,\n        spacing: 1 // style={{ border: \"1px solid white\" }}\n        ,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          sm: 3,\n          style: {\n            border: \"1px solid black\"\n          },\n          direction: \"column\",\n          align: \"left\",\n          children: /*#__PURE__*/_jsxDEV(\"article\", {\n            className: classes.jobinfo,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Pay Run\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n              onSubmit: handlePayrunSubmit,\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 378,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Pay Frequency\",\n                  variant: \"filled\",\n                  required: true,\n                  defaultValue: \"Monthly\",\n                  style: {\n                    width: \"100%\"\n                  },\n                  name: \"payfreq\",\n                  value: input.payfreq,\n                  onChange: e => handleChange(e) // select\n\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 407,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"From Date\",\n                  variant: \"filled\",\n                  name: \"fromdate\",\n                  type: \"date\",\n                  value: input.fromdate,\n                  required: true,\n                  style: {\n                    width: \"100%\"\n                  },\n                  onChange: e => handleChange(e),\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 450,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"To Date\",\n                  variant: \"filled\",\n                  type: \"date\",\n                  name: \"todate\",\n                  value: input.todate,\n                  required: true,\n                  onChange: e => handleChange(e),\n                  style: {\n                    width: \"100%\"\n                  },\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 465,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(TextField, {\n                  label: \"Payment Date\",\n                  variant: \"filled\",\n                  type: \"date\",\n                  name: \"paydate\",\n                  value: input.paydate,\n                  required: true,\n                  style: {\n                    width: \"100%\"\n                  },\n                  onChange: e => handleChange(e),\n                  InputLabelProps: {\n                    shrink: true\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 481,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 480,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: /*#__PURE__*/_jsxDEV(Button, {\n                    variant: \"contained\",\n                    color: \"primary\",\n                    className: classes.button,\n                    onClick: onOpen,\n                    children: \"Currency Exchange Table\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 497,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: [/*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    variant: \"contained\",\n                    color: \"primary\",\n                    className: classes.button,\n                    children: [\"Submit \", /*#__PURE__*/_jsxDEV(Icon, {\n                      className: classes.rightIcon,\n                      children: \"send\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 513,\n                      columnNumber: 30\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 507,\n                    columnNumber: 21\n                  }, this), alert && !isPayrunExist && /*#__PURE__*/_jsxDEV(Button, {\n                    type: \"submit\",\n                    variant: \"contained\",\n                    color: \"primary\",\n                    className: classes.button,\n                    onClick: handleNext,\n                    children: [\"Next \", /*#__PURE__*/_jsxDEV(Icon, {\n                      className: classes.rightIcon,\n                      children: \"send\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 524,\n                      columnNumber: 30\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 517,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 495,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [alert && !isPayrunExist && !singlebatch_payslip_loading && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"New Payrun being added!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 531,\n                  columnNumber: 21\n                }, this), alert && isPayrunExist && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"This payrun already existed!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [error && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"This Payrun period already existed!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 538,\n                  columnNumber: 29\n                }, this), errornoselect && /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: \"You must select employees!\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 539,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {\n          orientation: \"vertical\",\n          flexItem: true,\n          style: {\n            background: \"white\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          sm: 3,\n          style: {\n            border: \"1px solid black\"\n          },\n          align: \"right\",\n          children: /*#__PURE__*/_jsxDEV(MaterialTable, {\n            columns: columns,\n            data: employees,\n            title: \"Payrun History\",\n            options: {\n              filtering: false,\n              search: false,\n              toolbar: false,\n              selection: true,\n              headerStyle: {\n                backgroundColor: \"#daad86\",\n                color: \"primary\"\n              },\n              showTitle: false\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: isOpen,\n        onClose: onClose,\n        children: [/*#__PURE__*/_jsxDEV(ModalOverlay, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 577,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ModalContent, {\n          children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n            children: \"Currency Table\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n            children: /*#__PURE__*/_jsxDEV(Box, {\n              children: /*#__PURE__*/_jsxDEV(UpdateCurrency, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 582,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"blue\",\n              mr: 3,\n              onClick: onClose,\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 598,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 597,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Payrun, \"TrhjCaM9JVbzWAzlvRwWkAsNBkc=\", false, function () {\n  return [useHistory, useStyles, useCurrency, useDisclosure, useEmployeesContext, useExpensesContext, useDailyAllowancesContext, usePayslipsContext, useRecoilState, useRecoilState];\n});\n\n_c = Payrun;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  button: {\n    margin: theme.spacing(1)\n  },\n  container: {\n    margin: 0,\n    padding: 0,\n    width: \"80vw\",\n    display: \"grid\",\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\n    gridAutoRows: \"10px\",\n    position: \"absolute\",\n    left: \"50%\",\n    transform: \"translateX(-50%)\",\n    justifyContent: \"center\",\n    backgroundColor: \"primary\"\n  },\n  fixedHeight: {\n    height: 800\n  },\n  paper: {\n    padding: theme.spacing(10),\n    // display: \"flex\",\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n    border: \"1px solid\",\n    width: \"100%\",\n    color: \"primary\",\n    bcakgroundColor: \"black\"\n  },\n  card: {\n    backgroundColor: \"black\"\n  },\n  section: {\n    width: \"95vw\",\n    margin: \"5rem auto\",\n    maxWidth: \"var(--max-width)\"\n  },\n  underline: {\n    width: \"5rem\",\n    height: \"0.25rem\",\n    marginBottom: \"1.25rem\",\n    background: \"var(--clr-primary-5)\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\"\n  },\n  title: {\n    marginbottom: \"4rem\",\n    textAlign: \"center\"\n  },\n  jobscenter: {\n    width: \"80vw\",\n    margin: \"0 auto\",\n    maxWidth: \"var(--max-width)\",\n    flexDirection: \"row\"\n  },\n  btncontainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    marginBottom: \"4rem\",\n    flexWrap: \"wrap\"\n  },\n  jobbtn: {\n    background: \"transparent\",\n    borderColor: \"transparent\",\n    textTransform: \"capitalize\",\n    fontSize: \"1.25rem\",\n    letterSpacing: \"var(--spacing)\",\n    margin: \"0 0.5rem\",\n    transition: \"var(--transition)\",\n    cursor: \"pointer\",\n    padding: \"0.25rem 0\",\n    lineHeight: \"1\",\n    outlineColor: \"var(--clr-primary-10)\",\n    \"&:hover\": {\n      color: \"var(--clr-primary-5)\",\n      boxShadow: \"0 2px var(--clr-primary-5)\"\n    }\n  },\n  activebtn: {\n    color: \"var(--clr-primary-5)\",\n    boxShadow: \"0 2px var(--clr-primary-5)\"\n  },\n  jobinfo: {\n    fontWeight: \"400\"\n  },\n  rightIcon: {\n    marginLeft: theme.spacing(1)\n  },\n  formLabel: {\n    fontSize: 12,\n    textAlign: \"left\",\n    marginLeft: 8,\n    marginTop: 5\n  }\n}));\nexport default Payrun;\n\nvar _c;\n\n$RefreshReg$(_c, \"Payrun\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/Payrun.js"],"names":["React","useState","useEffect","makeStyles","MaterialTable","Text","clsx","useHistory","Button","Paper","Grid","Icon","Divider","TextField","Box","Modal","ModalOverlay","ModalContent","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","useDisclosure","Input","InputGroup","InputLeftAddon","NumberInput","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","Stack","useRecoilState","useEmployeesContext","usePayslipsContext","useExpensesContext","useDailyAllowancesContext","payrunState","payrunIdState","usePayrun","useCurrency","useExpenses","UpdateCurrency","columns","title","field","editable","cellStyle","width","maxWidth","selectmonths","mth","Payrun","history","date","Date","longMonth","toLocaleString","month","classes","useStyles","fixedHeightPaper","paper","fixedHeight","currency","isOpen","onOpen","onClose","loadPaybatch","setLoadPaybatch","loadEmployees","employees","loadUnpaidExpenses","expenses","unpaidexpenses","updateExpense","unpaiddailyallows","loadUnpaidDailyAllows","updateDailyAllowance","addPayrun","getPayrun","payrun","payrun_loading","addPayslip","resetPayslipsData","singlebatch_payslip_loading","setPayslipPeriod","input","setInput","payrunId","setPayrunId","alert","setAlert","error","setError","errornoselect","setErrornoselect","isPayrunExist","setIsPayrunExist","formatDate","string","options","year","day","toLocaleDateString","formatPayrun","yy","fromdate","substring","mm","d","payrunExists","data","some","el","handleChange","e","target","name","value","handlePayrunSubmit","preventDefault","count","reduce","acc","r","tableData","checked","setTimeout","period","todate","payrundata","isExist","add_Payrun","checkSelectedEmployees","selectAllEmployees","forEach","emp","exp","allows","tmpbasicsalary","tmptotalallows","tmptotalTAP","tmptotalSCP","tmpnettpay","index","filter","empid","id","map","i","amount","bank_name","bank_acno","basic_salary","salary_currency","tap_acno","scp_acno","tap_checkbox","table","rec","rate","console","log","Math","ceil","round","Number","EPSILON","pay_date","wages","nett_pay","tap_amount","scp_amount","total_allowances","total_deductions","status","allows_type1","allows_type1amt","allows_type2","allows_type2amt","allows_type3","allows_type3amt","allows_type4","allows_type4amt","allows_type5","allows_type5amt","allows_type6","allows_type6amt","allows_type7","allows_type7amt","allows_type8","allows_type8amt","deducts_type1","deducts_type1amt","deducts_type2","deducts_type2amt","deducts_type3","deducts_type3amt","deducts_type4","deducts_type4amt","deducts_type5","deducts_type5amt","deducts_type6","deducts_type6amt","deducts_type7","deducts_type7amt","deducts_type8","deducts_type8amt","handleNext","push","pay_freq","payfreq","from_date","to_date","paydate","backgroundColor","section","border","jobinfo","shrink","button","rightIcon","background","filtering","search","toolbar","selection","headerStyle","color","showTitle","theme","root","flexGrow","margin","spacing","container","padding","display","gridTemplateColumns","gridAutoRows","position","left","transform","justifyContent","height","overflow","flexDirection","bcakgroundColor","card","underline","marginBottom","marginLeft","marginRight","marginbottom","textAlign","jobscenter","btncontainer","flexWrap","jobbtn","borderColor","textTransform","fontSize","letterSpacing","transition","cursor","lineHeight","outlineColor","boxShadow","activebtn","fontWeight","formLabel","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Text } from \"@chakra-ui/react\";\r\nimport clsx from \"clsx\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Paper,\r\n  Grid,\r\n  Icon,\r\n  Divider,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  Box,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Input,\r\n  InputGroup,\r\n  InputLeftAddon,\r\n  NumberInput,\r\n  NumberInputField,\r\n  NumberInputStepper,\r\n  NumberIncrementStepper,\r\n  NumberDecrementStepper,\r\n  Stack,\r\n} from \"@chakra-ui/react\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nimport { useEmployeesContext } from \"../context/employees_context\";\r\nimport { usePayslipsContext } from \"../context/payslips_context\";\r\nimport { useExpensesContext } from \"../context/expenses_context\";\r\nimport { useDailyAllowancesContext } from \"../context/dailyallowances_context\";\r\nimport { payrunState, payrunIdState } from \"./data/atomdata\";\r\nimport { usePayrun } from \"./payrun/usePayrun\";\r\nimport { useCurrency } from \"./currency/useCurrency\";\r\nimport { useExpenses } from \"./expenses/useExpenses\";\r\nimport UpdateCurrency from \"./CurrencyTable\";\r\n\r\n//const drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n    cellStyle: {\r\n      width: 280,\r\n      maxWidth: 280,\r\n    },\r\n  },\r\n];\r\n\r\nconst selectmonths = [\r\n  { mth: \"January\" },\r\n  { mth: \"February\" },\r\n  { mth: \"March\" },\r\n  { mth: \"April\" },\r\n  { mth: \"May\" },\r\n  { mth: \"June\" },\r\n  { mth: \"July\" },\r\n  { mth: \"August\" },\r\n  { mth: \"September\" },\r\n  { mth: \"October\" },\r\n  { mth: \"November\" },\r\n  { mth: \"December\" },\r\n];\r\n\r\nconst Payrun = () => {\r\n  let history = useHistory();\r\n  let date = new Date();\r\n  let longMonth = date.toLocaleString(\"en-us\", { month: \"long\" });\r\n\r\n  const classes = useStyles();\r\n  const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const { payrun } = usePayrun();\r\n  const { currency } = useCurrency();\r\n  //const { expenses, setPayrunId } = useExpensesPayrun();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [loadPaybatch, setLoadPaybatch] = useState(false);\r\n  const { loadEmployees, employees } = useEmployeesContext();\r\n  const { loadUnpaidExpenses, expenses, unpaidexpenses, updateExpense } =\r\n    useExpensesContext();\r\n  const { unpaiddailyallows, loadUnpaidDailyAllows, updateDailyAllowance } =\r\n    useDailyAllowancesContext();\r\n  const {\r\n    addPayrun,\r\n    getPayrun,\r\n    payrun,\r\n    payrun_loading,\r\n    addPayslip,\r\n    resetPayslipsData,\r\n    singlebatch_payslip_loading,\r\n    setPayslipPeriod,\r\n  } = usePayslipsContext();\r\n  const [input, setInput] = useRecoilState(payrunState);\r\n  const [payrunId, setPayrunId] = useRecoilState(payrunIdState);\r\n  const [alert, setAlert] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [errornoselect, setErrornoselect] = useState(false);\r\n  const [isPayrunExist, setIsPayrunExist] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!payrun_loading) {\r\n      setLoadPaybatch(false);\r\n    }\r\n  }, [loadPaybatch]);\r\n\r\n  function formatDate(string) {\r\n    var options = { year: \"numeric\", month: \"long\", day: \"numeric\" };\r\n    return new Date(string).toLocaleDateString(\"en-GB\", options);\r\n  }\r\n\r\n  function formatPayrun() {\r\n    const yy =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    const mm = input.fromdate.substring(5, 7);\r\n    const d = input.fromdate;\r\n  }\r\n\r\n  const payrunExists = (data) => {\r\n    return payrun.some(function (el) {\r\n      return el.payrun === data;\r\n    });\r\n  };\r\n  const handleChange = (e) => {\r\n    setInput({ ...input, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const handlePayrunSubmit = (e) => {\r\n    e.preventDefault();\r\n    setPayrunId(\"\");\r\n    var count = employees.reduce((acc, r) => {\r\n      if (r.tableData.checked) {\r\n        return acc + 1;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, 0);\r\n    //console.log(\"count\", count);\r\n    if (count === 0) {\r\n      setErrornoselect(true);\r\n      setTimeout(() => {\r\n        setErrornoselect(false);\r\n      }, 3000);\r\n      return null;\r\n    }\r\n\r\n    const period =\r\n      formatDate(input.fromdate) + \" - \" + formatDate(input.todate);\r\n    const payrundata =\r\n      input.fromdate.substring(0, 4) + \"-\" + input.fromdate.substring(5, 7);\r\n    setInput({ ...input, period: period, payrun: payrundata });\r\n    formatPayrun();\r\n    setPayslipPeriod(payrundata);\r\n    const isExist = payrunExists(payrundata);\r\n\r\n    if (isExist) {\r\n      //console.log(\"exist\");\r\n      setIsPayrunExist(true);\r\n      setAlert(true);\r\n    } else {\r\n      //console.log(\"add\");\r\n      add_Payrun(period, payrundata);\r\n      checkSelectedEmployees(period, payrundata);\r\n      setIsPayrunExist(false);\r\n      setAlert(true);\r\n      setLoadPaybatch(true);\r\n    }\r\n  };\r\n\r\n  const selectAllEmployees = () => {\r\n    employees &&\r\n      employees.forEach((emp) => {\r\n        emp.tableData.checked = true;\r\n      });\r\n  };\r\n\r\n  const checkSelectedEmployees = (period, payrun) => {\r\n    //console.log(\"payrun\", payrun, period);\r\n    var exp = 0,\r\n      allows = 0,\r\n      tmpbasicsalary = 0,\r\n      tmptotalallows = 0,\r\n      tmptotalTAP = 0,\r\n      tmptotalSCP = 0,\r\n      tmpnettpay = 0;\r\n\r\n    resetPayslipsData();\r\n    employees &&\r\n      employees.forEach((emp, index) => {\r\n        if (emp.tableData.checked) {\r\n          exp = 0;\r\n          if (unpaidexpenses) {\r\n            unpaidexpenses\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateExpense({ id: i.id, payrun: payrun });\r\n                return (exp = exp + i.amount);\r\n              });\r\n          }\r\n          allows = 0;\r\n          if (unpaiddailyallows) {\r\n            unpaiddailyallows\r\n              .filter((r) => r.empid === emp.id)\r\n              .map((i) => {\r\n                updateDailyAllowance({ id: i.id, payrun: payrun });\r\n                return (allows = allows + i.amount);\r\n              });\r\n          }\r\n\r\n          const {\r\n            id,\r\n            name,\r\n            bank_name,\r\n            bank_acno,\r\n            basic_salary,\r\n            salary_currency,\r\n            tap_acno,\r\n            scp_acno,\r\n            tap_checkbox,\r\n          } = emp;\r\n\r\n          tmpbasicsalary = basic_salary;\r\n\r\n          if (salary_currency === \"USD\") {\r\n            var table = currency\r\n              .filter((r) => r.currency === \"USD\")\r\n              .map((rec) => {\r\n                return { ...rec };\r\n              });\r\n            tmpbasicsalary = basic_salary * table[0].rate;\r\n            console.log(\"USD\", table, basic_salary, tmpbasicsalary);\r\n          }\r\n\r\n          tmptotalallows = allows + exp;\r\n          tmptotalTAP = tap_checkbox ? Math.ceil(tmpbasicsalary * 0.05) : 0;\r\n          tmptotalSCP = tap_checkbox\r\n            ? Math.round((tmpbasicsalary + Number.EPSILON) * 0.035 * 100) / 100\r\n            : 0;\r\n          if (tmptotalSCP > 98) {\r\n            tmptotalSCP = 98;\r\n          }\r\n          tmpnettpay =\r\n            tmpbasicsalary + tmptotalallows - tmptotalTAP - tmptotalSCP;\r\n          const data = {\r\n            name: name,\r\n            period: period,\r\n            pay_date: input.pay_date,\r\n            payrun: payrun,\r\n            wages: tmpbasicsalary,\r\n            nett_pay: tmpnettpay,\r\n            bank_name: bank_name,\r\n            bank_acno: bank_acno,\r\n            tap_acno: tap_acno,\r\n            tap_amount: tmptotalTAP,\r\n            scp_acno: scp_acno,\r\n            scp_amount: tmptotalSCP,\r\n            tap_checkbox: tap_checkbox,\r\n            total_allowances: tmptotalallows,\r\n            total_deductions: 0,\r\n            empid: id,\r\n            status: \"Pending\",\r\n            allows_type1: \"Site Allowances\",\r\n            allows_type1amt: allows,\r\n            allows_type2: \"Expenses Claims\",\r\n            allows_type2amt: exp,\r\n            allows_type3: \" \",\r\n            allows_type3amt: 0,\r\n            allows_type4: \" \",\r\n            allows_type4amt: 0,\r\n            allows_type5: \" \",\r\n            allows_type5amt: 0,\r\n            allows_type6: \" \",\r\n            allows_type6amt: 0,\r\n            allows_type7: \" \",\r\n            allows_type7amt: 0,\r\n            allows_type8: \" \",\r\n            allows_type8amt: 0,\r\n            deducts_type1: \" \",\r\n            deducts_type1amt: 0,\r\n            deducts_type2: \" \",\r\n            deducts_type2amt: 0,\r\n            deducts_type3: \" \",\r\n            deducts_type3amt: 0,\r\n            deducts_type4: \" \",\r\n            deducts_type4amt: 0,\r\n            deducts_type5: \" \",\r\n            deducts_type5amt: 0,\r\n            deducts_type6: \" \",\r\n            deducts_type6amt: 0,\r\n            deducts_type7: \" \",\r\n            deducts_type7amt: 0,\r\n            deducts_type8: \" \",\r\n            deducts_type8amt: 0,\r\n          };\r\n          addPayslip({ ...data });\r\n        }\r\n      });\r\n  };\r\n\r\n  const handleNext = () => {\r\n    history.push(\"/payrunbatch\");\r\n  };\r\n\r\n  const add_Payrun = (period, payrun) => {\r\n    //update payrun\r\n    addPayrun({\r\n      pay_freq: input.payfreq,\r\n      from_date: input.fromdate,\r\n      to_date: input.todate,\r\n      pay_date: input.paydate,\r\n      period: period,\r\n      payrun: payrun,\r\n      status: \"Pending\",\r\n    });\r\n    getPayrun();\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadEmployees();\r\n    loadUnpaidExpenses();\r\n    loadUnpaidDailyAllows();\r\n    getPayrun();\r\n  }, []);\r\n\r\n  // useEffect(() => {\r\n  //   loadUnpaidDailyAllows();\r\n  // }, []);\r\n\r\n  // useEffect(() => {\r\n  //   console.log(\"useEffect here\", input.payrun);\r\n\r\n  //   // getSingleBatchPayslip(input.payrun);\r\n  //   if (singlebatchpayslip) {\r\n  //     checkSelectedEmployees(input.period, input.payrun);\r\n  //     setLoadPaybatch(false);\r\n  //   }\r\n  // }, [loadPaybatch]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (input.period && input.payrun) {\r\n  //       //add_Payrun();\r\n\r\n  //       setAlert(true);\r\n  //     }\r\n  //   }, [input]);\r\n\r\n  return (\r\n    <Paper className={fixedHeightPaper} style={{ backgroundColor: \"659dbd\" }}>\r\n      <section className={classes.section}>\r\n        <Grid\r\n          direction=\"row\"\r\n          container\r\n          spacing={1}\r\n          // style={{ border: \"1px solid white\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            direction=\"column\"\r\n            align=\"left\"\r\n          >\r\n            <article className={classes.jobinfo}>\r\n              <h2>Pay Run</h2>\r\n              <form onSubmit={handlePayrunSubmit}>\r\n                <div>\r\n                  {/* <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Copy From\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"copyfrom\"\r\n                    value={\"New\"}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    <option value=\"\">New</option>\r\n                    {payrun.map((row) => {\r\n                      return (\r\n                        <option key={row.id} value={row.payrun}>\r\n                          {row.payrun}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect> */}\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Pay Frequency\"\r\n                    variant=\"filled\"\r\n                    required\r\n                    defaultValue=\"Monthly\"\r\n                    style={{ width: \"100%\" }}\r\n                    name=\"payfreq\"\r\n                    value={input.payfreq}\r\n                    onChange={(e) => handleChange(e)}\r\n                    // select\r\n                  >\r\n                    {/* <MenuItem value=\"Weekly\">Weekly</MenuItem> */}\r\n                    {/* <MenuItem value=\"Monthly\">Monthly</MenuItem> */}\r\n                  </TextField>\r\n                </div>\r\n                {/* <div>\r\n                  <InputLabel\r\n                    htmlFor=\"deduct-customized-native-simple\"\r\n                    className={classes.formLabel}\r\n                  >\r\n                    Month\r\n                  </InputLabel>\r\n                  <NativeSelect\r\n                    name=\"selectmonth\"\r\n                    defaultValue={longMonth}\r\n                    // value={input.selectmonth}\r\n                    style={{\r\n                      padding: 4,\r\n                      marginLeft: 5,\r\n                      width: \"100%\",\r\n                      textAlign: \"left\",\r\n                    }}\r\n                    onChange={(e) => handleChange(e)}\r\n                  >\r\n                    {selectmonths.map((row, i) => {\r\n                      return (\r\n                        <option key={i} value={row.mth}>\r\n                          {row.mth}\r\n                        </option>\r\n                      );\r\n                    })}\r\n                  </NativeSelect>\r\n                </div> */}\r\n                <div>\r\n                  <TextField\r\n                    label=\"From Date\"\r\n                    variant=\"filled\"\r\n                    name=\"fromdate\"\r\n                    type=\"date\"\r\n                    value={input.fromdate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"To Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"todate\"\r\n                    value={input.todate}\r\n                    required\r\n                    onChange={(e) => handleChange(e)}\r\n                    style={{ width: \"100%\" }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <TextField\r\n                    label=\"Payment Date\"\r\n                    variant=\"filled\"\r\n                    type=\"date\"\r\n                    name=\"paydate\"\r\n                    value={input.paydate}\r\n                    required\r\n                    style={{ width: \"100%\" }}\r\n                    onChange={(e) => handleChange(e)}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div>\r\n                  <div>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                      onClick={onOpen}\r\n                    >\r\n                      Currency Exchange Table\r\n                    </Button>\r\n                  </div>\r\n                  <div>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      className={classes.button}\r\n                    >\r\n                      Submit <Icon className={classes.rightIcon}>send</Icon>\r\n                    </Button>\r\n\r\n                    {alert && !isPayrunExist && (\r\n                      <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.button}\r\n                        onClick={handleNext}\r\n                      >\r\n                        Next <Icon className={classes.rightIcon}>send</Icon>\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n                <div>\r\n                  {alert && !isPayrunExist && !singlebatch_payslip_loading && (\r\n                    <h3>New Payrun being added!</h3>\r\n                  )}\r\n                  {alert && isPayrunExist && (\r\n                    <h3>This payrun already existed!</h3>\r\n                  )}\r\n                </div>\r\n                <div>\r\n                  {error && <h3>This Payrun period already existed!</h3>}\r\n                  {errornoselect && <h3>You must select employees!</h3>}\r\n                </div>\r\n              </form>\r\n            </article>\r\n          </Grid>\r\n          <Divider\r\n            orientation=\"vertical\"\r\n            flexItem\r\n            style={{ background: \"white\" }}\r\n          />\r\n          <Grid\r\n            container\r\n            item\r\n            sm={3}\r\n            style={{ border: \"1px solid black\" }}\r\n            align=\"right\"\r\n          >\r\n            <MaterialTable\r\n              columns={columns}\r\n              data={employees}\r\n              title=\"Payrun History\"\r\n              options={{\r\n                filtering: false,\r\n                search: false,\r\n                toolbar: false,\r\n                selection: true,\r\n                headerStyle: {\r\n                  backgroundColor: \"#daad86\",\r\n                  color: \"primary\",\r\n                },\r\n                showTitle: false,\r\n               \r\n              }}\r\n              \r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Modal isOpen={isOpen} onClose={onClose}>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader>Currency Table</ModalHeader>\r\n            <ModalCloseButton />\r\n            <ModalBody>\r\n              <Box>\r\n                <UpdateCurrency />\r\n                {/* <Stack spacing={4}>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"USD\" />\r\n                    <Input type=\"text\" placeholder=\"USD Rate\" />\r\n                  </InputGroup>\r\n                  <InputGroup>\r\n                    <InputLeftAddon children=\"MYR\" />\r\n                    <Input type=\"text\" placeholder=\"MYR Rate\" />\r\n                  </InputGroup>\r\n                </Stack> */}\r\n              </Box>\r\n            </ModalBody>\r\n\r\n            <ModalFooter>\r\n              <Button colorScheme=\"blue\" mr={3} onClick={onClose}>\r\n                Close\r\n              </Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n      </section>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  button: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  container: {\r\n    margin: 0,\r\n    padding: 0,\r\n    width: \"80vw\",\r\n    display: \"grid\",\r\n    gridTemplateColumns: \"repeat(auto-fill,250px)\",\r\n    gridAutoRows: \"10px\",\r\n    position: \"absolute\",\r\n    left: \"50%\",\r\n    transform: \"translateX(-50%)\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"primary\",\r\n  },\r\n  fixedHeight: {\r\n    height: 800,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(10),\r\n    // display: \"flex\",\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\",\r\n    border: \"1px solid\",\r\n    width: \"100%\",\r\n    color: \"primary\",\r\n    bcakgroundColor: \"black\",\r\n  },\r\n  card: {\r\n    backgroundColor: \"black\",\r\n  },\r\n  section: {\r\n    width: \"95vw\",\r\n    margin: \"5rem auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n  },\r\n  underline: {\r\n    width: \"5rem\",\r\n    height: \"0.25rem\",\r\n    marginBottom: \"1.25rem\",\r\n    background: \"var(--clr-primary-5)\",\r\n    marginLeft: \"auto\",\r\n    marginRight: \"auto\",\r\n  },\r\n  title: {\r\n    marginbottom: \"4rem\",\r\n    textAlign: \"center\",\r\n  },\r\n  jobscenter: {\r\n    width: \"80vw\",\r\n    margin: \"0 auto\",\r\n    maxWidth: \"var(--max-width)\",\r\n    flexDirection: \"row\",\r\n  },\r\n  btncontainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"center\",\r\n    marginBottom: \"4rem\",\r\n    flexWrap: \"wrap\",\r\n  },\r\n  jobbtn: {\r\n    background: \"transparent\",\r\n    borderColor: \"transparent\",\r\n    textTransform: \"capitalize\",\r\n    fontSize: \"1.25rem\",\r\n    letterSpacing: \"var(--spacing)\",\r\n    margin: \"0 0.5rem\",\r\n    transition: \"var(--transition)\",\r\n    cursor: \"pointer\",\r\n    padding: \"0.25rem 0\",\r\n    lineHeight: \"1\",\r\n    outlineColor: \"var(--clr-primary-10)\",\r\n    \"&:hover\": {\r\n      color: \"var(--clr-primary-5)\",\r\n      boxShadow: \"0 2px var(--clr-primary-5)\",\r\n    },\r\n  },\r\n  activebtn: {\r\n    color: \"var(--clr-primary-5)\",\r\n    boxShadow: \"0 2px var(--clr-primary-5)\",\r\n  },\r\n  jobinfo: {\r\n    fontWeight: \"400\",\r\n  },\r\n  rightIcon: {\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n  formLabel: {\r\n    fontSize: 12,\r\n    textAlign: \"left\",\r\n    marginLeft: 8,\r\n    marginTop: 5,\r\n  },\r\n}));\r\n\r\nexport default Payrun;\r\n"]},"metadata":{},"sourceType":"module"}