{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../internal/utils/prepareColor\";\n/**\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @extends SDK.Action\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass ShadowEffectAction extends Action {\n  constructor(effectType, strength) {\n    super();\n    this.effectType = effectType;\n    this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\n  }\n  /**\n   * @description The strength of the shadow. (Range: 0 to 100, Server default: 40)\n   * @param {number} strength\n   * @return {this}\n   */\n\n\n  strength(strength) {\n    return this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\n  }\n  /**\n   * @description The X offset the shadow\n   * @param {number | SDK.ExpressionQualifier} x\n   * @return {this}\n   */\n\n\n  offsetX(x) {\n    return this.addQualifier(new Qualifier('x', new QualifierValue(x)));\n  }\n  /**\n   * @description The Y offset the shadow\n   * @param {number | SDK.ExpressionQualifier} y\n   * @return {this}\n   */\n\n\n  offsetY(y) {\n    return this.addQualifier(new Qualifier('y', new QualifierValue(y)));\n  }\n  /**\n   * @description The color of the shadow (Server default: gray)\n   * @param color\n   * @return {this}\n   */\n\n\n  color(color) {\n    return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n  }\n\n}\n\nexport { ShadowEffectAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/effect/shadow.js"],"names":["Action","QualifierValue","Qualifier","prepareColor","ShadowEffectAction","constructor","effectType","strength","addQualifier","offsetX","x","offsetY","y","color"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,YAAT,QAA6B,mCAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAN,SAAiCJ,MAAjC,CAAwC;AACpCK,EAAAA,WAAW,CAACC,UAAD,EAAaC,QAAb,EAAuB;AAC9B;AACA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKE,YAAL,CAAkB,IAAIN,SAAJ,CAAc,GAAd,EAAmB,IAAID,cAAJ,CAAmB,CAAC,QAAD,EAAWM,QAAX,CAAnB,CAAnB,CAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIA,EAAAA,QAAQ,CAACA,QAAD,EAAW;AACf,WAAO,KAAKC,YAAL,CAAkB,IAAIN,SAAJ,CAAc,GAAd,EAAmB,IAAID,cAAJ,CAAmB,CAAC,QAAD,EAAWM,QAAX,CAAnB,CAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,OAAO,CAACC,CAAD,EAAI;AACP,WAAO,KAAKF,YAAL,CAAkB,IAAIN,SAAJ,CAAc,GAAd,EAAmB,IAAID,cAAJ,CAAmBS,CAAnB,CAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACC,CAAD,EAAI;AACP,WAAO,KAAKJ,YAAL,CAAkB,IAAIN,SAAJ,CAAc,GAAd,EAAmB,IAAID,cAAJ,CAAmBW,CAAnB,CAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACT,WAAO,KAAKL,YAAL,CAAkB,IAAIN,SAAJ,CAAc,IAAd,EAAoB,IAAID,cAAJ,CAAmBE,YAAY,CAACU,KAAD,CAA/B,CAApB,CAAlB,CAAP;AACH;;AArCmC;;AAuCxC,SAAST,kBAAT","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../internal/utils/prepareColor\";\n/**\n * @description Applies a shadow filter to the asset.\n * @memberOf Actions.Effect\n * @extends SDK.Action\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ShadowEffectAction extends Action {\n    constructor(effectType, strength) {\n        super();\n        this.effectType = effectType;\n        this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\n    }\n    /**\n     * @description The strength of the shadow. (Range: 0 to 100, Server default: 40)\n     * @param {number} strength\n     * @return {this}\n     */\n    strength(strength) {\n        return this.addQualifier(new Qualifier('e', new QualifierValue(['shadow', strength])));\n    }\n    /**\n     * @description The X offset the shadow\n     * @param {number | SDK.ExpressionQualifier} x\n     * @return {this}\n     */\n    offsetX(x) {\n        return this.addQualifier(new Qualifier('x', new QualifierValue(x)));\n    }\n    /**\n     * @description The Y offset the shadow\n     * @param {number | SDK.ExpressionQualifier} y\n     * @return {this}\n     */\n    offsetY(y) {\n        return this.addQualifier(new Qualifier('y', new QualifierValue(y)));\n    }\n    /**\n     * @description The color of the shadow (Server default: gray)\n     * @param color\n     * @return {this}\n     */\n    color(color) {\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n}\nexport { ShadowEffectAction };\n"]},"metadata":{},"sourceType":"module"}