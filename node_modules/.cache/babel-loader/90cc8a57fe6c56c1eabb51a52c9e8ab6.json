{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Class for shortening a video to the specified range.\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\n\nclass TrimAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   *\n   * @description Support Percentages in values (30% -> 30p)\n   * @param {string|number} val\n   * @private\n   * @return {string}\n   */\n\n\n  parseVal(val) {\n    return typeof val === 'number' ? val : val.replace('%', 'p');\n  }\n  /**\n   * @description Sets the starting position of the part of the video to keep when trimming videos.\n   *\n   * @param {string|number} offset The starting position of the part of the video to keep. This can be specified as a\n   *                           float representing the time in seconds or a string representing the percentage of the\n   *                           video length (for example, \"30%\" or \"30p\").\n   * @return {this}\n   */\n\n\n  startOffset(offset) {\n    return this.addQualifier(new Qualifier('so', this.parseVal(offset)));\n  }\n  /**\n   * @description Sets the end position of the part of the video to keep when trimming videos.\n   *\n   * @param {string|number} offset The end position of the part of the video to keep. This can be specified as a\n   *                         float representing the time in seconds or a string representing the percentage of the\n   *                         video length (for example, \"30%\" or \"30p\").\n   * @return {this}\n   */\n\n\n  endOffset(offset) {\n    return this.addQualifier(new Qualifier('eo', this.parseVal(offset)));\n  }\n  /**\n   * @description Sets the duration of the video to keep.\n   *\n   * @param {string|number} duration The length of the part of the video to keep. This can be specified as a float\n   *                        representing the time in seconds or a string representing the percentage of the\n   *                        video length (for example, \"30%\" or \"30p\").\n   * @return {this}\n   */\n\n\n  duration(duration) {\n    return this.addQualifier(new Qualifier('du', this.parseVal(duration)));\n  }\n\n}\n\nexport default TrimAction;","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/actions/videoEdit/TrimAction.js"],"names":["Action","Qualifier","TrimAction","constructor","parseVal","val","replace","startOffset","offset","addQualifier","endOffset","duration"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,SAAyBF,MAAzB,CAAgC;AAC5BG,EAAAA,WAAW,GAAG;AACV;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,QAAQ,CAACC,GAAD,EAAM;AACV,WAAO,OAAOA,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCA,GAAG,CAACC,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAvC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,WAAO,KAAKC,YAAL,CAAkB,IAAIR,SAAJ,CAAc,IAAd,EAAoB,KAAKG,QAAL,CAAcI,MAAd,CAApB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,SAAS,CAACF,MAAD,EAAS;AACd,WAAO,KAAKC,YAAL,CAAkB,IAAIR,SAAJ,CAAc,IAAd,EAAoB,KAAKG,QAAL,CAAcI,MAAd,CAApB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,QAAQ,CAACA,QAAD,EAAW;AACf,WAAO,KAAKF,YAAL,CAAkB,IAAIR,SAAJ,CAAc,IAAd,EAAoB,KAAKG,QAAL,CAAcO,QAAd,CAApB,CAAlB,CAAP;AACH;;AA9C2B;;AAgDhC,eAAeT,UAAf","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Class for shortening a video to the specified range.\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass TrimAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     *\n     * @description Support Percentages in values (30% -> 30p)\n     * @param {string|number} val\n     * @private\n     * @return {string}\n     */\n    parseVal(val) {\n        return typeof val === 'number' ? val : val.replace('%', 'p');\n    }\n    /**\n     * @description Sets the starting position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The starting position of the part of the video to keep. This can be specified as a\n     *                           float representing the time in seconds or a string representing the percentage of the\n     *                           video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    startOffset(offset) {\n        return this.addQualifier(new Qualifier('so', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the end position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The end position of the part of the video to keep. This can be specified as a\n     *                         float representing the time in seconds or a string representing the percentage of the\n     *                         video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    endOffset(offset) {\n        return this.addQualifier(new Qualifier('eo', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the duration of the video to keep.\n     *\n     * @param {string|number} duration The length of the part of the video to keep. This can be specified as a float\n     *                        representing the time in seconds or a string representing the percentage of the\n     *                        video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    duration(duration) {\n        return this.addQualifier(new Qualifier('du', this.parseVal(duration)));\n    }\n}\nexport default TrimAction;\n"]},"metadata":{},"sourceType":"module"}