{"ast":null,"code":"import { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../../internal/Action\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass Pixelate extends Action {\n  constructor(squareSize) {\n    super();\n    this._squareSize = squareSize;\n  }\n  /**\n   * @description Specifies the region to piexlate.\n   * @param {NamedRegion} pixelateRegion\n   */\n\n\n  region(pixelateRegion) {\n    this._region = pixelateRegion;\n    return this;\n  }\n  /**\n   * @description Sets the squareSize of the pixelate effect.\n   * @param {number | string} squareSize\n   */\n\n\n  squareSize(squareSize) {\n    this._squareSize = squareSize;\n    return this;\n  }\n\n  prepareQualifiers() {\n    /*\n     * pixelate with region is a unique object in this codebase.\n     * On top of pixelate being an Action with Qualifiers,\n     * it also accepts a Qualifier called Region.\n     *\n     * This Qualifier is in itself composite of qualifiers (such as height, or width).\n     * The existence of Region changes the output of pixelate in non traditional ways\n     * which forced this relatively ad-hoc implementation.\n     *\n     * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n     * This happens naturally in the Action class,\n     * however since we're dealing with two levels of qualifiers (pixelate and Region),\n     * these need to be merged.\n     *\n     * This function will merge the Region qualifiers with pixelate\n     * and add all needed implicit qualifiers (like g_ocr_text).\n     * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n     */\n    const str = this._squareSize ? `:${this._squareSize}` : '';\n\n    if ('_region' in this) {\n      const qualifiers = this._region.qualifiers; // Copy qualifiers from the region \"action\" to the pixelate action\n\n      qualifiers.forEach(q => this.addQualifier(q));\n\n      if (this._region.regionType === 'named') {\n        this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n      }\n\n      if (this._region.regionType === 'ocr_text') {\n        this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n        this.addQualifier(new Qualifier('g', `ocr_text`));\n      }\n\n      if (this._region.regionType === 'faces') {\n        this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n      }\n    } else {\n      this.addQualifier(new Qualifier('e', `pixelate${str}`));\n    }\n  }\n\n}\n\nexport { Pixelate };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/actions/effect/pixelate/pixelate.js"],"names":["Qualifier","Action","Pixelate","constructor","squareSize","_squareSize","region","pixelateRegion","_region","prepareQualifiers","str","qualifiers","forEach","q","addQualifier","regionType"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uCAA1B;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAN,SAAuBD,MAAvB,CAA8B;AAC1BE,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB;AACA,SAAKC,WAAL,GAAmBD,UAAnB;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,MAAM,CAACC,cAAD,EAAiB;AACnB,SAAKC,OAAL,GAAeD,cAAf;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIH,EAAAA,UAAU,CAACA,UAAD,EAAa;AACnB,SAAKC,WAAL,GAAmBD,UAAnB;AACA,WAAO,IAAP;AACH;;AACDK,EAAAA,iBAAiB,GAAG;AAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,UAAMC,GAAG,GAAG,KAAKL,WAAL,GAAoB,IAAG,KAAKA,WAAY,EAAxC,GAA4C,EAAxD;;AACA,QAAI,aAAa,IAAjB,EAAuB;AACnB,YAAMM,UAAU,GAAG,KAAKH,OAAL,CAAaG,UAAhC,CADmB,CAEnB;;AACAA,MAAAA,UAAU,CAACC,OAAX,CAAoBC,CAAD,IAAO,KAAKC,YAAL,CAAkBD,CAAlB,CAA1B;;AACA,UAAI,KAAKL,OAAL,CAAaO,UAAb,KAA4B,OAAhC,EAAyC;AACrC,aAAKD,YAAL,CAAkB,IAAId,SAAJ,CAAc,GAAd,EAAoB,kBAAiBU,GAAI,EAAzC,CAAlB;AACH;;AACD,UAAI,KAAKF,OAAL,CAAaO,UAAb,KAA4B,UAAhC,EAA4C;AACxC,aAAKD,YAAL,CAAkB,IAAId,SAAJ,CAAc,GAAd,EAAoB,kBAAiBU,GAAI,EAAzC,CAAlB;AACA,aAAKI,YAAL,CAAkB,IAAId,SAAJ,CAAc,GAAd,EAAoB,UAApB,CAAlB;AACH;;AACD,UAAI,KAAKQ,OAAL,CAAaO,UAAb,KAA4B,OAAhC,EAAyC;AACrC,aAAKD,YAAL,CAAkB,IAAId,SAAJ,CAAc,GAAd,EAAoB,iBAAgBU,GAAI,EAAxC,CAAlB;AACH;AACJ,KAdD,MAeK;AACD,WAAKI,YAAL,CAAkB,IAAId,SAAJ,CAAc,GAAd,EAAoB,WAAUU,GAAI,EAAlC,CAAlB;AACH;AACJ;;AA3DyB;;AA6D9B,SAASR,QAAT","sourcesContent":["import { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../../internal/Action\";\n/**\n * @description The Action class of the pixelate Builder\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass Pixelate extends Action {\n    constructor(squareSize) {\n        super();\n        this._squareSize = squareSize;\n    }\n    /**\n     * @description Specifies the region to piexlate.\n     * @param {NamedRegion} pixelateRegion\n     */\n    region(pixelateRegion) {\n        this._region = pixelateRegion;\n        return this;\n    }\n    /**\n     * @description Sets the squareSize of the pixelate effect.\n     * @param {number | string} squareSize\n     */\n    squareSize(squareSize) {\n        this._squareSize = squareSize;\n        return this;\n    }\n    prepareQualifiers() {\n        /*\n         * pixelate with region is a unique object in this codebase.\n         * On top of pixelate being an Action with Qualifiers,\n         * it also accepts a Qualifier called Region.\n         *\n         * This Qualifier is in itself composite of qualifiers (such as height, or width).\n         * The existence of Region changes the output of pixelate in non traditional ways\n         * which forced this relatively ad-hoc implementation.\n         *\n         * Aside from all of that, all of the Qualifiers in the component should be alphabetized\n         * This happens naturally in the Action class,\n         * however since we're dealing with two levels of qualifiers (pixelate and Region),\n         * these need to be merged.\n         *\n         * This function will merge the Region qualifiers with pixelate\n         * and add all needed implicit qualifiers (like g_ocr_text).\n         * We're not using the full Gravity Qualifier here to prevent the code import for such a simplistic case\n         */\n        const str = this._squareSize ? `:${this._squareSize}` : '';\n        if ('_region' in this) {\n            const qualifiers = this._region.qualifiers;\n            // Copy qualifiers from the region \"action\" to the pixelate action\n            qualifiers.forEach((q) => this.addQualifier(q));\n            if (this._region.regionType === 'named') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n            }\n            if (this._region.regionType === 'ocr_text') {\n                this.addQualifier(new Qualifier('e', `pixelate_region${str}`));\n                this.addQualifier(new Qualifier('g', `ocr_text`));\n            }\n            if (this._region.regionType === 'faces') {\n                this.addQualifier(new Qualifier('e', `pixelate_faces${str}`));\n            }\n        }\n        else {\n            this.addQualifier(new Qualifier('e', `pixelate${str}`));\n        }\n    }\n}\nexport { Pixelate };\n"]},"metadata":{},"sourceType":"module"}