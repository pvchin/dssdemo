{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { tiled } from \"../flag\";\nimport { noOverflow } from \"../flag\";\n/**\n * @description\n * Defines the position of a layer: overlay or underlay.</br>\n * Even though Position is technically an action qualifier, it implements exactly the same functionality as an action.</br>\n * This is true because Position is compounded of multiple qualifiers</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_and_text_overlays|Applying overlays to images} | {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#adding_image_overlays|Applying overlays to videos}\n *\n * @extends {SDK.Actions}\n */\n\nclass PositionQualifier extends Action {\n  constructor() {\n    super();\n  }\n\n  gravity(gravityQualifier) {\n    this.addQualifier(gravityQualifier);\n    return this;\n  }\n  /**\n   * @description Tiles the overlay across your image.\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays | Tiling overlay}\n   */\n\n\n  tiled() {\n    this.addFlag(tiled());\n    return this;\n  }\n  /**\n   * TODO - This should accept a boolean value\n   * @description Prevents an image or text overlay from extending a delivered image canvas beyond the dimensions of the base image\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow | Overflow in overlays}\n   */\n\n\n  allowOverflow(bool = true) {\n    if (bool === false) {\n      this.addFlag(noOverflow());\n    }\n\n    return this;\n  }\n  /**\n   * @description Set the X Offset\n   * @param {number | string} offsetX\n   * @return {this}\n   */\n\n\n  offsetX(offsetX) {\n    this.addQualifier(new Qualifier('x', offsetX));\n    return this;\n  }\n  /**\n   * @description Set the Y Offset\n   * @param {number | string} offsetY\n   * @return {this}\n   */\n\n\n  offsetY(offsetY) {\n    this.addQualifier(new Qualifier('y', offsetY));\n    return this;\n  }\n\n}\n\nexport { PositionQualifier };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/qualifiers/position/PositionQualifier.js"],"names":["Action","Qualifier","tiled","noOverflow","PositionQualifier","constructor","gravity","gravityQualifier","addQualifier","addFlag","allowOverflow","bool","offsetX","offsetY"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,SAASC,UAAT,QAA2B,SAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAN,SAAgCJ,MAAhC,CAAuC;AACnCK,EAAAA,WAAW,GAAG;AACV;AACH;;AACDC,EAAAA,OAAO,CAACC,gBAAD,EAAmB;AACtB,SAAKC,YAAL,CAAkBD,gBAAlB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIL,EAAAA,KAAK,GAAG;AACJ,SAAKO,OAAL,CAAaP,KAAK,EAAlB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIQ,EAAAA,aAAa,CAACC,IAAI,GAAG,IAAR,EAAc;AACvB,QAAIA,IAAI,KAAK,KAAb,EAAoB;AAChB,WAAKF,OAAL,CAAaN,UAAU,EAAvB;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIS,EAAAA,OAAO,CAACA,OAAD,EAAU;AACb,SAAKJ,YAAL,CAAkB,IAAIP,SAAJ,CAAc,GAAd,EAAmBW,OAAnB,CAAlB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,CAACA,OAAD,EAAU;AACb,SAAKL,YAAL,CAAkB,IAAIP,SAAJ,CAAc,GAAd,EAAmBY,OAAnB,CAAlB;AACA,WAAO,IAAP;AACH;;AA5CkC;;AA8CvC,SAAST,iBAAT","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { tiled } from \"../flag\";\nimport { noOverflow } from \"../flag\";\n/**\n * @description\n * Defines the position of a layer: overlay or underlay.</br>\n * Even though Position is technically an action qualifier, it implements exactly the same functionality as an action.</br>\n * This is true because Position is compounded of multiple qualifiers</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_and_text_overlays|Applying overlays to images} | {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#adding_image_overlays|Applying overlays to videos}\n *\n * @extends {SDK.Actions}\n */\nclass PositionQualifier extends Action {\n    constructor() {\n        super();\n    }\n    gravity(gravityQualifier) {\n        this.addQualifier(gravityQualifier);\n        return this;\n    }\n    /**\n     * @description Tiles the overlay across your image.\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays | Tiling overlay}\n     */\n    tiled() {\n        this.addFlag(tiled());\n        return this;\n    }\n    /**\n     * TODO - This should accept a boolean value\n     * @description Prevents an image or text overlay from extending a delivered image canvas beyond the dimensions of the base image\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow | Overflow in overlays}\n     */\n    allowOverflow(bool = true) {\n        if (bool === false) {\n            this.addFlag(noOverflow());\n        }\n        return this;\n    }\n    /**\n     * @description Set the X Offset\n     * @param {number | string} offsetX\n     * @return {this}\n     */\n    offsetX(offsetX) {\n        this.addQualifier(new Qualifier('x', offsetX));\n        return this;\n    }\n    /**\n     * @description Set the Y Offset\n     * @param {number | string} offsetY\n     * @return {this}\n     */\n    offsetY(offsetY) {\n        this.addQualifier(new Qualifier('y', offsetY));\n        return this;\n    }\n}\nexport { PositionQualifier };\n"]},"metadata":{},"sourceType":"module"}