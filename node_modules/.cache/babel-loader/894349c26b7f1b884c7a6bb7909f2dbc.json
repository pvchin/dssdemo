{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Action } from \"../internal/Action\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor\";\nimport { prepareColor } from \"../internal/utils/prepareColor\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { RawAction } from \"../internal/RawAction\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\n\nvar Transformation = /*#__PURE__*/function () {\n  function Transformation() {\n    _classCallCheck(this, Transformation);\n\n    this.actions = [];\n  }\n  /**\n   * @param {SDK.Action | string} action\n   * @return {this}\n   */\n\n\n  _createClass(Transformation, [{\n    key: \"addAction\",\n    value: function addAction(action) {\n      var actionToAdd;\n\n      if (typeof action === 'string') {\n        if (action.indexOf('/') >= 0) {\n          throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n        } else {\n          actionToAdd = new RawAction(action);\n        }\n      } else {\n        actionToAdd = action;\n      }\n\n      this.actions.push(actionToAdd);\n      return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/base\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n\n  }, {\n    key: \"addTransformation\",\n    value: function addTransformation(tx) {\n      if (tx instanceof Transformation) {\n        // Concat the new actions into the existing actions\n        this.actions = this.actions.concat(tx.actions);\n      } else {\n        this.actions.push(new RawAction(tx));\n      }\n\n      return this;\n    }\n    /**\n     * @return {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.actions.map(function (action) {\n        return action.toString();\n      }).filter(function (a) {\n        return a;\n      }).join('/');\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"border\",\n    value: function border(borderAction) {\n      return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"reshape\",\n    value: function reshape(reshapeAction) {\n      return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize(resizeAction) {\n      return this.addAction(resizeAction);\n    }\n    /**\n     * @param {DeliveryAction} quality\n     * @return {this}\n     */\n\n  }, {\n    key: \"quality\",\n    value: function quality(_quality) {\n      return this.addAction(_quality);\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"roundCorners\",\n    value: function roundCorners(roundCornersAction) {\n      return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"overlay\",\n    value: function overlay(overlayAction) {\n      return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"underlay\",\n    value: function underlay(underlayAction) {\n      underlayAction.setLayerType('u');\n      return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"addVariable\",\n    value: function addVariable(variableAction) {\n      return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"conditional\",\n    value: function conditional(conditionAction) {\n      return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"effect\",\n    value: function effect(effectAction) {\n      return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n\n  }, {\n    key: \"adjust\",\n    value: function adjust(action) {\n      return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"rotate\",\n    value: function rotate(rotateAction) {\n      return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n\n  }, {\n    key: \"namedTransformation\",\n    value: function namedTransformation(_namedTransformation) {\n      return this.addAction(_namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n\n  }, {\n    key: \"delivery\",\n    value: function delivery(deliveryAction) {\n      return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n\n  }, {\n    key: \"backgroundColor\",\n    value: function backgroundColor(color) {\n      return this.addAction(new BackgroundColor(prepareColor(color)));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n\n  }, {\n    key: \"psdTools\",\n    value: function psdTools(action) {\n      return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n\n  }, {\n    key: \"extract\",\n    value: function extract(action) {\n      return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n\n  }, {\n    key: \"addFlag\",\n    value: function addFlag(flagQualifier) {\n      var action = new Action();\n      var flagToAdd = flagQualifier;\n\n      if (typeof flagQualifier === 'string') {\n        flagToAdd = new FlagQualifier(flagQualifier);\n      }\n\n      action.addQualifier(flagToAdd);\n      return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n\n  }, {\n    key: \"customFunction\",\n    value: function customFunction(_customFunction) {\n      return this.addAction(_customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n\n  }, {\n    key: \"transcode\",\n    value: function transcode(action) {\n      return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n\n  }, {\n    key: \"videoEdit\",\n    value: function videoEdit(action) {\n      return this.addAction(action);\n    }\n  }]);\n\n  return Transformation;\n}();\n\nexport { Transformation };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/transformation/Transformation.js"],"names":["Action","BackgroundColor","prepareColor","FlagQualifier","RawAction","Transformation","actions","action","actionToAdd","indexOf","push","tx","concat","map","toString","filter","a","join","borderAction","addAction","reshapeAction","resizeAction","quality","roundCornersAction","overlayAction","underlayAction","setLayerType","variableAction","conditionAction","effectAction","rotateAction","namedTransformation","deliveryAction","color","flagQualifier","flagToAdd","addQualifier","customFunction"],"mappings":"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","sourcesContent":["import { Action } from \"../internal/Action\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor\";\nimport { prepareColor } from \"../internal/utils/prepareColor\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { RawAction } from \"../internal/RawAction\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n    constructor() {\n        this.actions = [];\n    }\n    /**\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        let actionToAdd;\n        if (typeof action === 'string') {\n            if (action.indexOf('/') >= 0) {\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n            }\n            else {\n                actionToAdd = new RawAction(action);\n            }\n        }\n        else {\n            actionToAdd = action;\n        }\n        this.actions.push(actionToAdd);\n        return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/base\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n    addTransformation(tx) {\n        if (tx instanceof Transformation) {\n            // Concat the new actions into the existing actions\n            this.actions = this.actions.concat(tx.actions);\n        }\n        else {\n            this.actions.push(new RawAction(tx));\n        }\n        return this;\n    }\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.actions\n            .map((action) => {\n            return action.toString();\n        })\n            .filter((a) => a)\n            .join('/');\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n    border(borderAction) {\n        return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n    reshape(reshapeAction) {\n        return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n    resize(resizeAction) {\n        return this.addAction(resizeAction);\n    }\n    /**\n     * @param {DeliveryAction} quality\n     * @return {this}\n     */\n    quality(quality) {\n        return this.addAction(quality);\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n    roundCorners(roundCornersAction) {\n        return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        underlayAction.setLayerType('u');\n        return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n    conditional(conditionAction) {\n        return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n    effect(effectAction) {\n        return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n    adjust(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n    rotate(rotateAction) {\n        return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        return this.addAction(namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        return this.addAction(new BackgroundColor(prepareColor(color)));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n    psdTools(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n    extract(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        const action = new Action();\n        let flagToAdd = flagQualifier;\n        if (typeof flagQualifier === 'string') {\n            flagToAdd = new FlagQualifier(flagQualifier);\n        }\n        action.addQualifier(flagToAdd);\n        return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        return this.addAction(customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n    transcode(action) {\n        return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        return this.addAction(action);\n    }\n}\nexport { Transformation };\n"]},"metadata":{},"sourceType":"module"}