{"ast":null,"code":"import { ACCESSIBILITY_MODES } from '../utils/internalConstants';\nimport { isBrowser } from \"../utils/isBrowser\";\nimport { isImage } from \"../utils/isImage\";\n/**\n * @namespace\n * @description Appends accessibility transformations to the original image.\n * @param mode {AccessibilityMode} The accessibility mode to use. Possible modes: 'darkmode' | 'brightmode' | 'monochrome' | 'colorblind'. Default: 'darkmode'.\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins={[accessibility()]}/>\n */\n\nexport function accessibility(mode) {\n  if (mode === void 0) {\n    mode = 'darkmode';\n  }\n\n  return accessibilityPlugin.bind(null, mode);\n}\n/**\n * @description Accessibility plugin\n * @param mode {accessibilityMode} The accessibility mode to use. Possible modes: 'darkmode' | 'brightmode' | 'monochrome' | 'colorblind'. Default: 'darkmode'.\n * @param element {HTMLImageElement} The image element.\n * @param pluginCloudinaryImage {CloudinaryImage}\n * @param htmlPluginState {htmlPluginState} Holds cleanup callbacks and event subscriptions.\n */\n\nexport function accessibilityPlugin(mode, element, pluginCloudinaryImage, htmlPluginState) {\n  if (isBrowser()) {\n    if (!isImage(element)) return;\n    return new Promise(function (resolve) {\n      // resolved promise when canceled\n      htmlPluginState.cleanupCallbacks.push(function () {\n        resolve('canceled');\n      });\n\n      if (!ACCESSIBILITY_MODES[mode]) {\n        mode = 'darkmode';\n      }\n\n      pluginCloudinaryImage.effect(ACCESSIBILITY_MODES[mode]);\n      resolve();\n    });\n  } else {\n    pluginCloudinaryImage.effect(ACCESSIBILITY_MODES[mode]);\n  }\n}","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/html/plugins/accessibility.js"],"names":["ACCESSIBILITY_MODES","isBrowser","isImage","accessibility","mode","accessibilityPlugin","bind","element","pluginCloudinaryImage","htmlPluginState","Promise","resolve","cleanupCallbacks","push","effect"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,4BAApC;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAChC,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,UAAP;AAAoB;;AAC3C,SAAOC,mBAAmB,CAACC,IAApB,CAAyB,IAAzB,EAA+BF,IAA/B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,CAA6BD,IAA7B,EAAmCG,OAAnC,EAA4CC,qBAA5C,EAAmEC,eAAnE,EAAoF;AACvF,MAAIR,SAAS,EAAb,EAAiB;AACb,QAAI,CAACC,OAAO,CAACK,OAAD,CAAZ,EACI;AACJ,WAAO,IAAIG,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AAClC;AACAF,MAAAA,eAAe,CAACG,gBAAhB,CAAiCC,IAAjC,CAAsC,YAAY;AAC9CF,QAAAA,OAAO,CAAC,UAAD,CAAP;AACH,OAFD;;AAGA,UAAI,CAACX,mBAAmB,CAACI,IAAD,CAAxB,EAAgC;AAC5BA,QAAAA,IAAI,GAAG,UAAP;AACH;;AACDI,MAAAA,qBAAqB,CAACM,MAAtB,CAA6Bd,mBAAmB,CAACI,IAAD,CAAhD;AACAO,MAAAA,OAAO;AACV,KAVM,CAAP;AAWH,GAdD,MAeK;AACDH,IAAAA,qBAAqB,CAACM,MAAtB,CAA6Bd,mBAAmB,CAACI,IAAD,CAAhD;AACH;AACJ","sourcesContent":["import { ACCESSIBILITY_MODES } from '../utils/internalConstants';\nimport { isBrowser } from \"../utils/isBrowser\";\nimport { isImage } from \"../utils/isImage\";\n/**\n * @namespace\n * @description Appends accessibility transformations to the original image.\n * @param mode {AccessibilityMode} The accessibility mode to use. Possible modes: 'darkmode' | 'brightmode' | 'monochrome' | 'colorblind'. Default: 'darkmode'.\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins={[accessibility()]}/>\n */\nexport function accessibility(mode) {\n    if (mode === void 0) { mode = 'darkmode'; }\n    return accessibilityPlugin.bind(null, mode);\n}\n/**\n * @description Accessibility plugin\n * @param mode {accessibilityMode} The accessibility mode to use. Possible modes: 'darkmode' | 'brightmode' | 'monochrome' | 'colorblind'. Default: 'darkmode'.\n * @param element {HTMLImageElement} The image element.\n * @param pluginCloudinaryImage {CloudinaryImage}\n * @param htmlPluginState {htmlPluginState} Holds cleanup callbacks and event subscriptions.\n */\nexport function accessibilityPlugin(mode, element, pluginCloudinaryImage, htmlPluginState) {\n    if (isBrowser()) {\n        if (!isImage(element))\n            return;\n        return new Promise(function (resolve) {\n            // resolved promise when canceled\n            htmlPluginState.cleanupCallbacks.push(function () {\n                resolve('canceled');\n            });\n            if (!ACCESSIBILITY_MODES[mode]) {\n                mode = 'darkmode';\n            }\n            pluginCloudinaryImage.effect(ACCESSIBILITY_MODES[mode]);\n            resolve();\n        });\n    }\n    else {\n        pluginCloudinaryImage.effect(ACCESSIBILITY_MODES[mode]);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}