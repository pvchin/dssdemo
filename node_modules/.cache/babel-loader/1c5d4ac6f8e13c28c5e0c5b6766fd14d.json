{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nvar MakeTransparentEffectAction = /*#__PURE__*/function (_LeveledEffectAction) {\n  _inherits(MakeTransparentEffectAction, _LeveledEffectAction);\n\n  var _super = _createSuper(MakeTransparentEffectAction);\n\n  function MakeTransparentEffectAction() {\n    _classCallCheck(this, MakeTransparentEffectAction);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MakeTransparentEffectAction, [{\n    key: \"tolerance\",\n    value:\n    /**\n     * @description Sets the tolerance used to accommodate variance in the background color.\n     * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n     */\n    function tolerance(value) {\n      return this.setLevel(value);\n    }\n    /**\n     * @description Sets the color to make transparent.\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n     * @return {this}\n     */\n\n  }, {\n    key: \"colorToReplace\",\n    value: function colorToReplace(color) {\n      return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n  }]);\n\n  return MakeTransparentEffectAction;\n}(LeveledEffectAction);\n\nexport { MakeTransparentEffectAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/effect/leveled/makeTransparent.js"],"names":["LeveledEffectAction","Qualifier","QualifierValue","prepareColor","MakeTransparentEffectAction","value","setLevel","color","addQualifier"],"mappings":";;;;AAAA,SAASA,mBAAT,QAAoC,sCAApC;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,2B;;;;;;;;;;;;;;AACF;AACJ;AACA;AACA;AACI,uBAAUC,KAAV,EAAiB;AACb,aAAO,KAAKC,QAAL,CAAcD,KAAd,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAeE,KAAf,EAAsB;AAClB,aAAO,KAAKC,YAAL,CAAkB,IAAIP,SAAJ,CAAc,IAAd,EAAoB,IAAIC,cAAJ,CAAmBC,YAAY,CAACI,KAAD,CAA/B,CAApB,CAAlB,CAAP;AACH;;;;EAfqCP,mB;;AAiB1C,SAASI,2BAAT","sourcesContent":["import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n    /**\n     * @description Sets the tolerance used to accommodate variance in the background color.\n     * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n     */\n    tolerance(value) {\n        return this.setLevel(value);\n    }\n    /**\n     * @description Sets the color to make transparent.\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n     * @return {this}\n     */\n    colorToReplace(color) {\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n}\nexport { MakeTransparentEffectAction };\n"]},"metadata":{},"sourceType":"module"}