{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { useQuery } from \"react-query\";\nimport { expenses_url } from \"../../utils/constants\";\nimport { filterByStatus } from \"./utils\";\nimport axios from \"axios\";\nimport { queryKeys } from \"../react-query/constants\";\n\nasync function getExpensesPeriod(month, year) {\n  const {\n    data\n  } = await axios.get(`${expenses_url}?m=${month}&y=${year}`); //const { data } = await axios.get(`${expenses_url}`);\n\n  return data;\n}\n\nexport function useExpensesPeriod(payrun) {\n  _s();\n\n  const [expperiodfilter, setExpPeriodFilter] = useState(\"all\");\n  const [expperiodYrId, setExpPeriodYrId] = useState(\"\");\n  const [expperiodMthId, setExpPeriodMthId] = useState(\"\");\n  const selectFn = useCallback(unfiltered => filterByStatus(unfiltered, expperiodfilter), [expperiodfilter]);\n  const fallback = [];\n  const {\n    data: expensesperiod = fallback\n  } = useQuery([queryKeys.expensesperiod, expperiodMthId, expperiodYrId], //queryKeys.expenses_payrun,\n  () => getExpensesPeriod(expperiodMthId), {\n    select: expperiodfilter !== \"all\" ? selectFn : undefined\n  });\n  return {\n    expensesperiod,\n    expperiodfilter,\n    setExpPeriodFilter,\n    setExpPeriodId\n  };\n}\n\n_s(useExpensesPeriod, \"bzSV/TKJClpBp6y4ZwIqx6AUMSs=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/expenses/useExpensesPeriod.js"],"names":["useState","useCallback","useQuery","expenses_url","filterByStatus","axios","queryKeys","getExpensesPeriod","month","year","data","get","useExpensesPeriod","payrun","expperiodfilter","setExpPeriodFilter","expperiodYrId","setExpPeriodYrId","expperiodMthId","setExpPeriodMthId","selectFn","unfiltered","fallback","expensesperiod","select","undefined","setExpPeriodId"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AACA,SAASC,cAAT,QAA+B,SAA/B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,0BAA1B;;AAEA,eAAeC,iBAAf,CAAiCC,KAAjC,EAAwCC,IAAxC,EAA8C;AAC5C,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAML,KAAK,CAACM,GAAN,CAAW,GAAER,YAAa,MAAKK,KAAM,MAAKC,IAAK,EAA/C,CAAvB,CAD4C,CAE5C;;AACA,SAAOC,IAAP;AACD;;AAED,OAAO,SAASE,iBAAT,CAA2BC,MAA3B,EAAmC;AAAA;;AACxC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCf,QAAQ,CAAC,KAAD,CAAtD;AACE,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,EAAD,CAAlD;AACC,QAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,EAAD,CAApD;AAEH,QAAMoB,QAAQ,GAAGnB,WAAW,CACzBoB,UAAD,IAAgBjB,cAAc,CAACiB,UAAD,EAAaP,eAAb,CADJ,EAE1B,CAACA,eAAD,CAF0B,CAA5B;AAKA,QAAMQ,QAAQ,GAAG,EAAjB;AACA,QAAM;AAAEZ,IAAAA,IAAI,EAAEa,cAAc,GAAGD;AAAzB,MAAsCpB,QAAQ,CAClD,CAACI,SAAS,CAACiB,cAAX,EAA2BL,cAA3B,EAA2CF,aAA3C,CADkD,EAElD;AACA,QAAMT,iBAAiB,CAACW,cAAD,CAH2B,EAIlD;AACEM,IAAAA,MAAM,EAAEV,eAAe,KAAK,KAApB,GAA4BM,QAA5B,GAAuCK;AADjD,GAJkD,CAApD;AASA,SAAO;AACLF,IAAAA,cADK;AAELT,IAAAA,eAFK;AAGLC,IAAAA,kBAHK;AAILW,IAAAA;AAJK,GAAP;AAMD;;GA1Bed,iB;UAW8BV,Q","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport { expenses_url } from \"../../utils/constants\";\r\nimport { filterByStatus } from \"./utils\";\r\n\r\nimport axios from \"axios\";\r\nimport { queryKeys } from \"../react-query/constants\";\r\n\r\nasync function getExpensesPeriod(month, year) {\r\n  const { data } = await axios.get(`${expenses_url}?m=${month}&y=${year}`);\r\n  //const { data } = await axios.get(`${expenses_url}`);\r\n  return data;\r\n}\r\n\r\nexport function useExpensesPeriod(payrun) {\r\n  const [expperiodfilter, setExpPeriodFilter] = useState(\"all\");\r\n    const [expperiodYrId, setExpPeriodYrId] = useState(\"\");\r\n     const [expperiodMthId, setExpPeriodMthId] = useState(\"\");\r\n\r\n  const selectFn = useCallback(\r\n    (unfiltered) => filterByStatus(unfiltered, expperiodfilter),\r\n    [expperiodfilter]\r\n  );\r\n\r\n  const fallback = [];\r\n  const { data: expensesperiod = fallback } = useQuery(\r\n    [queryKeys.expensesperiod, expperiodMthId, expperiodYrId],\r\n    //queryKeys.expenses_payrun,\r\n    () => getExpensesPeriod(expperiodMthId),\r\n    {\r\n      select: expperiodfilter !== \"all\" ? selectFn : undefined,\r\n    }\r\n  );\r\n\r\n  return {\r\n    expensesperiod,\r\n    expperiodfilter,\r\n    setExpPeriodFilter,\r\n    setExpPeriodId,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}