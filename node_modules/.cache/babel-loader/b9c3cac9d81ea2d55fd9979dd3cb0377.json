{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../internal/Action\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue\";\nimport { regionRelative, relative } from \"../../qualifiers/flag\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\n\nclass ResizeSimpleAction extends Action {\n  /**\n   * @param {string} cropType\n   * @param {number | string} cropWidth The required width of a transformed asset.\n   * @param {number | string} cropHeight The required height of a transformed asset.\n   */\n  constructor(cropType, cropWidth, cropHeight) {\n    super();\n\n    if (cropWidth) {\n      this.addQualifier(new Qualifier('w', cropWidth));\n    }\n\n    if (cropHeight) {\n      this.addQualifier(new Qualifier('h', cropHeight));\n    }\n\n    this.addQualifier(new Qualifier('c', cropType));\n  }\n  /**\n   * @description Sets the height of the resize\n   * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n\n\n  height(x) {\n    return this.addQualifier(new Qualifier('h', x));\n  }\n  /**\n   * @description Sets the width of the resize\n   * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n\n\n  width(x) {\n    return this.addQualifier(new Qualifier('w', x));\n  }\n  /**\n   * @description Sets the aspect ratio of the asset.\n   * For a list of supported types see {@link Qualifiers.AspectRatio |\n    * AspectRatio values}\n   * @param {number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n   * @return {this}\n   */\n\n\n  aspectRatio(ratio) {\n    // toFloatAsString is used to ensure 1 turns into 1.0\n    if (ratio instanceof AspectRatioQualifierValue) {\n      return this.addQualifier(new Qualifier('ar', ratio));\n    }\n\n    if (typeof ratio === 'number' || typeof ratio === 'string') {\n      return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n    }\n\n    if (ratio instanceof FlagQualifier) {\n      return this.addFlag(ratio);\n    }\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n   * @return {this}\n   */\n\n\n  relative() {\n    return this.addFlag(relative());\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n   * @return {this}\n   */\n\n\n  regionRelative() {\n    return this.addFlag(regionRelative());\n  }\n\n}\n\nexport default ResizeSimpleAction;","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/actions/resize/ResizeSimpleAction.js"],"names":["Qualifier","Action","toFloatAsString","AspectRatioQualifierValue","regionRelative","relative","FlagQualifier","ResizeSimpleAction","constructor","cropType","cropWidth","cropHeight","addQualifier","height","x","width","aspectRatio","ratio","addFlag"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oCAA1B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,eAAT,QAAgC,sCAAhC;AACA,SAASC,yBAAT,QAA0C,wDAA1C;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,uBAAzC;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,kBAAN,SAAiCN,MAAjC,CAAwC;AACpC;AACJ;AACA;AACA;AACA;AACIO,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,UAAtB,EAAkC;AACzC;;AACA,QAAID,SAAJ,EAAe;AACX,WAAKE,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,GAAd,EAAmBU,SAAnB,CAAlB;AACH;;AACD,QAAIC,UAAJ,EAAgB;AACZ,WAAKC,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,GAAd,EAAmBW,UAAnB,CAAlB;AACH;;AACD,SAAKC,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,GAAd,EAAmBS,QAAnB,CAAlB;AACH;AACD;AACJ;AACA;AACA;;;AACII,EAAAA,MAAM,CAACC,CAAD,EAAI;AACN,WAAO,KAAKF,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,GAAd,EAAmBc,CAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,KAAK,CAACD,CAAD,EAAI;AACL,WAAO,KAAKF,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,GAAd,EAAmBc,CAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf;AACA,QAAIA,KAAK,YAAYd,yBAArB,EAAgD;AAC5C,aAAO,KAAKS,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,IAAd,EAAoBiB,KAApB,CAAlB,CAAP;AACH;;AACD,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AACxD,aAAO,KAAKL,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,IAAd,EAAoBE,eAAe,CAACe,KAAD,CAAnC,CAAlB,CAAP;AACH;;AACD,QAAIA,KAAK,YAAYX,aAArB,EAAoC;AAChC,aAAO,KAAKY,OAAL,CAAaD,KAAb,CAAP;AACH;AACJ;AACD;AACJ;AACA;AACA;;;AACIZ,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKa,OAAL,CAAab,QAAQ,EAArB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;AACID,EAAAA,cAAc,GAAG;AACb,WAAO,KAAKc,OAAL,CAAad,cAAc,EAA3B,CAAP;AACH;;AA9DmC;;AAgExC,eAAeG,kBAAf","sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../internal/Action\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue\";\nimport { regionRelative, relative } from \"../../qualifiers/flag\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n    /**\n     * @param {string} cropType\n     * @param {number | string} cropWidth The required width of a transformed asset.\n     * @param {number | string} cropHeight The required height of a transformed asset.\n     */\n    constructor(cropType, cropWidth, cropHeight) {\n        super();\n        if (cropWidth) {\n            this.addQualifier(new Qualifier('w', cropWidth));\n        }\n        if (cropHeight) {\n            this.addQualifier(new Qualifier('h', cropHeight));\n        }\n        this.addQualifier(new Qualifier('c', cropType));\n    }\n    /**\n     * @description Sets the height of the resize\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    height(x) {\n        return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    width(x) {\n        return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio |\n      * AspectRatio values}\n     * @param {number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n    aspectRatio(ratio) {\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        if (ratio instanceof AspectRatioQualifierValue) {\n            return this.addQualifier(new Qualifier('ar', ratio));\n        }\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n        }\n        if (ratio instanceof FlagQualifier) {\n            return this.addFlag(ratio);\n        }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n    relative() {\n        return this.addFlag(relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n    regionRelative() {\n        return this.addFlag(regionRelative());\n    }\n}\nexport default ResizeSimpleAction;\n"]},"metadata":{},"sourceType":"module"}