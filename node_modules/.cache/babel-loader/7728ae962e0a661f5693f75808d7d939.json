{"ast":null,"code":"import { Action } from \"../internal/Action\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor\";\nimport { prepareColor } from \"../internal/utils/prepareColor\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { RawAction } from \"../internal/RawAction\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\n\nclass Transformation {\n  constructor() {\n    this.actions = [];\n  }\n  /**\n   * @param {SDK.Action | string} action\n   * @return {this}\n   */\n\n\n  addAction(action) {\n    let actionToAdd;\n\n    if (typeof action === 'string') {\n      if (action.indexOf('/') >= 0) {\n        throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n      } else {\n        actionToAdd = new RawAction(action);\n      }\n    } else {\n      actionToAdd = action;\n    }\n\n    this.actions.push(actionToAdd);\n    return this;\n  }\n  /**\n   * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n   * @param {string | SDK.Transformation} tx\n   * @example\n   * import {Transformation} from \"@cloudinary/base\";\n   *\n   * const transformation = new Transformation();\n   * transformation.addTransformation('w_100/w_200/w_300');\n   * @return {this}\n   */\n\n\n  addTransformation(tx) {\n    if (tx instanceof Transformation) {\n      // Concat the new actions into the existing actions\n      this.actions = this.actions.concat(tx.actions);\n    } else {\n      this.actions.push(new RawAction(tx));\n    }\n\n    return this;\n  }\n  /**\n   * @return {string}\n   */\n\n\n  toString() {\n    return this.actions.map(action => {\n      return action.toString();\n    }).filter(a => a).join('/');\n  }\n  /**\n   * @description Adds a border around the image.\n   * @param {Border} borderAction\n   * @return {this}\n   */\n\n\n  border(borderAction) {\n    return this.addAction(borderAction);\n  }\n  /**\n   * @description Adjusts the shape of the delivered image. </br>\n   * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\n   * @param {IReshape} reshapeAction\n   * @return {this}\n   */\n\n\n  reshape(reshapeAction) {\n    return this.addAction(reshapeAction);\n  }\n  /**\n   * @description Resize the asset using provided resize action\n   * @param {ResizeSimpleAction} resizeAction\n   * @return {this}\n   */\n\n\n  resize(resizeAction) {\n    return this.addAction(resizeAction);\n  }\n  /**\n   * @param {DeliveryAction} quality\n   * @return {this}\n   */\n\n\n  quality(quality) {\n    return this.addAction(quality);\n  }\n  /**\n   * @description Rounds the specified corners of an image.\n   * @param roundCornersAction\n   * @return {this}\n   */\n\n\n  roundCorners(roundCornersAction) {\n    return this.addAction(roundCornersAction);\n  }\n  /**\n   * @description Adds an overlay over the base image.\n   * @param {LayerAction} overlayAction\n   * @return {this}\n   */\n\n\n  overlay(overlayAction) {\n    return this.addAction(overlayAction);\n  }\n  /**\n   * @description Adds an underlay under the base image.\n   * @param {LayerAction} underlayAction\n   * @return {this}\n   */\n\n\n  underlay(underlayAction) {\n    underlayAction.setLayerType('u');\n    return this.addAction(underlayAction);\n  }\n  /**\n   * @description Defines an new user variable.\n   * @param {VariableAction} variableAction\n   * @return {this}\n   */\n\n\n  addVariable(variableAction) {\n    return this.addAction(variableAction);\n  }\n  /**\n   * @description Specifies a condition to be met before applying a transformation.\n   * @param {ConditionalAction} conditionAction\n   * @return {this}\n   */\n\n\n  conditional(conditionAction) {\n    return this.addAction(conditionAction);\n  }\n  /**\n   * @description Applies a filter or an effect on an asset.\n   * @param {SimpleEffectAction} effectAction\n   * @return {this}\n   */\n\n\n  effect(effectAction) {\n    return this.addAction(effectAction);\n  }\n  /**\n   * @description Applies adjustment effect on an asset.\n   * @param action\n   * @return {this}\n   */\n\n\n  adjust(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Rotates the asset by the given angle.\n   * @param {RotateAction} rotateAction\n   * @return {this}\n   */\n\n\n  rotate(rotateAction) {\n    return this.addAction(rotateAction);\n  }\n  /**\n   * @description Applies a pre-defined named transformation of the given name.\n   * @param {NamedTransformation} namedTransformation\n   * @return {this}\n   */\n\n\n  namedTransformation(namedTransformation) {\n    return this.addAction(namedTransformation);\n  }\n  /**\n   * @description Applies delivery action.\n   * @param deliveryAction\n   * @return {this}\n   */\n\n\n  delivery(deliveryAction) {\n    return this.addAction(deliveryAction);\n  }\n  /**\n   * @description Sets the color of the background.\n   * @param {Qualifiers.Color} color\n   * @return {this}\n   */\n\n\n  backgroundColor(color) {\n    return this.addAction(new BackgroundColor(prepareColor(color)));\n  }\n  /**\n   * @description Adds a layer in a Photoshop document.\n   * @param action\n   * @return {this}\n   */\n\n\n  psdTools(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n   * @param action\n   * @return {this}\n   */\n\n\n  extract(action) {\n    return this.addAction(action);\n  }\n  /**\n   * @description Adds a flag as a separate action.\n   * @param {Qualifiers.Flag | string} flagQualifier\n   * @return {this}\n   */\n\n\n  addFlag(flagQualifier) {\n    const action = new Action();\n    let flagToAdd = flagQualifier;\n\n    if (typeof flagQualifier === 'string') {\n      flagToAdd = new FlagQualifier(flagQualifier);\n    }\n\n    action.addQualifier(flagToAdd);\n    return this.addAction(action);\n  }\n  /**\n   * @description Inject a custom function into the image transformation pipeline.\n   * @return {this}\n   */\n\n\n  customFunction(customFunction) {\n    return this.addAction(customFunction);\n  }\n  /**\n   * Transcodes the video (or audio) to another format.\n   * @param {Action} action\n   * @return {this}\n   */\n\n\n  transcode(action) {\n    return this.addAction(action);\n  }\n  /**\n   * Applies the specified video edit action.\n   *\n   * @param {videoEditType} action\n   * @return {this}\n   */\n\n\n  videoEdit(action) {\n    return this.addAction(action);\n  }\n\n}\n\nexport { Transformation };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/transformation/Transformation.js"],"names":["Action","BackgroundColor","prepareColor","FlagQualifier","RawAction","Transformation","constructor","actions","addAction","action","actionToAdd","indexOf","push","addTransformation","tx","concat","toString","map","filter","a","join","border","borderAction","reshape","reshapeAction","resize","resizeAction","quality","roundCorners","roundCornersAction","overlay","overlayAction","underlay","underlayAction","setLayerType","addVariable","variableAction","conditional","conditionAction","effect","effectAction","adjust","rotate","rotateAction","namedTransformation","delivery","deliveryAction","backgroundColor","color","psdTools","extract","addFlag","flagQualifier","flagToAdd","addQualifier","customFunction","transcode","videoEdit"],"mappings":"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","sourcesContent":["import { Action } from \"../internal/Action\";\nimport { BackgroundColor } from \"../actions/background/actions/BackgroundColor\";\nimport { prepareColor } from \"../internal/utils/prepareColor\";\nimport { FlagQualifier } from \"../qualifiers/flag/FlagQualifier\";\nimport { RawAction } from \"../internal/RawAction\";\n/**\n * @summary SDK\n * @description - Defines how to transform an asset\n * @memberOf SDK\n */\nclass Transformation {\n    constructor() {\n        this.actions = [];\n    }\n    /**\n     * @param {SDK.Action | string} action\n     * @return {this}\n     */\n    addAction(action) {\n        let actionToAdd;\n        if (typeof action === 'string') {\n            if (action.indexOf('/') >= 0) {\n                throw 'addAction cannot accept a string with a forward slash in it - /, use .addTransformation() instead';\n            }\n            else {\n                actionToAdd = new RawAction(action);\n            }\n        }\n        else {\n            actionToAdd = action;\n        }\n        this.actions.push(actionToAdd);\n        return this;\n    }\n    /**\n     * @description Allows the injection of a raw transformation as a string into the transformation, or a Transformation instance that was previously created\n     * @param {string | SDK.Transformation} tx\n     * @example\n     * import {Transformation} from \"@cloudinary/base\";\n     *\n     * const transformation = new Transformation();\n     * transformation.addTransformation('w_100/w_200/w_300');\n     * @return {this}\n     */\n    addTransformation(tx) {\n        if (tx instanceof Transformation) {\n            // Concat the new actions into the existing actions\n            this.actions = this.actions.concat(tx.actions);\n        }\n        else {\n            this.actions.push(new RawAction(tx));\n        }\n        return this;\n    }\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this.actions\n            .map((action) => {\n            return action.toString();\n        })\n            .filter((a) => a)\n            .join('/');\n    }\n    /**\n     * @description Adds a border around the image.\n     * @param {Border} borderAction\n     * @return {this}\n     */\n    border(borderAction) {\n        return this.addAction(borderAction);\n    }\n    /**\n     * @description Adjusts the shape of the delivered image. </br>\n     * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_shape_changes_and_distortion_effects|Shape changes and distortion effects}\n     * @param {IReshape} reshapeAction\n     * @return {this}\n     */\n    reshape(reshapeAction) {\n        return this.addAction(reshapeAction);\n    }\n    /**\n     * @description Resize the asset using provided resize action\n     * @param {ResizeSimpleAction} resizeAction\n     * @return {this}\n     */\n    resize(resizeAction) {\n        return this.addAction(resizeAction);\n    }\n    /**\n     * @param {DeliveryAction} quality\n     * @return {this}\n     */\n    quality(quality) {\n        return this.addAction(quality);\n    }\n    /**\n     * @description Rounds the specified corners of an image.\n     * @param roundCornersAction\n     * @return {this}\n     */\n    roundCorners(roundCornersAction) {\n        return this.addAction(roundCornersAction);\n    }\n    /**\n     * @description Adds an overlay over the base image.\n     * @param {LayerAction} overlayAction\n     * @return {this}\n     */\n    overlay(overlayAction) {\n        return this.addAction(overlayAction);\n    }\n    /**\n     * @description Adds an underlay under the base image.\n     * @param {LayerAction} underlayAction\n     * @return {this}\n     */\n    underlay(underlayAction) {\n        underlayAction.setLayerType('u');\n        return this.addAction(underlayAction);\n    }\n    /**\n     * @description Defines an new user variable.\n     * @param {VariableAction} variableAction\n     * @return {this}\n     */\n    addVariable(variableAction) {\n        return this.addAction(variableAction);\n    }\n    /**\n     * @description Specifies a condition to be met before applying a transformation.\n     * @param {ConditionalAction} conditionAction\n     * @return {this}\n     */\n    conditional(conditionAction) {\n        return this.addAction(conditionAction);\n    }\n    /**\n     * @description Applies a filter or an effect on an asset.\n     * @param {SimpleEffectAction} effectAction\n     * @return {this}\n     */\n    effect(effectAction) {\n        return this.addAction(effectAction);\n    }\n    /**\n     * @description Applies adjustment effect on an asset.\n     * @param action\n     * @return {this}\n     */\n    adjust(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Rotates the asset by the given angle.\n     * @param {RotateAction} rotateAction\n     * @return {this}\n     */\n    rotate(rotateAction) {\n        return this.addAction(rotateAction);\n    }\n    /**\n     * @description Applies a pre-defined named transformation of the given name.\n     * @param {NamedTransformation} namedTransformation\n     * @return {this}\n     */\n    namedTransformation(namedTransformation) {\n        return this.addAction(namedTransformation);\n    }\n    /**\n     * @description Applies delivery action.\n     * @param deliveryAction\n     * @return {this}\n     */\n    delivery(deliveryAction) {\n        return this.addAction(deliveryAction);\n    }\n    /**\n     * @description Sets the color of the background.\n     * @param {Qualifiers.Color} color\n     * @return {this}\n     */\n    backgroundColor(color) {\n        return this.addAction(new BackgroundColor(prepareColor(color)));\n    }\n    /**\n     * @description Adds a layer in a Photoshop document.\n     * @param action\n     * @return {this}\n     */\n    psdTools(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Extracts an image or a page using an index, a range, or a name from a layered media asset.\n     * @param action\n     * @return {this}\n     */\n    extract(action) {\n        return this.addAction(action);\n    }\n    /**\n     * @description Adds a flag as a separate action.\n     * @param {Qualifiers.Flag | string} flagQualifier\n     * @return {this}\n     */\n    addFlag(flagQualifier) {\n        const action = new Action();\n        let flagToAdd = flagQualifier;\n        if (typeof flagQualifier === 'string') {\n            flagToAdd = new FlagQualifier(flagQualifier);\n        }\n        action.addQualifier(flagToAdd);\n        return this.addAction(action);\n    }\n    /**\n     * @description Inject a custom function into the image transformation pipeline.\n     * @return {this}\n     */\n    customFunction(customFunction) {\n        return this.addAction(customFunction);\n    }\n    /**\n     * Transcodes the video (or audio) to another format.\n     * @param {Action} action\n     * @return {this}\n     */\n    transcode(action) {\n        return this.addAction(action);\n    }\n    /**\n     * Applies the specified video edit action.\n     *\n     * @param {videoEditType} action\n     * @return {this}\n     */\n    videoEdit(action) {\n        return this.addAction(action);\n    }\n}\nexport { Transformation };\n"]},"metadata":{},"sourceType":"module"}