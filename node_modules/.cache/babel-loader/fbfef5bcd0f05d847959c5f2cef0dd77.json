{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BaseSource } from \"../BaseSource\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\n\nvar FetchSource = /*#__PURE__*/function (_BaseSource) {\n  _inherits(FetchSource, _BaseSource);\n\n  var _super = _createSuper(FetchSource);\n\n  function FetchSource(remoteURL) {\n    var _this;\n\n    _classCallCheck(this, FetchSource);\n\n    _this = _super.call(this);\n    _this._remoteURL = remoteURL;\n    return _this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  _createClass(FetchSource, [{\n    key: \"getOpenSourceString\",\n    value: function getOpenSourceString(layerType) {\n      if (this._format) {\n        return \"\".concat(layerType, \"_fetch:\").concat(base64Encode(this._remoteURL), \".\").concat(this._format.toString());\n      } else {\n        return \"\".concat(layerType, \"_fetch:\").concat(base64Encode(this._remoteURL));\n      }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n\n  }, {\n    key: \"format\",\n    value: function format(_format) {\n      this._format = _format;\n      return this;\n    }\n  }]);\n\n  return FetchSource;\n}(BaseSource);\n\nexport { FetchSource };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/FetchSource.js"],"names":["BaseSource","base64Encode","FetchSource","remoteURL","_remoteURL","layerType","_format","toString","format"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;;;;;AACF,uBAAYC,SAAZ,EAAuB;AAAA;;AAAA;;AACnB;AACA,UAAKC,UAAL,GAAkBD,SAAlB;AAFmB;AAGtB;AACD;AACJ;AACA;AACA;AACA;AACA;;;;;WACI,6BAAoBE,SAApB,EAA+B;AAC3B,UAAI,KAAKC,OAAT,EAAkB;AACd,yBAAUD,SAAV,oBAA6BJ,YAAY,CAAC,KAAKG,UAAN,CAAzC,cAA8D,KAAKE,OAAL,CAAaC,QAAb,EAA9D;AACH,OAFD,MAGK;AACD,yBAAUF,SAAV,oBAA6BJ,YAAY,CAAC,KAAKG,UAAN,CAAzC;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,gBAAOI,OAAP,EAAe;AACX,WAAKF,OAAL,GAAeE,OAAf;AACA,aAAO,IAAP;AACH;;;;EA5BqBR,U;;AA8B1B,SAASE,WAAT","sourcesContent":["import { BaseSource } from \"../BaseSource\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n    constructor(remoteURL) {\n        super();\n        this._remoteURL = remoteURL;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        if (this._format) {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n}\nexport { FetchSource };\n"]},"metadata":{},"sourceType":"module"}