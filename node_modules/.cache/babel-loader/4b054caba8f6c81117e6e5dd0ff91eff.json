{"ast":null,"code":"import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass VectorizeEffectAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   * @description The number of colors. (Range: 2 to 30, Server default: 10)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  numOfColors(num) {\n    this._numOfColors = num;\n    return this;\n  }\n  /**\n   * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  detailsLevel(num) {\n    this._detailsLevel = num;\n    return this;\n  }\n  /**\n   * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  despeckleLevel(num) {\n    this._despeckleLevel = num;\n    return this;\n  }\n  /**\n   * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  cornersLevel(num) {\n    this._cornersLevel = num;\n    return this;\n  }\n  /**\n   * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n   * @param {number} num\n   * @return {this}\n   */\n\n\n  paths(num) {\n    this._paths = num;\n    return this;\n  }\n\n  prepareQualifiers() {\n    let str = 'vectorize';\n\n    if (this._numOfColors) {\n      str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n    }\n\n    if (this._detailsLevel) {\n      str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n    }\n\n    if (this._despeckleLevel) {\n      str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n    }\n\n    if (this._paths) {\n      str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n    }\n\n    if (this._cornersLevel) {\n      str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n    }\n\n    this.addQualifier(new Qualifier('e', str));\n  }\n\n}\n\nexport { VectorizeEffectAction };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/actions/effect/vectorize.js"],"names":["Action","Qualifier","QualifierValue","VectorizeEffectAction","constructor","numOfColors","num","_numOfColors","detailsLevel","_detailsLevel","despeckleLevel","_despeckleLevel","cornersLevel","_cornersLevel","paths","_paths","prepareQualifiers","str","toString","addQualifier"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAN,SAAoCH,MAApC,CAA2C;AACvCI,EAAAA,WAAW,GAAG;AACV;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,SAAKC,YAAL,GAAoBD,GAApB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,YAAY,CAACF,GAAD,EAAM;AACd,SAAKG,aAAL,GAAqBH,GAArB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,cAAc,CAACJ,GAAD,EAAM;AAChB,SAAKK,eAAL,GAAuBL,GAAvB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIM,EAAAA,YAAY,CAACN,GAAD,EAAM;AACd,SAAKO,aAAL,GAAqBP,GAArB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIQ,EAAAA,KAAK,CAACR,GAAD,EAAM;AACP,SAAKS,MAAL,GAAcT,GAAd;AACA,WAAO,IAAP;AACH;;AACDU,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,GAAG,GAAG,WAAV;;AACA,QAAI,KAAKV,YAAT,EAAuB;AACnBU,MAAAA,GAAG,IAAK,IAAG,IAAIf,cAAJ,CAAoB,UAAS,KAAKK,YAAa,EAA/C,EAAkDW,QAAlD,EAA6D,EAAxE;AACH;;AACD,QAAI,KAAKT,aAAT,EAAwB;AACpBQ,MAAAA,GAAG,IAAK,IAAG,IAAIf,cAAJ,CAAoB,UAAS,KAAKO,aAAc,EAAhD,EAAmDS,QAAnD,EAA8D,EAAzE;AACH;;AACD,QAAI,KAAKP,eAAT,EAA0B;AACtBM,MAAAA,GAAG,IAAK,IAAG,IAAIf,cAAJ,CAAoB,aAAY,KAAKS,eAAgB,EAArD,EAAwDO,QAAxD,EAAmE,EAA9E;AACH;;AACD,QAAI,KAAKH,MAAT,EAAiB;AACbE,MAAAA,GAAG,IAAK,IAAG,IAAIf,cAAJ,CAAoB,SAAQ,KAAKa,MAAO,EAAxC,EAA2CG,QAA3C,EAAsD,EAAjE;AACH;;AACD,QAAI,KAAKL,aAAT,EAAwB;AACpBI,MAAAA,GAAG,IAAK,IAAG,IAAIf,cAAJ,CAAoB,WAAU,KAAKW,aAAc,EAAjD,EAAoDK,QAApD,EAA+D,EAA1E;AACH;;AACD,SAAKC,YAAL,CAAkB,IAAIlB,SAAJ,CAAc,GAAd,EAAmBgB,GAAnB,CAAlB;AACH;;AAnEsC;;AAqE3C,SAASd,qBAAT","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\n     * @param {number | string} num\n     * @return {this}\n     */\n    numOfColors(num) {\n        this._numOfColors = num;\n        return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n    detailsLevel(num) {\n        this._detailsLevel = num;\n        return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n    despeckleLevel(num) {\n        this._despeckleLevel = num;\n        return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n    cornersLevel(num) {\n        this._cornersLevel = num;\n        return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n    paths(num) {\n        this._paths = num;\n        return this;\n    }\n    prepareQualifiers() {\n        let str = 'vectorize';\n        if (this._numOfColors) {\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n        }\n        if (this._detailsLevel) {\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n        }\n        if (this._despeckleLevel) {\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n        }\n        if (this._paths) {\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n        }\n        if (this._cornersLevel) {\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n}\nexport { VectorizeEffectAction };\n"]},"metadata":{},"sourceType":"module"}