{"ast":null,"code":"import { isBrowser } from \"../utils/isBrowser\";\n/**\n * @namespace\n * @description Loads an image once it is in a certain margin in the viewport. This includes vertical and horizontal scrolling.\n * @param rootMargin {string} The root element's bounding box before the intersection test is performed. Default: 0px.\n * @param threshold {number} The percentage of the image's visibility at which point the image should load. Default: 0.1 (10%).\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins=[(lazyload('0px', 0.25))]/>\n */\n\nexport function lazyload(rootMargin, threshold) {\n  return lazyloadPlugin.bind(null, rootMargin, threshold);\n}\n/**\n * @description lazyload plugin\n * @param rootMargin {string} The root element's bounding box before the intersection test is performed. Default: 0px.\n * @param threshold {number} The percentage of the image's visibility at which point the image should load. Default: 0.1 (10%).\n * @param element The image element.\n * @param element {HTMLImageElement} The image element.\n * @param cloudinaryImage {CloudinaryImage}\n * @param htmlPluginState {HtmlPluginState} Holds cleanup callbacks and event subscriptions.\n */\n\nfunction lazyloadPlugin(rootMargin, threshold, element, cloudinaryImage, htmlPluginState) {\n  if (rootMargin === void 0) {\n    rootMargin = '0px';\n  }\n\n  if (threshold === void 0) {\n    threshold = 0.1;\n  } // if SSR skip plugin\n\n\n  if (!isBrowser()) return false;\n  return new Promise(function (resolve) {\n    var onIntersect = function () {\n      return resolve();\n    };\n\n    var unobserve = detectIntersection(element, onIntersect, rootMargin, threshold);\n    htmlPluginState.cleanupCallbacks.push(function () {\n      unobserve();\n      resolve('canceled');\n    });\n  });\n}\n/**\n * Check if IntersectionObserver is supported\n * @return {boolean} true if window.IntersectionObserver is defined\n */\n\n\nfunction isIntersectionObserverSupported() {\n  // Check that 'IntersectionObserver' property is defined on window\n  return window && 'IntersectionObserver' in window;\n}\n/**\n * Calls onIntersect() to resolve when intersection is detected, or when\n * no native lazy loading or when IntersectionObserver isn't supported.\n * @param {Element} el - the element to observe\n * @param {function} onIntersect - called when the given element is in view\n * @param rootMargin {string} The root element's bounding box before the intersection test is performed. Default: 0px.\n * @param threshold {number} The percentage of the image's visibility at which point the image should load. Default: 0.1 (10%).\n */\n\n\nfunction detectIntersection(el, onIntersect, rootMargin, threshold) {\n  try {\n    if (!isIntersectionObserverSupported()) {\n      // Return if there's no need or possibility to detect intersection\n      onIntersect();\n      return;\n    } // Detect intersection with given element using IntersectionObserver\n\n\n    var observer_1 = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        if (entry.isIntersecting) {\n          observer_1.unobserve(entry.target);\n          onIntersect();\n        }\n      });\n    }, {\n      rootMargin: rootMargin,\n      threshold: threshold\n    });\n    observer_1.observe(el);\n    return function () {\n      el && observer_1.observe(el);\n    };\n  } catch (e) {\n    onIntersect();\n  }\n}","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/html/plugins/lazyload.js"],"names":["isBrowser","lazyload","rootMargin","threshold","lazyloadPlugin","bind","element","cloudinaryImage","htmlPluginState","Promise","resolve","onIntersect","unobserve","detectIntersection","cleanupCallbacks","push","isIntersectionObserverSupported","window","el","observer_1","IntersectionObserver","entries","forEach","entry","isIntersecting","target","observe","e"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,UAAlB,EAA8BC,SAA9B,EAAyC;AAC5C,SAAOC,cAAc,CAACC,IAAf,CAAoB,IAApB,EAA0BH,UAA1B,EAAsCC,SAAtC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBF,UAAxB,EAAoCC,SAApC,EAA+CG,OAA/C,EAAwDC,eAAxD,EAAyEC,eAAzE,EAA0F;AACtF,MAAIN,UAAU,KAAK,KAAK,CAAxB,EAA2B;AAAEA,IAAAA,UAAU,GAAG,KAAb;AAAqB;;AAClD,MAAIC,SAAS,KAAK,KAAK,CAAvB,EAA0B;AAAEA,IAAAA,SAAS,GAAG,GAAZ;AAAkB,GAFwC,CAGtF;;;AACA,MAAI,CAACH,SAAS,EAAd,EACI,OAAO,KAAP;AACJ,SAAO,IAAIS,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AAClC,QAAIC,WAAW,GAAG,YAAY;AAAE,aAAQD,OAAO,EAAf;AAAqB,KAArD;;AACA,QAAIE,SAAS,GAAGC,kBAAkB,CAACP,OAAD,EAAUK,WAAV,EAAuBT,UAAvB,EAAmCC,SAAnC,CAAlC;AACAK,IAAAA,eAAe,CAACM,gBAAhB,CAAiCC,IAAjC,CAAsC,YAAY;AAC9CH,MAAAA,SAAS;AACTF,MAAAA,OAAO,CAAC,UAAD,CAAP;AACH,KAHD;AAIH,GAPM,CAAP;AAQH;AACD;AACA;AACA;AACA;;;AACA,SAASM,+BAAT,GAA2C;AACvC;AACA,SAAOC,MAAM,IAAI,0BAA0BA,MAA3C;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASJ,kBAAT,CAA4BK,EAA5B,EAAgCP,WAAhC,EAA6CT,UAA7C,EAAyDC,SAAzD,EAAoE;AAChE,MAAI;AACA,QAAI,CAACa,+BAA+B,EAApC,EAAwC;AACpC;AACAL,MAAAA,WAAW;AACX;AACH,KALD,CAMA;;;AACA,QAAIQ,UAAU,GAAG,IAAIC,oBAAJ,CAAyB,UAAUC,OAAV,EAAmB;AACzDA,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAAUC,KAAV,EAAiB;AAC7B,YAAIA,KAAK,CAACC,cAAV,EAA0B;AACtBL,UAAAA,UAAU,CAACP,SAAX,CAAqBW,KAAK,CAACE,MAA3B;AACAd,UAAAA,WAAW;AACd;AACJ,OALD;AAMH,KAPgB,EAOd;AAAET,MAAAA,UAAU,EAAEA,UAAd;AAA0BC,MAAAA,SAAS,EAAEA;AAArC,KAPc,CAAjB;AAQAgB,IAAAA,UAAU,CAACO,OAAX,CAAmBR,EAAnB;AACA,WAAO,YAAY;AAAEA,MAAAA,EAAE,IAAIC,UAAU,CAACO,OAAX,CAAmBR,EAAnB,CAAN;AAA+B,KAApD;AACH,GAjBD,CAkBA,OAAOS,CAAP,EAAU;AACNhB,IAAAA,WAAW;AACd;AACJ","sourcesContent":["import { isBrowser } from \"../utils/isBrowser\";\n/**\n * @namespace\n * @description Loads an image once it is in a certain margin in the viewport. This includes vertical and horizontal scrolling.\n * @param rootMargin {string} The root element's bounding box before the intersection test is performed. Default: 0px.\n * @param threshold {number} The percentage of the image's visibility at which point the image should load. Default: 0.1 (10%).\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins=[(lazyload('0px', 0.25))]/>\n */\nexport function lazyload(rootMargin, threshold) {\n    return lazyloadPlugin.bind(null, rootMargin, threshold);\n}\n/**\n * @description lazyload plugin\n * @param rootMargin {string} The root element's bounding box before the intersection test is performed. Default: 0px.\n * @param threshold {number} The percentage of the image's visibility at which point the image should load. Default: 0.1 (10%).\n * @param element The image element.\n * @param element {HTMLImageElement} The image element.\n * @param cloudinaryImage {CloudinaryImage}\n * @param htmlPluginState {HtmlPluginState} Holds cleanup callbacks and event subscriptions.\n */\nfunction lazyloadPlugin(rootMargin, threshold, element, cloudinaryImage, htmlPluginState) {\n    if (rootMargin === void 0) { rootMargin = '0px'; }\n    if (threshold === void 0) { threshold = 0.1; }\n    // if SSR skip plugin\n    if (!isBrowser())\n        return false;\n    return new Promise(function (resolve) {\n        var onIntersect = function () { return (resolve()); };\n        var unobserve = detectIntersection(element, onIntersect, rootMargin, threshold);\n        htmlPluginState.cleanupCallbacks.push(function () {\n            unobserve();\n            resolve('canceled');\n        });\n    });\n}\n/**\n * Check if IntersectionObserver is supported\n * @return {boolean} true if window.IntersectionObserver is defined\n */\nfunction isIntersectionObserverSupported() {\n    // Check that 'IntersectionObserver' property is defined on window\n    return window && 'IntersectionObserver' in window;\n}\n/**\n * Calls onIntersect() to resolve when intersection is detected, or when\n * no native lazy loading or when IntersectionObserver isn't supported.\n * @param {Element} el - the element to observe\n * @param {function} onIntersect - called when the given element is in view\n * @param rootMargin {string} The root element's bounding box before the intersection test is performed. Default: 0px.\n * @param threshold {number} The percentage of the image's visibility at which point the image should load. Default: 0.1 (10%).\n */\nfunction detectIntersection(el, onIntersect, rootMargin, threshold) {\n    try {\n        if (!isIntersectionObserverSupported()) {\n            // Return if there's no need or possibility to detect intersection\n            onIntersect();\n            return;\n        }\n        // Detect intersection with given element using IntersectionObserver\n        var observer_1 = new IntersectionObserver(function (entries) {\n            entries.forEach(function (entry) {\n                if (entry.isIntersecting) {\n                    observer_1.unobserve(entry.target);\n                    onIntersect();\n                }\n            });\n        }, { rootMargin: rootMargin, threshold: threshold });\n        observer_1.observe(el);\n        return function () { el && observer_1.observe(el); };\n    }\n    catch (e) {\n        onIntersect();\n    }\n}\n"]},"metadata":{},"sourceType":"module"}