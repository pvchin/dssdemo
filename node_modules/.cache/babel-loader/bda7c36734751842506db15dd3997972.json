{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\PayRunTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport { Box, Divider, Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\";\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\nimport { useTable, useSortBy, useRowSelect } from \"react-table\";\nimport { formatPrice } from \"../helpers/Utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IndeterminateCheckbox = /*#__PURE__*/React.forwardRef(_c = _s(({\n  indeterminate,\n  ...rest\n}, ref) => {\n  _s();\n\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      ref: resolvedRef,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\"));\n_c2 = IndeterminateCheckbox;\nexport default function PayRunTable({\n  columns,\n  data\n}) {\n  _s2();\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n    state: {\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data\n  }, useSortBy, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [{\n      id: 'selection',\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this),\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...row.getToggleRowsSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this)\n    }, ...columns]);\n  });\n  return /*#__PURE__*/_jsxDEV(Table, {\n    border: \"1px solid black\",\n    colorScheme: \"whiteAlpha\",\n    variant: \"simple\",\n    ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(Thead, {\n      position: \"sticky\",\n      top: \"1\",\n      bgColor: \"blue.200\",\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(Tr, { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(Th, { ...column.getHeaderProps(column.getSortByToggleProps()),\n          isNumeric: column.isNumeric,\n          children: [column.render(\"Header\"), /*#__PURE__*/_jsxDEV(chakra.span, {\n            pl: \"4\",\n            children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(TriangleDownIcon, {\n              \"aria-label\": \"sorted descending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(TriangleUpIcon, {\n              \"aria-label\": \"sorted ascending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 23\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tbody, { ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(Tr, {\n          bgColor: \"gray.50\",\n          ...row.getRowProps(),\n          children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(Td, {\n            borderBottom: \"1px solid black\",\n            borderRight: \"1px solid black\",\n            bgColor: \"whiteAlpha.400\",\n            ...cell.getCellProps(),\n            isNumeric: cell.column.isNumeric,\n            children: cell.render(\"Cell\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(PayRunTable, \"tvz0/s/sW+g/rqR4gKSi+nZxBLs=\", false, function () {\n  return [useTable];\n});\n\n_c3 = PayRunTable;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c2, \"IndeterminateCheckbox\");\n$RefreshReg$(_c3, \"PayRunTable\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/PayRunTable.js"],"names":["React","useMemo","Box","Divider","Table","Thead","Tbody","Tr","Th","Td","chakra","TriangleDownIcon","TriangleUpIcon","useTable","useSortBy","useRowSelect","formatPrice","IndeterminateCheckbox","forwardRef","indeterminate","rest","ref","defaultRef","useRef","resolvedRef","useEffect","current","PayRunTable","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","state","selectedRowIds","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowsSelectedProps","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","isNumeric","render","isSorted","isSortedDesc","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Divider,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  chakra,\r\n} from \"@chakra-ui/react\";\r\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\r\nimport { useTable, useSortBy, useRowSelect } from \"react-table\";\r\nimport { formatPrice } from \"../helpers/Utils\";\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef()\r\n    const resolvedRef = ref || defaultRef\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate\r\n    }, [resolvedRef, indeterminate])\r\n\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n      </>\r\n    )\r\n  }\r\n)\r\n\r\nexport default function PayRunTable({ columns, data }) {\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, selectedFlatRows, state: {selectedRowIds} } =\r\n    useTable({ columns, data },\r\n      useSortBy,\r\n      useRowSelect,\r\n      hooks => {\r\n        hooks.visibleColumns.push(columns => [\r\n          {\r\n            id: 'selection',\r\n            Header: ({ getToggleAllRowsSelectedProps }) => (\r\n              <div>\r\n                <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n              </div>\r\n            ),\r\n            Cell: ({ row }) => (\r\n              <div>\r\n                <IndeterminateCheckbox { ...row.getToggleRowsSelectedProps()} />\r\n              </div>\r\n            ),\r\n          },\r\n          ...columns,\r\n        ])\r\n      }\r\n    \r\n    );\r\n\r\n  return (\r\n    <Table\r\n      border=\"1px solid black\"\r\n      colorScheme=\"whiteAlpha\"\r\n      variant=\"simple\"\r\n      {...getTableProps()}\r\n    >\r\n      <Thead position=\"sticky\" top=\"1\" bgColor=\"blue.200\">\r\n        {headerGroups.map((headerGroup) => (\r\n          <Tr  {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <Th\r\n                {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                isNumeric={column.isNumeric}\r\n              >\r\n                {column.render(\"Header\")}\r\n                <chakra.span pl=\"4\">\r\n                  {column.isSorted ? (\r\n                    column.isSortedDesc ? (\r\n                      <TriangleDownIcon aria-label=\"sorted descending\" />\r\n                    ) : (\r\n                      <TriangleUpIcon aria-label=\"sorted ascending\" />\r\n                    )\r\n                  ) : null}\r\n                </chakra.span>\r\n              </Th>\r\n            ))}\r\n          </Tr>\r\n        ))}\r\n      </Thead>\r\n\r\n      <Tbody {...getTableBodyProps()}>\r\n        {rows.map((row) => {\r\n          prepareRow(row);\r\n          return (\r\n            <Tr bgColor=\"gray.50\" {...row.getRowProps()}>\r\n              {row.cells.map((cell) => (\r\n                <Td\r\n                  borderBottom=\"1px solid black\"\r\n                  borderRight=\"1px solid black\"\r\n                  bgColor=\"whiteAlpha.400\"\r\n                  {...cell.getCellProps()}\r\n                  isNumeric={cell.column.isNumeric}\r\n                >\r\n                  {cell.render(\"Cell\")}\r\n                </Td>\r\n              ))}\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    </Table>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}