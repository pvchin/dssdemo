{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized)\n * is delivered with\n * an expected FPS level (helps with sync to audio).\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_transformation_reference#video_settings | Video settings}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n\nvar FPSRangeAction = /*#__PURE__*/function (_Action) {\n  _inherits(FPSRangeAction, _Action);\n\n  var _super = _createSuper(FPSRangeAction);\n\n  function FPSRangeAction(from, to) {\n    var _this;\n\n    _classCallCheck(this, FPSRangeAction);\n\n    _this = _super.call(this);\n    _this.from = from;\n    _this.to = to;\n    return _this;\n  }\n\n  _createClass(FPSRangeAction, [{\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var qualifierValue;\n\n      if (this.from && this.to) {\n        qualifierValue = new QualifierValue(\"\".concat(this.from, \"-\").concat(this.to));\n      } else {\n        qualifierValue = new QualifierValue(\"\".concat(this.from, \"-\"));\n      }\n\n      this.addQualifier(new Qualifier('fps', qualifierValue));\n      return this;\n    }\n  }]);\n\n  return FPSRangeAction;\n}(Action);\n\nexport default FPSRangeAction;","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/transcode/FPSRangeAction.js"],"names":["Action","Qualifier","QualifierValue","FPSRangeAction","from","to","qualifierValue","addQualifier"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,c;;;;;AACF,0BAAYC,IAAZ,EAAkBC,EAAlB,EAAsB;AAAA;;AAAA;;AAClB;AACA,UAAKD,IAAL,GAAYA,IAAZ;AACA,UAAKC,EAAL,GAAUA,EAAV;AAHkB;AAIrB;;;;WACD,6BAAoB;AAChB,UAAIC,cAAJ;;AACA,UAAI,KAAKF,IAAL,IAAa,KAAKC,EAAtB,EAA0B;AACtBC,QAAAA,cAAc,GAAG,IAAIJ,cAAJ,WAAsB,KAAKE,IAA3B,cAAmC,KAAKC,EAAxC,EAAjB;AACH,OAFD,MAGK;AACDC,QAAAA,cAAc,GAAG,IAAIJ,cAAJ,WAAsB,KAAKE,IAA3B,OAAjB;AACH;;AACD,WAAKG,YAAL,CAAkB,IAAIN,SAAJ,CAAc,KAAd,EAAqBK,cAArB,CAAlB;AACA,aAAO,IAAP;AACH;;;;EAhBwBN,M;;AAkB7B,eAAeG,cAAf","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized)\n * is delivered with\n * an expected FPS level (helps with sync to audio).\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_transformation_reference#video_settings | Video settings}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\nclass FPSRangeAction extends Action {\n    constructor(from, to) {\n        super();\n        this.from = from;\n        this.to = to;\n    }\n    prepareQualifiers() {\n        let qualifierValue;\n        if (this.from && this.to) {\n            qualifierValue = new QualifierValue(`${this.from}-${this.to}`);\n        }\n        else {\n            qualifierValue = new QualifierValue(`${this.from}-`);\n        }\n        this.addQualifier(new Qualifier('fps', qualifierValue));\n        return this;\n    }\n}\nexport default FPSRangeAction;\n"]},"metadata":{},"sourceType":"module"}