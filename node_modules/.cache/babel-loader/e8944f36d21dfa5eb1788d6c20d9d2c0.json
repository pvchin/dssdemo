{"ast":null,"code":"/**\n * Globalize v1.7.0\n *\n * https://github.com/globalizejs/globalize\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-08-02T11:53Z\n */\n\n/*!\n * Globalize v1.7.0 2021-08-02T11:53Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function (root, factory) {\n  // UMD returnExports\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"cldr\", \"../globalize\", \"./number\", \"./plural\"], factory);\n  } else if (typeof exports === \"object\") {\n    // Node, CommonJS\n    module.exports = factory(require(\"cldrjs\"), require(\"../globalize\"));\n  } else {\n    // Extend global\n    factory(root.Cldr, root.Globalize);\n  }\n})(this, function (Cldr, Globalize) {\n  var formatMessage = Globalize._formatMessage,\n      runtimeBind = Globalize._runtimeBind,\n      validateParameterPresence = Globalize._validateParameterPresence,\n      validateParameterTypePlainObject = Globalize._validateParameterTypePlainObject,\n      validateParameterTypeNumber = Globalize._validateParameterTypeNumber,\n      validateParameterTypeString = Globalize._validateParameterTypeString;\n  /**\n   * format( value, numberFormatter, pluralGenerator, unitProperies )\n   *\n   * @value [Number]\n   *\n   * @numberFormatter [Object]: A numberFormatter from Globalize.numberFormatter.\n   *\n   * @pluralGenerator [Object]: A pluralGenerator from Globalize.pluralGenerator.\n   *\n   * @unitProperies [Object]: localized unit data from cldr.\n   *\n   * Format units such as seconds, minutes, days, weeks, etc.\n   *\n   * OBS:\n   *\n   * Unit Sequences are not implemented.\n   * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#Unit_Sequences\n   *\n   * Duration Unit (for composed time unit durations) is not implemented.\n   * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#durationUnit\n   */\n\n  var unitFormat = function (value, numberFormatter, pluralGenerator, unitProperties) {\n    var compoundUnitPattern = unitProperties.compoundUnitPattern,\n        dividend,\n        dividendProperties,\n        formattedValue,\n        divisor,\n        divisorProperties,\n        message,\n        pluralValue,\n        oneProperty;\n    unitProperties = unitProperties.unitProperties;\n    formattedValue = numberFormatter(value);\n    pluralValue = pluralGenerator(value); // computed compound unit, eg. \"megabyte-per-second\".\n\n    if (unitProperties instanceof Array) {\n      dividendProperties = unitProperties[0];\n      divisorProperties = unitProperties[1];\n      oneProperty = divisorProperties.hasOwnProperty(\"one\") ? \"one\" : \"other\";\n      dividend = formatMessage(dividendProperties[pluralValue], [formattedValue]);\n      divisor = formatMessage(divisorProperties[oneProperty], [\"\"]).trim();\n      return formatMessage(compoundUnitPattern, [dividend, divisor]);\n    }\n\n    message = unitProperties[pluralValue];\n    return formatMessage(message, [formattedValue]);\n  };\n\n  var unitFormatterFn = function (numberFormatter, pluralGenerator, unitProperties) {\n    return function unitFormatter(value) {\n      validateParameterPresence(value, \"value\");\n      validateParameterTypeNumber(value, \"value\");\n      return unitFormat(value, numberFormatter, pluralGenerator, unitProperties);\n    };\n  };\n  /**\n   * categories()\n   *\n   * Return all unit categories.\n   */\n\n\n  var unitCategories = [\"acceleration\", \"angle\", \"area\", \"digital\", \"duration\", \"length\", \"mass\", \"power\", \"pressure\", \"speed\", \"temperature\", \"volume\"];\n\n  function stripPluralGarbage(data) {\n    var aux, pluralCount;\n\n    if (data) {\n      aux = {};\n\n      for (pluralCount in data) {\n        aux[pluralCount.replace(/unitPattern-count-/, \"\")] = data[pluralCount];\n      }\n    }\n\n    return aux;\n  }\n  /**\n   * get( unit, form, cldr )\n   *\n   * @unit [String] The full type-unit name (eg. duration-second), or the short unit name\n   * (eg. second).\n   *\n   * @form [String] A string describing the form of the unit representation (eg. long,\n   * short, narrow).\n   *\n   * @cldr [Cldr instance].\n   *\n   * Return the plural map of a unit, eg: \"second\"\n   * { \"one\": \"{0} second\",\n   *   \"other\": \"{0} seconds\" }\n   * }\n   *\n   * Or the Array of plural maps of a compound-unit, eg: \"foot-per-second\"\n   * [ { \"one\": \"{0} foot\",\n   *     \"other\": \"{0} feet\" },\n   *   { \"one\": \"{0} second\",\n   *     \"other\": \"{0} seconds\" } ]\n   *\n   * Uses the precomputed form of a compound-unit if available, eg: \"mile-per-hour\"\n   * { \"displayName\": \"miles per hour\",\n   *    \"unitPattern-count-one\": \"{0} mile per hour\",\n   *    \"unitPattern-count-other\": \"{0} miles per hour\"\n   * },\n   *\n   * Also supports \"/\" instead of \"-per-\", eg. \"foot/second\", using the precomputed form if\n   * available.\n   *\n   * Or the Array of plural maps of a compound-unit, eg: \"foot-per-second\"\n   * [ { \"one\": \"{0} foot\",\n   *     \"other\": \"{0} feet\" },\n   *   { \"one\": \"{0} second\",\n   *     \"other\": \"{0} seconds\" } ]\n   *\n   * Or undefined in case the unit (or a unit of the compound-unit) doesn't exist.\n   */\n\n\n  var get = function (unit, form, cldr) {\n    var ret; // Ensure that we get the 'precomputed' form, if present.\n\n    unit = unit.replace(/\\//, \"-per-\"); // Get unit or <category>-unit (eg. \"duration-second\").\n\n    [\"\"].concat(unitCategories).some(function (category) {\n      return ret = cldr.main([\"units\", form, category.length ? category + \"-\" + unit : unit]);\n    }); // Rename keys s/unitPattern-count-//g.\n\n    ret = stripPluralGarbage(ret); // Compound Unit, eg. \"foot-per-second\" or \"foot/second\".\n\n    if (!ret && /-per-/.test(unit)) {\n      // \"Some units already have 'precomputed' forms, such as kilometer-per-hour;\n      // where such units exist, they should be used in preference\" UTS#35.\n      // Note that precomputed form has already been handled above (!ret).\n      // Get both recursively.\n      unit = unit.split(\"-per-\");\n      ret = unit.map(function (unit) {\n        return get(unit, form, cldr);\n      });\n\n      if (!ret[0] || !ret[1]) {\n        return;\n      }\n    }\n\n    return ret;\n  };\n\n  var unitGet = get;\n  /**\n   * properties( unit, form, cldr )\n   *\n   * @unit [String] The full type-unit name (eg. duration-second), or the short unit name\n   * (eg. second).\n   *\n   * @form [String] A string describing the form of the unit representation (eg. long,\n   * short, narrow).\n   *\n   * @cldr [Cldr instance].\n   */\n\n  var unitProperties = function (unit, form, cldr) {\n    var compoundUnitPattern, unitProperties;\n    compoundUnitPattern = cldr.main([\"units\", form, \"per/compoundUnitPattern\"]);\n    unitProperties = unitGet(unit, form, cldr);\n    return {\n      compoundUnitPattern: compoundUnitPattern,\n      unitProperties: unitProperties\n    };\n  };\n  /**\n   * Globalize.formatUnit( value, unit, options )\n   *\n   * @value [Number]\n   *\n   * @unit [String]: The unit (e.g \"second\", \"day\", \"year\")\n   *\n   * @options [Object]\n   * - form: [String] \"long\", \"short\" (default), or \"narrow\".\n   *\n   * Format units such as seconds, minutes, days, weeks, etc.\n   */\n\n\n  Globalize.formatUnit = Globalize.prototype.formatUnit = function (value, unit, options) {\n    validateParameterPresence(value, \"value\");\n    validateParameterTypeNumber(value, \"value\");\n    return this.unitFormatter(unit, options)(value);\n  };\n  /**\n   * Globalize.unitFormatter( unit, options )\n   *\n   * @unit [String]: The unit (e.g \"second\", \"day\", \"year\")\n   *\n   * @options [Object]\n   * - form: [String] \"long\", \"short\" (default), or \"narrow\".\n   *\n   * - numberFormatter: [Function] a number formatter function. Defaults to Globalize\n   *   `.numberFormatter()` for the current locale using the default options.\n   */\n\n\n  Globalize.unitFormatter = Globalize.prototype.unitFormatter = function (unit, options) {\n    var args, form, numberFormatter, pluralGenerator, returnFn, properties;\n    validateParameterPresence(unit, \"unit\");\n    validateParameterTypeString(unit, \"unit\");\n    validateParameterTypePlainObject(options, \"options\");\n    options = options || {};\n    args = [unit, options];\n    form = options.form || \"long\";\n    properties = unitProperties(unit, form, this.cldr);\n    numberFormatter = options.numberFormatter || this.numberFormatter();\n    pluralGenerator = this.pluralGenerator();\n    returnFn = unitFormatterFn(numberFormatter, pluralGenerator, properties);\n    runtimeBind(args, this.cldr, returnFn, [numberFormatter, pluralGenerator, properties]);\n    return returnFn;\n  };\n\n  return Globalize;\n});","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/globalize/dist/globalize/unit.js"],"names":["root","factory","define","amd","exports","module","require","Cldr","Globalize","formatMessage","_formatMessage","runtimeBind","_runtimeBind","validateParameterPresence","_validateParameterPresence","validateParameterTypePlainObject","_validateParameterTypePlainObject","validateParameterTypeNumber","_validateParameterTypeNumber","validateParameterTypeString","_validateParameterTypeString","unitFormat","value","numberFormatter","pluralGenerator","unitProperties","compoundUnitPattern","dividend","dividendProperties","formattedValue","divisor","divisorProperties","message","pluralValue","oneProperty","Array","hasOwnProperty","trim","unitFormatterFn","unitFormatter","unitCategories","stripPluralGarbage","data","aux","pluralCount","replace","get","unit","form","cldr","ret","concat","some","category","main","length","test","split","map","unitGet","formatUnit","prototype","options","args","returnFn","properties"],"mappings":"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","sourcesContent":["/**\n * Globalize v1.7.0\n *\n * https://github.com/globalizejs/globalize\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2021-08-02T11:53Z\n */\n/*!\n * Globalize v1.7.0 2021-08-02T11:53Z Released under the MIT license\n * http://git.io/TrdQbw\n */\n(function( root, factory ) {\n\n\t// UMD returnExports\n\tif ( typeof define === \"function\" && define.amd ) {\n\n\t\t// AMD\n\t\tdefine([\n\t\t\t\"cldr\",\n\t\t\t\"../globalize\",\n\t\t\t\"./number\",\n\t\t\t\"./plural\"\n\t\t], factory );\n\t} else if ( typeof exports === \"object\" ) {\n\n\t\t// Node, CommonJS\n\t\tmodule.exports = factory( require( \"cldrjs\" ), require( \"../globalize\" ) );\n\t} else {\n\n\t\t// Extend global\n\t\tfactory( root.Cldr, root.Globalize );\n\t}\n}(this, function( Cldr, Globalize ) {\n\nvar formatMessage = Globalize._formatMessage,\n\truntimeBind = Globalize._runtimeBind,\n\tvalidateParameterPresence = Globalize._validateParameterPresence,\n\tvalidateParameterTypePlainObject = Globalize._validateParameterTypePlainObject,\n\tvalidateParameterTypeNumber = Globalize._validateParameterTypeNumber,\n\tvalidateParameterTypeString = Globalize._validateParameterTypeString;\n\n\n/**\n * format( value, numberFormatter, pluralGenerator, unitProperies )\n *\n * @value [Number]\n *\n * @numberFormatter [Object]: A numberFormatter from Globalize.numberFormatter.\n *\n * @pluralGenerator [Object]: A pluralGenerator from Globalize.pluralGenerator.\n *\n * @unitProperies [Object]: localized unit data from cldr.\n *\n * Format units such as seconds, minutes, days, weeks, etc.\n *\n * OBS:\n *\n * Unit Sequences are not implemented.\n * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#Unit_Sequences\n *\n * Duration Unit (for composed time unit durations) is not implemented.\n * http://www.unicode.org/reports/tr35/tr35-35/tr35-general.html#durationUnit\n */\nvar unitFormat = function( value, numberFormatter, pluralGenerator, unitProperties ) {\n\tvar compoundUnitPattern = unitProperties.compoundUnitPattern, dividend, dividendProperties,\n\t\tformattedValue, divisor, divisorProperties, message, pluralValue, oneProperty;\n\n\tunitProperties = unitProperties.unitProperties;\n\tformattedValue = numberFormatter( value );\n\tpluralValue = pluralGenerator( value );\n\n\t// computed compound unit, eg. \"megabyte-per-second\".\n\tif ( unitProperties instanceof Array ) {\n\t\tdividendProperties = unitProperties[ 0 ];\n\t\tdivisorProperties = unitProperties[ 1 ];\n\t\toneProperty = divisorProperties.hasOwnProperty( \"one\" ) ? \"one\" : \"other\";\n\n\t\tdividend = formatMessage( dividendProperties[ pluralValue ], [ formattedValue ] );\n\t\tdivisor = formatMessage( divisorProperties[ oneProperty ], [ \"\" ] ).trim();\n\n\t\treturn formatMessage( compoundUnitPattern, [ dividend, divisor ] );\n\t}\n\n\tmessage = unitProperties[ pluralValue ];\n\n\treturn formatMessage( message, [ formattedValue ] );\n};\n\n\n\n\nvar unitFormatterFn = function( numberFormatter, pluralGenerator, unitProperties ) {\n\treturn function unitFormatter( value ) {\n\t\tvalidateParameterPresence( value, \"value\" );\n\t\tvalidateParameterTypeNumber( value, \"value\" );\n\n\t\treturn unitFormat( value, numberFormatter, pluralGenerator, unitProperties );\n\t};\n\n};\n\n\n\n\n/**\n * categories()\n *\n * Return all unit categories.\n */\nvar unitCategories = [ \"acceleration\", \"angle\", \"area\", \"digital\", \"duration\", \"length\", \"mass\", \"power\",\n\"pressure\", \"speed\", \"temperature\", \"volume\" ];\n\n\n\n\nfunction stripPluralGarbage( data ) {\n\tvar aux, pluralCount;\n\n\tif ( data ) {\n\t\taux = {};\n\t\tfor ( pluralCount in data ) {\n\t\t\taux[ pluralCount.replace( /unitPattern-count-/, \"\" ) ] = data[ pluralCount ];\n\t\t}\n\t}\n\n\treturn aux;\n}\n\n/**\n * get( unit, form, cldr )\n *\n * @unit [String] The full type-unit name (eg. duration-second), or the short unit name\n * (eg. second).\n *\n * @form [String] A string describing the form of the unit representation (eg. long,\n * short, narrow).\n *\n * @cldr [Cldr instance].\n *\n * Return the plural map of a unit, eg: \"second\"\n * { \"one\": \"{0} second\",\n *   \"other\": \"{0} seconds\" }\n * }\n *\n * Or the Array of plural maps of a compound-unit, eg: \"foot-per-second\"\n * [ { \"one\": \"{0} foot\",\n *     \"other\": \"{0} feet\" },\n *   { \"one\": \"{0} second\",\n *     \"other\": \"{0} seconds\" } ]\n *\n * Uses the precomputed form of a compound-unit if available, eg: \"mile-per-hour\"\n * { \"displayName\": \"miles per hour\",\n *    \"unitPattern-count-one\": \"{0} mile per hour\",\n *    \"unitPattern-count-other\": \"{0} miles per hour\"\n * },\n *\n * Also supports \"/\" instead of \"-per-\", eg. \"foot/second\", using the precomputed form if\n * available.\n *\n * Or the Array of plural maps of a compound-unit, eg: \"foot-per-second\"\n * [ { \"one\": \"{0} foot\",\n *     \"other\": \"{0} feet\" },\n *   { \"one\": \"{0} second\",\n *     \"other\": \"{0} seconds\" } ]\n *\n * Or undefined in case the unit (or a unit of the compound-unit) doesn't exist.\n */\nvar get = function( unit, form, cldr ) {\n\tvar ret;\n\n\t// Ensure that we get the 'precomputed' form, if present.\n\tunit = unit.replace( /\\//, \"-per-\" );\n\n\t// Get unit or <category>-unit (eg. \"duration-second\").\n\t[ \"\" ].concat( unitCategories ).some(function( category ) {\n\t\treturn ret = cldr.main([\n\t\t\t\"units\",\n\t\t\tform,\n\t\t\tcategory.length ? category + \"-\" + unit : unit\n\t\t]);\n\t});\n\n\t// Rename keys s/unitPattern-count-//g.\n\tret = stripPluralGarbage( ret );\n\n\t// Compound Unit, eg. \"foot-per-second\" or \"foot/second\".\n\tif ( !ret && ( /-per-/ ).test( unit ) ) {\n\n\t\t// \"Some units already have 'precomputed' forms, such as kilometer-per-hour;\n\t\t// where such units exist, they should be used in preference\" UTS#35.\n\t\t// Note that precomputed form has already been handled above (!ret).\n\n\t\t// Get both recursively.\n\t\tunit = unit.split( \"-per-\" );\n\t\tret = unit.map(function( unit ) {\n\t\t\treturn get( unit, form, cldr );\n\t\t});\n\t\tif ( !ret[ 0 ] || !ret[ 1 ] ) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn ret;\n};\n\nvar unitGet = get;\n\n\n\n\n/**\n * properties( unit, form, cldr )\n *\n * @unit [String] The full type-unit name (eg. duration-second), or the short unit name\n * (eg. second).\n *\n * @form [String] A string describing the form of the unit representation (eg. long,\n * short, narrow).\n *\n * @cldr [Cldr instance].\n */\nvar unitProperties = function( unit, form, cldr ) {\n\tvar compoundUnitPattern, unitProperties;\n\n\tcompoundUnitPattern = cldr.main( [ \"units\", form, \"per/compoundUnitPattern\" ] );\n\tunitProperties = unitGet( unit, form, cldr );\n\n\treturn {\n\t\tcompoundUnitPattern: compoundUnitPattern,\n\t\tunitProperties: unitProperties\n\t};\n};\n\n\n\n\n/**\n * Globalize.formatUnit( value, unit, options )\n *\n * @value [Number]\n *\n * @unit [String]: The unit (e.g \"second\", \"day\", \"year\")\n *\n * @options [Object]\n * - form: [String] \"long\", \"short\" (default), or \"narrow\".\n *\n * Format units such as seconds, minutes, days, weeks, etc.\n */\nGlobalize.formatUnit =\nGlobalize.prototype.formatUnit = function( value, unit, options ) {\n\tvalidateParameterPresence( value, \"value\" );\n\tvalidateParameterTypeNumber( value, \"value\" );\n\n\treturn this.unitFormatter( unit, options )( value );\n};\n\n/**\n * Globalize.unitFormatter( unit, options )\n *\n * @unit [String]: The unit (e.g \"second\", \"day\", \"year\")\n *\n * @options [Object]\n * - form: [String] \"long\", \"short\" (default), or \"narrow\".\n *\n * - numberFormatter: [Function] a number formatter function. Defaults to Globalize\n *   `.numberFormatter()` for the current locale using the default options.\n */\nGlobalize.unitFormatter =\nGlobalize.prototype.unitFormatter = function( unit, options ) {\n\tvar args, form, numberFormatter, pluralGenerator, returnFn, properties;\n\n\tvalidateParameterPresence( unit, \"unit\" );\n\tvalidateParameterTypeString( unit, \"unit\" );\n\n\tvalidateParameterTypePlainObject( options, \"options\" );\n\n\toptions = options || {};\n\n\targs = [ unit, options ];\n\tform = options.form || \"long\";\n\tproperties = unitProperties( unit, form, this.cldr );\n\n\tnumberFormatter = options.numberFormatter || this.numberFormatter();\n\tpluralGenerator = this.pluralGenerator();\n\treturnFn = unitFormatterFn( numberFormatter, pluralGenerator, properties );\n\n\truntimeBind( args, this.cldr, returnFn, [ numberFormatter, pluralGenerator, properties ] );\n\n\treturn returnFn;\n};\n\nreturn Globalize;\n\n\n\n\n}));\n"]},"metadata":{},"sourceType":"script"}