{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description  Defines the video bitrate in bits per second.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control | Bitrate control}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n\nvar BitRateAction = /*#__PURE__*/function (_Action) {\n  _inherits(BitRateAction, _Action);\n\n  var _super = _createSuper(BitRateAction);\n\n  function BitRateAction(bitRate) {\n    var _this;\n\n    _classCallCheck(this, BitRateAction);\n\n    _this = _super.call(this);\n    _this.isConstant = false;\n    _this.bitRate = bitRate;\n    return _this;\n  }\n  /**\n   * @description video plays with a constant bitrate (CBR).\n   */\n\n\n  _createClass(BitRateAction, [{\n    key: \"constant\",\n    value: function constant() {\n      this.isConstant = true;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var qualifierValue;\n\n      if (this.isConstant) {\n        qualifierValue = new QualifierValue([this.bitRate, 'constant']).setDelimiter(':');\n      } else {\n        qualifierValue = new QualifierValue(this.bitRate);\n      }\n\n      this.addQualifier(new Qualifier('br', qualifierValue));\n      return this;\n    }\n  }]);\n\n  return BitRateAction;\n}(Action);\n\nexport default BitRateAction;","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/transcode/BitRateAction.js"],"names":["Action","Qualifier","QualifierValue","BitRateAction","bitRate","isConstant","qualifierValue","setDelimiter","addQualifier"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,a;;;;;AACF,yBAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB;AACA,UAAKC,UAAL,GAAkB,KAAlB;AACA,UAAKD,OAAL,GAAeA,OAAf;AAHiB;AAIpB;AACD;AACJ;AACA;;;;;WACI,oBAAW;AACP,WAAKC,UAAL,GAAkB,IAAlB;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAChB,UAAIC,cAAJ;;AACA,UAAI,KAAKD,UAAT,EAAqB;AACjBC,QAAAA,cAAc,GAAG,IAAIJ,cAAJ,CAAmB,CAAC,KAAKE,OAAN,EAAe,UAAf,CAAnB,EAA+CG,YAA/C,CAA4D,GAA5D,CAAjB;AACH,OAFD,MAGK;AACDD,QAAAA,cAAc,GAAG,IAAIJ,cAAJ,CAAmB,KAAKE,OAAxB,CAAjB;AACH;;AACD,WAAKI,YAAL,CAAkB,IAAIP,SAAJ,CAAc,IAAd,EAAoBK,cAApB,CAAlB;AACA,aAAO,IAAP;AACH;;;;EAvBuBN,M;;AAyB5B,eAAeG,aAAf","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description  Defines the video bitrate in bits per second.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control | Bitrate control}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\nclass BitRateAction extends Action {\n    constructor(bitRate) {\n        super();\n        this.isConstant = false;\n        this.bitRate = bitRate;\n    }\n    /**\n     * @description video plays with a constant bitrate (CBR).\n     */\n    constant() {\n        this.isConstant = true;\n        return this;\n    }\n    prepareQualifiers() {\n        let qualifierValue;\n        if (this.isConstant) {\n            qualifierValue = new QualifierValue([this.bitRate, 'constant']).setDelimiter(':');\n        }\n        else {\n            qualifierValue = new QualifierValue(this.bitRate);\n        }\n        this.addQualifier(new Qualifier('br', qualifierValue));\n        return this;\n    }\n}\nexport default BitRateAction;\n"]},"metadata":{},"sourceType":"module"}