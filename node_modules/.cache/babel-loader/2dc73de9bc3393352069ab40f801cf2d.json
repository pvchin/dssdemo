{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_improvement_effects | Image improvement effects}\n * @memberOf Actions.Adjust\n */\n\nvar ImproveAction = /*#__PURE__*/function (_Action) {\n  _inherits(ImproveAction, _Action);\n\n  var _super = _createSuper(ImproveAction);\n\n  function ImproveAction() {\n    _classCallCheck(this, ImproveAction);\n\n    return _super.call(this);\n  }\n  /**\n   *\n   * @description The improve mode.\n   * @param {Qualifiers.ImproveMode | string} value\n   */\n\n\n  _createClass(ImproveAction, [{\n    key: \"mode\",\n    value: function mode(value) {\n      this.modeValue = value;\n      return this;\n    }\n    /**\n     * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n     * @param {number} value\n     */\n\n  }, {\n    key: \"blend\",\n    value: function blend(value) {\n      this.blendValue = value;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n      this.addQualifier(new Qualifier('e', qualifierValue));\n      return this;\n    }\n  }]);\n\n  return ImproveAction;\n}(Action);\n\nexport { ImproveAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/adjust/ImproveAction.js"],"names":["Action","QualifierValue","Qualifier","ImproveAction","value","modeValue","blendValue","qualifierValue","setDelimiter","addQualifier"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA;AACA;AACA;AACA;AACA;;IACMC,a;;;;;AACF,2BAAc;AAAA;;AAAA;AAEb;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,cAAKC,KAAL,EAAY;AACR,WAAKC,SAAL,GAAiBD,KAAjB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,eAAMA,KAAN,EAAa;AACT,WAAKE,UAAL,GAAkBF,KAAlB;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAChB,UAAMG,cAAc,GAAG,IAAIN,cAAJ,CAAmB,CAAC,SAAD,EAAY,KAAKI,SAAjB,EAA4B,KAAKC,UAAjC,CAAnB,EAAiEE,YAAjE,CAA8E,GAA9E,CAAvB;AACA,WAAKC,YAAL,CAAkB,IAAIP,SAAJ,CAAc,GAAd,EAAmBK,cAAnB,CAAlB;AACA,aAAO,IAAP;AACH;;;;EAzBuBP,M;;AA2B5B,SAASG,aAAT","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Defines how to improve an image by automatically adjusting image colors, contrast and brightness.</br>\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#image_improvement_effects | Image improvement effects}\n * @memberOf Actions.Adjust\n */\nclass ImproveAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     *\n     * @description The improve mode.\n     * @param {Qualifiers.ImproveMode | string} value\n     */\n    mode(value) {\n        this.modeValue = value;\n        return this;\n    }\n    /**\n     * @description How much to blend the improved result with the original image, where 0 means only use the original and 100 means only use the improved result. (Range: 0 to 100, Server default: 100)\n     * @param {number} value\n     */\n    blend(value) {\n        this.blendValue = value;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue(['improve', this.modeValue, this.blendValue]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\nexport { ImproveAction };\n"]},"metadata":{},"sourceType":"module"}