{"ast":null,"code":"import { BaseSource } from \"../BaseSource\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\n\nclass FetchSource extends BaseSource {\n  constructor(remoteURL) {\n    super();\n    this._remoteURL = remoteURL;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  getOpenSourceString(layerType) {\n    if (this._format) {\n      return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n    } else {\n      return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n    }\n  }\n  /**\n   * @description\n   * Apply a format for the image source of the layer\n   * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n   * @returns {this}\n   */\n\n\n  format(format) {\n    this._format = format;\n    return this;\n  }\n\n}\n\nexport { FetchSource };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/FetchSource.js"],"names":["BaseSource","base64Encode","FetchSource","constructor","remoteURL","_remoteURL","getOpenSourceString","layerType","_format","toString","format"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,SAA0BF,UAA1B,CAAqC;AACjCG,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB;AACA,SAAKC,UAAL,GAAkBD,SAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,mBAAmB,CAACC,SAAD,EAAY;AAC3B,QAAI,KAAKC,OAAT,EAAkB;AACd,aAAQ,GAAED,SAAU,UAASN,YAAY,CAAC,KAAKI,UAAN,CAAkB,IAAG,KAAKG,OAAL,CAAaC,QAAb,EAAwB,EAAtF;AACH,KAFD,MAGK;AACD,aAAQ,GAAEF,SAAU,UAASN,YAAY,CAAC,KAAKI,UAAN,CAAkB,EAA3D;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,MAAM,CAACA,MAAD,EAAS;AACX,SAAKF,OAAL,GAAeE,MAAf;AACA,WAAO,IAAP;AACH;;AA5BgC;;AA8BrC,SAASR,WAAT","sourcesContent":["import { BaseSource } from \"../BaseSource\";\nimport { base64Encode } from \"../../../internal/utils/base64Encode\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines how to manipulate a Fetch layer\n * <div class=\"panel panel-warning\">\n *   <div class=\"panel-heading\">Notice</div>\n *   <div class=\"panel-body\">\n *     This class is used as a Qualifier for the asset.overlay() and asset.underlay() methods.</br>\n *     You can find regular images and videos transformations below:\n *   </div>\n  *   <ul>\n *     <li>{@link SDK.ImageTransformation| Image Transformations}</li>\n *     <li>{@link SDK.VideoTransformation| Video Transformations}</li>\n *   </ul>\n * </div>\n *\n * {@link https://cloudinary.com/documentation/fetch_remote_images|Learn more about fetching from a remote URL}\n */\nclass FetchSource extends BaseSource {\n    constructor(remoteURL) {\n        super();\n        this._remoteURL = remoteURL;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        if (this._format) {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}.${this._format.toString()}`;\n        }\n        else {\n            return `${layerType}_fetch:${base64Encode(this._remoteURL)}`;\n        }\n    }\n    /**\n     * @description\n     * Apply a format for the image source of the layer\n     * @param {FormatQualifier} format A to apply to the layered image, see more {@link Qualifiers.Format|here}\n     * @returns {this}\n     */\n    format(format) {\n        this._format = format;\n        return this;\n    }\n}\nexport { FetchSource };\n"]},"metadata":{},"sourceType":"module"}