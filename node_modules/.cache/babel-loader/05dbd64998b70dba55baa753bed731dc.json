{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Action } from \"../../internal/Action\";\n/**\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @extends SDK.Action\n * @memberOf {Actions.Effect}\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nvar ThemeEffect = /*#__PURE__*/function (_Action) {\n  _inherits(ThemeEffect, _Action);\n\n  var _super = _createSuper(ThemeEffect);\n\n  function ThemeEffect(color) {\n    var _this;\n\n    _classCallCheck(this, ThemeEffect);\n\n    _this = _super.call(this);\n    _this.effectName = 'theme';\n    _this.color = color;\n    return _this;\n  }\n  /**\n   * @description The sensitivity to photographic elements of an image.\n   *              A value of 0 treats the whole image as non-photographic.\n   *              A value of 200 treats the whole image as photographic, so no theme change is applied.\n   * @param {number} photosensitivity\n   * @return {this}\n   */\n\n\n  _createClass(ThemeEffect, [{\n    key: \"photosensitivity\",\n    value: function photosensitivity(_photosensitivity) {\n      this._photosensitivity = _photosensitivity;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var sensitivity = this._photosensitivity ? \":photosensitivity_\".concat(this._photosensitivity) : ''; // Replace # in hex colors (#fff -> fff)\n\n      var val = \"\".concat(this.effectName, \":color_\").concat(this.color.replace('#', '')).concat(sensitivity);\n      this.addQualifier(new Qualifier('e', new QualifierValue(val)));\n      return;\n    }\n  }]);\n\n  return ThemeEffect;\n}(Action);\n\nexport { ThemeEffect };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/effect/theme.js"],"names":["Qualifier","QualifierValue","Action","ThemeEffect","color","effectName","photosensitivity","_photosensitivity","sensitivity","val","replace","addQualifier"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,W;;;;;AACF,uBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf;AACA,UAAKC,UAAL,GAAkB,OAAlB;AACA,UAAKD,KAAL,GAAaA,KAAb;AAHe;AAIlB;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;WACI,0BAAiBE,iBAAjB,EAAmC;AAC/B,WAAKC,iBAAL,GAAyBD,iBAAzB;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAChB,UAAME,WAAW,GAAG,KAAKD,iBAAL,+BAA8C,KAAKA,iBAAnD,IAAyE,EAA7F,CADgB,CAEhB;;AACA,UAAME,GAAG,aAAM,KAAKJ,UAAX,oBAA+B,KAAKD,KAAL,CAAWM,OAAX,CAAmB,GAAnB,EAAwB,EAAxB,CAA/B,SAA6DF,WAA7D,CAAT;AACA,WAAKG,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,EAAmB,IAAIC,cAAJ,CAAmBQ,GAAnB,CAAnB,CAAlB;AACA;AACH;;;;EAvBqBP,M;;AAyB1B,SAASC,WAAT","sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Action } from \"../../internal/Action\";\n/**\n * @description Changes the main background color to the one specified, as if a 'theme change' was applied (e.g. dark mode vs light mode).\n * @extends SDK.Action\n * @memberOf {Actions.Effect}\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass ThemeEffect extends Action {\n    constructor(color) {\n        super();\n        this.effectName = 'theme';\n        this.color = color;\n    }\n    /**\n     * @description The sensitivity to photographic elements of an image.\n     *              A value of 0 treats the whole image as non-photographic.\n     *              A value of 200 treats the whole image as photographic, so no theme change is applied.\n     * @param {number} photosensitivity\n     * @return {this}\n     */\n    photosensitivity(photosensitivity) {\n        this._photosensitivity = photosensitivity;\n        return this;\n    }\n    prepareQualifiers() {\n        const sensitivity = this._photosensitivity ? `:photosensitivity_${this._photosensitivity}` : '';\n        // Replace # in hex colors (#fff -> fff)\n        const val = `${this.effectName}:color_${this.color.replace('#', '')}${sensitivity}`;\n        this.addQualifier(new Qualifier('e', new QualifierValue(val)));\n        return;\n    }\n}\nexport { ThemeEffect };\n"]},"metadata":{},"sourceType":"module"}