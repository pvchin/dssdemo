{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Class for shortening a video to the specified range.\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\n\nvar TrimAction = /*#__PURE__*/function (_Action) {\n  _inherits(TrimAction, _Action);\n\n  var _super = _createSuper(TrimAction);\n\n  function TrimAction() {\n    _classCallCheck(this, TrimAction);\n\n    return _super.call(this);\n  }\n  /**\n   *\n   * @description Support Percentages in values (30% -> 30p)\n   * @param {string|number} val\n   * @private\n   * @return {string}\n   */\n\n\n  _createClass(TrimAction, [{\n    key: \"parseVal\",\n    value: function parseVal(val) {\n      return typeof val === 'number' ? val : val.replace('%', 'p');\n    }\n    /**\n     * @description Sets the starting position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The starting position of the part of the video to keep. This can be specified as a\n     *                           float representing the time in seconds or a string representing the percentage of the\n     *                           video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n\n  }, {\n    key: \"startOffset\",\n    value: function startOffset(offset) {\n      return this.addQualifier(new Qualifier('so', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the end position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The end position of the part of the video to keep. This can be specified as a\n     *                         float representing the time in seconds or a string representing the percentage of the\n     *                         video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n\n  }, {\n    key: \"endOffset\",\n    value: function endOffset(offset) {\n      return this.addQualifier(new Qualifier('eo', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the duration of the video to keep.\n     *\n     * @param {string|number} duration The length of the part of the video to keep. This can be specified as a float\n     *                        representing the time in seconds or a string representing the percentage of the\n     *                        video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n\n  }, {\n    key: \"duration\",\n    value: function duration(_duration) {\n      return this.addQualifier(new Qualifier('du', this.parseVal(_duration)));\n    }\n  }]);\n\n  return TrimAction;\n}(Action);\n\nexport default TrimAction;","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/videoEdit/TrimAction.js"],"names":["Action","Qualifier","TrimAction","val","replace","offset","addQualifier","parseVal","duration"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,U;;;;;AACF,wBAAc;AAAA;;AAAA;AAEb;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;;WACI,kBAASC,GAAT,EAAc;AACV,aAAO,OAAOA,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCA,GAAG,CAACC,OAAJ,CAAY,GAAZ,EAAiB,GAAjB,CAAvC;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,qBAAYC,MAAZ,EAAoB;AAChB,aAAO,KAAKC,YAAL,CAAkB,IAAIL,SAAJ,CAAc,IAAd,EAAoB,KAAKM,QAAL,CAAcF,MAAd,CAApB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,mBAAUA,MAAV,EAAkB;AACd,aAAO,KAAKC,YAAL,CAAkB,IAAIL,SAAJ,CAAc,IAAd,EAAoB,KAAKM,QAAL,CAAcF,MAAd,CAApB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,kBAASG,SAAT,EAAmB;AACf,aAAO,KAAKF,YAAL,CAAkB,IAAIL,SAAJ,CAAc,IAAd,EAAoB,KAAKM,QAAL,CAAcC,SAAd,CAApB,CAAlB,CAAP;AACH;;;;EA9CoBR,M;;AAgDzB,eAAeE,UAAf","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Class for shortening a video to the specified range.\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass TrimAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     *\n     * @description Support Percentages in values (30% -> 30p)\n     * @param {string|number} val\n     * @private\n     * @return {string}\n     */\n    parseVal(val) {\n        return typeof val === 'number' ? val : val.replace('%', 'p');\n    }\n    /**\n     * @description Sets the starting position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The starting position of the part of the video to keep. This can be specified as a\n     *                           float representing the time in seconds or a string representing the percentage of the\n     *                           video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    startOffset(offset) {\n        return this.addQualifier(new Qualifier('so', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the end position of the part of the video to keep when trimming videos.\n     *\n     * @param {string|number} offset The end position of the part of the video to keep. This can be specified as a\n     *                         float representing the time in seconds or a string representing the percentage of the\n     *                         video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    endOffset(offset) {\n        return this.addQualifier(new Qualifier('eo', this.parseVal(offset)));\n    }\n    /**\n     * @description Sets the duration of the video to keep.\n     *\n     * @param {string|number} duration The length of the part of the video to keep. This can be specified as a float\n     *                        representing the time in seconds or a string representing the percentage of the\n     *                        video length (for example, \"30%\" or \"30p\").\n     * @return {this}\n     */\n    duration(duration) {\n        return this.addQualifier(new Qualifier('du', this.parseVal(duration)));\n    }\n}\nexport default TrimAction;\n"]},"metadata":{},"sourceType":"module"}