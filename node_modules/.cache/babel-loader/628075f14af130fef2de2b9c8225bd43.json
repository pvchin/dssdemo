{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../internal/Action\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue\";\nimport { regionRelative as _regionRelative, relative as _relative } from \"../../qualifiers/flag\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\n\nvar ResizeSimpleAction = /*#__PURE__*/function (_Action) {\n  _inherits(ResizeSimpleAction, _Action);\n\n  var _super = _createSuper(ResizeSimpleAction);\n\n  /**\n   * @param {string} cropType\n   * @param {number | string} cropWidth The required width of a transformed asset.\n   * @param {number | string} cropHeight The required height of a transformed asset.\n   */\n  function ResizeSimpleAction(cropType, cropWidth, cropHeight) {\n    var _this;\n\n    _classCallCheck(this, ResizeSimpleAction);\n\n    _this = _super.call(this);\n\n    if (cropWidth) {\n      _this.addQualifier(new Qualifier('w', cropWidth));\n    }\n\n    if (cropHeight) {\n      _this.addQualifier(new Qualifier('h', cropHeight));\n    }\n\n    _this.addQualifier(new Qualifier('c', cropType));\n\n    return _this;\n  }\n  /**\n   * @description Sets the height of the resize\n   * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n\n\n  _createClass(ResizeSimpleAction, [{\n    key: \"height\",\n    value: function height(x) {\n      return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n\n  }, {\n    key: \"width\",\n    value: function width(x) {\n      return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio |\n      * AspectRatio values}\n     * @param {number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n\n  }, {\n    key: \"aspectRatio\",\n    value: function aspectRatio(ratio) {\n      // toFloatAsString is used to ensure 1 turns into 1.0\n      if (ratio instanceof AspectRatioQualifierValue) {\n        return this.addQualifier(new Qualifier('ar', ratio));\n      }\n\n      if (typeof ratio === 'number' || typeof ratio === 'string') {\n        return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n      }\n\n      if (ratio instanceof FlagQualifier) {\n        return this.addFlag(ratio);\n      }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n\n  }, {\n    key: \"relative\",\n    value: function relative() {\n      return this.addFlag(_relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n\n  }, {\n    key: \"regionRelative\",\n    value: function regionRelative() {\n      return this.addFlag(_regionRelative());\n    }\n  }]);\n\n  return ResizeSimpleAction;\n}(Action);\n\nexport default ResizeSimpleAction;","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/resize/ResizeSimpleAction.js"],"names":["Qualifier","Action","toFloatAsString","AspectRatioQualifierValue","regionRelative","relative","FlagQualifier","ResizeSimpleAction","cropType","cropWidth","cropHeight","addQualifier","x","ratio","addFlag"],"mappings":";;;;AAAA,SAASA,SAAT,QAA0B,oCAA1B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,eAAT,QAAgC,sCAAhC;AACA,SAASC,yBAAT,QAA0C,wDAA1C;AACA,SAASC,cAAc,IAAdA,eAAT,EAAyBC,QAAQ,IAARA,SAAzB,QAAyC,uBAAzC;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,kB;;;;;AACF;AACJ;AACA;AACA;AACA;AACI,8BAAYC,QAAZ,EAAsBC,SAAtB,EAAiCC,UAAjC,EAA6C;AAAA;;AAAA;;AACzC;;AACA,QAAID,SAAJ,EAAe;AACX,YAAKE,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,EAAmBS,SAAnB,CAAlB;AACH;;AACD,QAAIC,UAAJ,EAAgB;AACZ,YAAKC,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,EAAmBU,UAAnB,CAAlB;AACH;;AACD,UAAKC,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,EAAmBQ,QAAnB,CAAlB;;AARyC;AAS5C;AACD;AACJ;AACA;AACA;;;;;WACI,gBAAOI,CAAP,EAAU;AACN,aAAO,KAAKD,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,EAAmBY,CAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,eAAMA,CAAN,EAAS;AACL,aAAO,KAAKD,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,EAAmBY,CAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,qBAAYC,KAAZ,EAAmB;AACf;AACA,UAAIA,KAAK,YAAYV,yBAArB,EAAgD;AAC5C,eAAO,KAAKQ,YAAL,CAAkB,IAAIX,SAAJ,CAAc,IAAd,EAAoBa,KAApB,CAAlB,CAAP;AACH;;AACD,UAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,OAAOA,KAAP,KAAiB,QAAlD,EAA4D;AACxD,eAAO,KAAKF,YAAL,CAAkB,IAAIX,SAAJ,CAAc,IAAd,EAAoBE,eAAe,CAACW,KAAD,CAAnC,CAAlB,CAAP;AACH;;AACD,UAAIA,KAAK,YAAYP,aAArB,EAAoC;AAChC,eAAO,KAAKQ,OAAL,CAAaD,KAAb,CAAP;AACH;AACJ;AACD;AACJ;AACA;AACA;;;;WACI,oBAAW;AACP,aAAO,KAAKC,OAAL,CAAaT,SAAQ,EAArB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,0BAAiB;AACb,aAAO,KAAKS,OAAL,CAAaV,eAAc,EAA3B,CAAP;AACH;;;;EA9D4BH,M;;AAgEjC,eAAeM,kBAAf","sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { Action } from \"../../internal/Action\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue\";\nimport { regionRelative, relative } from \"../../qualifiers/flag\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n    /**\n     * @param {string} cropType\n     * @param {number | string} cropWidth The required width of a transformed asset.\n     * @param {number | string} cropHeight The required height of a transformed asset.\n     */\n    constructor(cropType, cropWidth, cropHeight) {\n        super();\n        if (cropWidth) {\n            this.addQualifier(new Qualifier('w', cropWidth));\n        }\n        if (cropHeight) {\n            this.addQualifier(new Qualifier('h', cropHeight));\n        }\n        this.addQualifier(new Qualifier('c', cropType));\n    }\n    /**\n     * @description Sets the height of the resize\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    height(x) {\n        return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    width(x) {\n        return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio |\n      * AspectRatio values}\n     * @param {number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n    aspectRatio(ratio) {\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        if (ratio instanceof AspectRatioQualifierValue) {\n            return this.addQualifier(new Qualifier('ar', ratio));\n        }\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n        }\n        if (ratio instanceof FlagQualifier) {\n            return this.addFlag(ratio);\n        }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n    relative() {\n        return this.addFlag(relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n    regionRelative() {\n        return this.addFlag(regionRelative());\n    }\n}\nexport default ResizeSimpleAction;\n"]},"metadata":{},"sourceType":"module"}