{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Adjusts the fill light and blends the result with the original image.\n * @memberOf Actions.Adjust\n * @extends SDK.Action\n */\n\nvar FillLightAction = /*#__PURE__*/function (_Action) {\n  _inherits(FillLightAction, _Action);\n\n  var _super = _createSuper(FillLightAction);\n\n  function FillLightAction() {\n    _classCallCheck(this, FillLightAction);\n\n    return _super.call(this);\n  }\n  /**\n   * @description Sets the level of adjustment\n   * @param {number} lvl How much to blend the adjusted fill light, where 0 means only use the original and 100 means only use the adjusted fill light result. (Range: 0 to 100, Server default: 100)\n   */\n\n\n  _createClass(FillLightAction, [{\n    key: \"blend\",\n    value: function blend(_blend) {\n      this.lvl = _blend;\n      return this;\n    }\n    /**\n     * @description Sets the level of the bias\n     * @param {number} biasLvl The bias to apply to the fill light effect (Range: -100 to 100, Server default: 0).\n     */\n\n  }, {\n    key: \"bias\",\n    value: function bias(biasLvl) {\n      this.biasLvl = biasLvl;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var qualifierValue = new QualifierValue(['fill_light', this.lvl, this.biasLvl]).setDelimiter(':');\n      this.addQualifier(new Qualifier('e', qualifierValue));\n      return this;\n    }\n  }]);\n\n  return FillLightAction;\n}(Action);\n\nexport { FillLightAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/adjust/FillLightAction.js"],"names":["Action","QualifierValue","Qualifier","FillLightAction","blend","lvl","biasLvl","qualifierValue","setDelimiter","addQualifier"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA;AACA;AACA;AACA;AACA;;IACMC,e;;;;;AACF,6BAAc;AAAA;;AAAA;AAEb;AACD;AACJ;AACA;AACA;;;;;WACI,eAAMC,MAAN,EAAa;AACT,WAAKC,GAAL,GAAWD,MAAX;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,cAAKE,OAAL,EAAc;AACV,WAAKA,OAAL,GAAeA,OAAf;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAChB,UAAMC,cAAc,GAAG,IAAIN,cAAJ,CAAmB,CAAC,YAAD,EAAe,KAAKI,GAApB,EAAyB,KAAKC,OAA9B,CAAnB,EAA2DE,YAA3D,CAAwE,GAAxE,CAAvB;AACA,WAAKC,YAAL,CAAkB,IAAIP,SAAJ,CAAc,GAAd,EAAmBK,cAAnB,CAAlB;AACA,aAAO,IAAP;AACH;;;;EAxByBP,M;;AA0B9B,SAASG,eAAT","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description Adjusts the fill light and blends the result with the original image.\n * @memberOf Actions.Adjust\n * @extends SDK.Action\n */\nclass FillLightAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     * @description Sets the level of adjustment\n     * @param {number} lvl How much to blend the adjusted fill light, where 0 means only use the original and 100 means only use the adjusted fill light result. (Range: 0 to 100, Server default: 100)\n     */\n    blend(blend) {\n        this.lvl = blend;\n        return this;\n    }\n    /**\n     * @description Sets the level of the bias\n     * @param {number} biasLvl The bias to apply to the fill light effect (Range: -100 to 100, Server default: 0).\n     */\n    bias(biasLvl) {\n        this.biasLvl = biasLvl;\n        return this;\n    }\n    prepareQualifiers() {\n        const qualifierValue = new QualifierValue(['fill_light', this.lvl, this.biasLvl]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\nexport { FillLightAction };\n"]},"metadata":{},"sourceType":"module"}