{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\PaySummaryTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport { Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\";\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\nimport { useTable, useSortBy } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PaySummaryTable() {\n  _s();\n\n  const data = React.useMemo(() => [{\n    fromUnit: \"inches\",\n    toUnit: \"millimetres (mm)\",\n    factor: 25.4\n  }, {\n    fromUnit: \"feet\",\n    toUnit: \"centimetres (cm)\",\n    factor: 30.48\n  }, {\n    fromUnit: \"yards\",\n    toUnit: \"metres (m)\",\n    factor: 0.91444\n  }], []);\n  const columns = React.useMemo(() => [{\n    Header: \"To convert\",\n    accessor: \"fromUnit\"\n  }, {\n    Header: \"Into\",\n    accessor: \"toUnit\"\n  }, {\n    Header: \"Multiply by\",\n    accessor: \"factor\",\n    isNumeric: true\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  }, useSortBy);\n  return /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(Thead, {\n      children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(Tr, { ...headerGroup.getHeaderGroupProps(),\n        children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(Th, { ...column.getHeaderProps(column.getSortByToggleProps()),\n          isNumeric: column.isNumeric,\n          children: [column.render(\"Header\"), /*#__PURE__*/_jsxDEV(chakra.span, {\n            pl: \"4\",\n            children: column.isSorted ? column.isSortedDesc ? /*#__PURE__*/_jsxDEV(TriangleDownIcon, {\n              \"aria-label\": \"sorted descending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(TriangleUpIcon, {\n              \"aria-label\": \"sorted ascending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 23\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tbody, { ...getTableBodyProps(),\n      children: rows.map(row => {\n        prepareRow(row);\n        return /*#__PURE__*/_jsxDEV(Tr, { ...row.getRowProps(),\n          children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(Td, { ...cell.getCellProps(),\n            isNumeric: cell.column.isNumeric,\n            children: cell.render(\"Cell\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PaySummaryTable, \"2M+cEGJjZRLIqxt38XQe/AMxJJk=\", false, function () {\n  return [useTable];\n});\n\n_c = PaySummaryTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaySummaryTable\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/PaySummaryTable.js"],"names":["React","useMemo","Table","Thead","Tbody","Tr","Th","Td","chakra","TriangleDownIcon","TriangleUpIcon","useTable","useSortBy","PaySummaryTable","data","fromUnit","toUnit","factor","columns","Header","accessor","isNumeric","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { Table, Thead, Tbody, Tr, Th, Td, chakra } from \"@chakra-ui/react\";\r\nimport { TriangleDownIcon, TriangleUpIcon } from \"@chakra-ui/icons\";\r\nimport { useTable, useSortBy } from \"react-table\";\r\n\r\nexport default function PaySummaryTable() {\r\n  const data = React.useMemo(\r\n    () => [\r\n      {\r\n        fromUnit: \"inches\",\r\n        toUnit: \"millimetres (mm)\",\r\n        factor: 25.4,\r\n      },\r\n      {\r\n        fromUnit: \"feet\",\r\n        toUnit: \"centimetres (cm)\",\r\n        factor: 30.48,\r\n      },\r\n      {\r\n        fromUnit: \"yards\",\r\n        toUnit: \"metres (m)\",\r\n        factor: 0.91444,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"To convert\",\r\n        accessor: \"fromUnit\",\r\n      },\r\n      {\r\n        Header: \"Into\",\r\n        accessor: \"toUnit\",\r\n      },\r\n      {\r\n        Header: \"Multiply by\",\r\n        accessor: \"factor\",\r\n        isNumeric: true,\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =\r\n    useTable({ columns, data }, useSortBy);\r\n\r\n  return (\r\n    <Table {...getTableProps()}>\r\n      <Thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <Tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <Th\r\n                {...column.getHeaderProps(column.getSortByToggleProps())}\r\n                isNumeric={column.isNumeric}\r\n              >\r\n                {column.render(\"Header\")}\r\n                <chakra.span pl=\"4\">\r\n                  {column.isSorted ? (\r\n                    column.isSortedDesc ? (\r\n                      <TriangleDownIcon aria-label=\"sorted descending\" />\r\n                    ) : (\r\n                      <TriangleUpIcon aria-label=\"sorted ascending\" />\r\n                    )\r\n                  ) : null}\r\n                </chakra.span>\r\n              </Th>\r\n            ))}\r\n          </Tr>\r\n        ))}\r\n      </Thead>\r\n      <Tbody {...getTableBodyProps()}>\r\n        {rows.map((row) => {\r\n          prepareRow(row);\r\n          return (\r\n            <Tr {...row.getRowProps()}>\r\n              {row.cells.map((cell) => (\r\n                <Td {...cell.getCellProps()} isNumeric={cell.column.isNumeric}>\r\n                  {cell.render(\"Cell\")}\r\n                </Td>\r\n              ))}\r\n            </Tr>\r\n          );\r\n        })}\r\n      </Tbody>\r\n    </Table>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}