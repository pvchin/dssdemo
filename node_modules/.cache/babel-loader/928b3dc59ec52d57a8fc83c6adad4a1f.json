{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\dss\\\\src\\\\components\\\\OnLeavesView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { List, ListItem, ListItemText, Grid } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport axios from \"axios\";\nimport { useRecoilState } from \"recoil\";\nimport { loginLevelState } from \"./data/atomdata\";\nimport { onleaves_url } from \"../utils/constants\"; //\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst drawerWidth = 240;\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\"\n}, {\n  title: \"From Data\",\n  field: \"from_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"To Data\",\n  field: \"to_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}]; // export const onleavesdatastate = atom({\n//   key: \"onleavesdatastate\",\n//   default: [],\n// });\n// const fetchOnLeavesDetails = selector({\n//   key: \"onLeaveDetailsSelector\",\n//   get: async ({ get }) => {\n//     try {\n//       const { data } = await axios.get(onleaves_url);\n//       const onleavesdata = data;\n//       return data;\n//     } catch (error) {\n//       throw error;\n//     }\n//   },\n// });\n\nconst loadUsers = async () => {\n  const {\n    data\n  } = await axios.get(onleaves_url);\n  return data;\n}; //   await fetch(\"https://jsonplaceholder.typicode.com/users\")\n//     .then((res) => (res.ok ? res : Promise.reject(res)))\n//     .then((res) => res.json());\n\n\nconst OnLeavesView = () => {\n  _s();\n\n  const classes = useStyles(); //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n\n  const [setUserdata] = useState([]); //const [userdata, setUserdata] = useRecoilState(userdatastate);\n  //const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\n\n  return /*#__PURE__*/_jsxDEV(List, {\n    className: classes.roow,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OnLeavesView, \"HA3ocCd1oUiex59MIj/UecaWgo8=\", false, function () {\n  return [useStyles];\n});\n\n_c = OnLeavesView;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: \"2\"\n  },\n  paper: {\n    padding: theme.spacing(1),\n    //grid padding\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\nexport default OnLeavesView;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnLeavesView\");","map":{"version":3,"sources":["D:/react-myprojects/dss/src/components/OnLeavesView.js"],"names":["React","useState","useEffect","makeStyles","List","ListItem","ListItemText","Grid","clsx","axios","useRecoilState","loginLevelState","onleaves_url","drawerWidth","columns","title","field","editable","type","dateSetting","locale","loadUsers","data","get","OnLeavesView","classes","useStyles","setUserdata","roow","theme","root","padding","paper","spacing","textAlign","color","palette","text","secondary"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,YAAzB,EAAuCC,IAAvC,QAAmD,mBAAnD;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,SAASC,cAAT,QAA+B,QAA/B;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,YAAT,QAA6B,oBAA7B,C,CACA;;;AAEA,MAAMC,WAAW,GAAG,GAApB;AAEA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,KAAK,EAAE,MADT;AAEEC,EAAAA,KAAK,EAAE,MAFT;AAGEC,EAAAA,QAAQ,EAAE;AAHZ,CADc,EAMd;AACEF,EAAAA,KAAK,EAAE,WADT;AAEEC,EAAAA,KAAK,EAAE,WAFT;AAGEE,EAAAA,IAAI,EAAE,MAHR;AAIEC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAJf;AAKEH,EAAAA,QAAQ,EAAE;AALZ,CANc,EAad;AACEF,EAAAA,KAAK,EAAE,SADT;AAEEC,EAAAA,KAAK,EAAE,SAFT;AAGEE,EAAAA,IAAI,EAAE,MAHR;AAIEC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAJf;AAKEH,EAAAA,QAAQ,EAAE;AALZ,CAbc,CAAhB,C,CAsBA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMI,SAAS,GAAG,YAAY;AAC5B,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMb,KAAK,CAACc,GAAN,CAAUX,YAAV,CAAvB;AACA,SAAOU,IAAP;AACD,CAHD,C,CAIA;AACA;AACA;;;AAEA,MAAME,YAAY,GAAG,MAAM;AAAA;;AACzB,QAAMC,OAAO,GAAGC,SAAS,EAAzB,CADyB,CAEzB;;AACA,QAAM,CAACC,WAAD,IAAgB1B,QAAQ,CAAC,EAAD,CAA9B,CAHyB,CAKzB;AACA;;AAGA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAEwB,OAAO,CAACG,IAAzB;AAAA,2BACE,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA9BD;;GAAMJ,Y;UACYE,S;;;KADZF,Y;AAgCN,MAAME,SAAS,GAAGvB,UAAU,CAAE0B,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE;AADL,GADiC;AAKvCC,EAAAA,KAAK,EAAE;AACLD,IAAAA,OAAO,EAAEF,KAAK,CAACI,OAAN,CAAc,CAAd,CADJ;AACsB;AAC3BC,IAAAA,SAAS,EAAE,QAFN;AAGLC,IAAAA,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAcC,IAAd,CAAmBC;AAHrB;AALgC,CAAZ,CAAD,CAA5B;AAYA,eAAed,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { List, ListItem, ListItemText, Grid } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport axios from \"axios\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { onleaves_url } from \"../utils/constants\";\r\n//\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Data\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Data\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n];\r\n\r\n// export const onleavesdatastate = atom({\r\n//   key: \"onleavesdatastate\",\r\n//   default: [],\r\n// });\r\n\r\n// const fetchOnLeavesDetails = selector({\r\n//   key: \"onLeaveDetailsSelector\",\r\n//   get: async ({ get }) => {\r\n//     try {\r\n//       const { data } = await axios.get(onleaves_url);\r\n//       const onleavesdata = data;\r\n\r\n//       return data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   },\r\n// });\r\n\r\nconst loadUsers = async () => {\r\n  const { data } = await axios.get(onleaves_url);\r\n  return data;\r\n};\r\n//   await fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n//     .then((res) => (res.ok ? res : Promise.reject(res)))\r\n//     .then((res) => res.json());\r\n\r\nconst OnLeavesView = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  const [setUserdata] = useState([]);\r\n\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  //const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\r\n  \r\n  \r\n  return (\r\n    <List className={classes.roow}>\r\n      <Grid container direction=\"row\">\r\n        {/* {data.map((row) => {\r\n          return (\r\n            <ListItem key={row.id}>\r\n              <Grid item sm={4} align=\"center\">\r\n                <ListItemText>{row.name}</ListItemText>\r\n              </Grid>\r\n              <Grid item sm={4} align=\"center\">\r\n                <ListItemText>{row.from_date}</ListItemText>\r\n              </Grid>\r\n              <Grid item sm={4} align=\"center\">\r\n                <ListItemText>{row.to_date}</ListItemText>\r\n              </Grid>\r\n            </ListItem>\r\n          );\r\n        })} */}\r\n      </Grid>\r\n    </List>\r\n  );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"2\",\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1), //grid padding\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default OnLeavesView;\r\n"]},"metadata":{},"sourceType":"module"}