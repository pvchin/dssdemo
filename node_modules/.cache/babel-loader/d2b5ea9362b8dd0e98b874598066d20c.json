{"ast":null,"code":"import BitRateAction from \"./transcode/BitRateAction\";\nimport AudioCodecAction from \"./transcode/AudioCodecAction\";\nimport AudioFrequencyAction from \"./transcode/AudioFrequencyAction\";\nimport FPSAction from \"./transcode/FPSAction\";\nimport FPSRangeAction from \"./transcode/FPSRangeAction\";\nimport KeyframeIntervalsAction from \"./transcode/KeyframeIntervalsAction\";\nimport StreamingProfileAction from \"./transcode/StreamingProfile\";\nimport ToAnimatedAction from \"./transcode/ToAnimatedAction\";\nimport { VideoCodecAction } from \"./transcode/VideoCodecAction\";\n/**\n * @description Defines how to transcode a video to another format\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats | Transcoding video to other formats}\n * @memberOf Actions\n * @namespace Transcode\n * @example\n * // See examples under each method\n */\n\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio sample frequency.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control | Audio frequency control}\n * @param {string|number} freq The audio frequency.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {FREQ11025} from '@cloudinary/base/qualifiers/audioFrequency'\n * import {audioFrequency} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode(audioFrequency(FREQ11025()))\n * @return {Actions.Transcode.AudioFrequencyAction}\n *\n */\n\nfunction audioFrequency(freq) {\n  return new AudioFrequencyAction(freq);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio codec or removes the audio channel.\n * @param {string} codec The audio codec or \"none\".\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {aac} from '@cloudinary/base/qualifiers/audioCodec'\n * import {audioCodec} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( audioCodec( aac() ) );\n * @return {Actions.Transcode.AudioCodecAction}\n */\n\n\nfunction audioCodec(codec) {\n  return new AudioCodecAction(codec);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video bitrate.\n * Supported codecs: h264, h265 (MPEG-4); vp8, vp9 (WebM).\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control | Bitrate control}\n *\n * @param {string|number}  bitRate The number of bits used to represent the video data per second. By default the video\n *                             uses a variable bitrate (VBR), with this value indicating the maximum bitrate.\n *                             The value can be an integer e.g. 120000, or a string supporting \"k\" and \"m\"\n *                             (kilobits and megabits respectively) e.g. 250k or 2m.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {bitRate} from '@cloudinary/base/actions/transcode'\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( bitRate(500).constant() );\n * @return {Actions.Transcode.BitRateAction}\n */\n\n\nfunction bitRate(bitRate) {\n  return new BitRateAction(bitRate);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @param {number} from frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {fps} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fps(15) );\n * @return {Actions.Transcode.FPSAction}\n */\n\n\nfunction fps(from) {\n  return new FPSAction(from);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized) is\n * delivered with an expected FPS level (helps with sync to audio).\n * @param {number} from frame rate\n * @param {number} to frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {fpsRange} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fpsRange( 20, 25 ) );\n * @return {Actions.Transcode.FPSRangeAction}\n */\n\n\nfunction fpsRange(from, to) {\n  return new FPSRangeAction(from, to);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the keyframe interval of the delivered video.\n * @param {number | string} interval The keyframe interval in seconds.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {keyframeInterval} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( keyframeInterval( 0.5 ) );\n * @return {Actions.Transcode.KeyframeIntervalsAction}\n */\n\n\nfunction keyframeInterval(interval) {\n  return new KeyframeIntervalsAction(interval);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the streaming profile to apply to an HLS or MPEG-DASH adaptive bitrate streaming video.\n * The value can be one of the pre-defined streaming profiles or a custom-defined one.\n * You can use the streaming profiles methods of StreamingProfilesTrait to get a list of the available streaming\n * profiles or to create new custom profiles.\n * @param {string} profile The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {fullHd} from \"@cloudinary/base/qualifiers/streamingProfile\";\n * import {streamingProfile} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( streamingProfile( fullHd() ) );\n * @return {Actions.Transcode.StreamingProfileAction}\n */\n\n\nfunction streamingProfile(profile) {\n  return new StreamingProfileAction(profile);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Converts a video to animated image.\n * @param {string} animatedFormat The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {gif} from '@cloudinary/base/qualifiers/animatedFormat'\n * import {toAnimated} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( toAnimated( gif() ) );\n * @return {Actions.Transcode.ToAnimatedAction}\n */\n\n\nfunction toAnimated(animatedFormat) {\n  return new ToAnimatedAction(animatedFormat);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video codec.\n * @param {Qualifiers.VideoCodec.VideoCodecType | Qualifiers.VideoCodec.AdvVideoCodecType} videoCodecType CodecType\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {vp9} from '@cloudinary/base/qualifiers/videoCodec'\n * import {videoCodec} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( videoCodec( vp9() ) );\n * @return {Actions.Transcode.VideoCodecAction}\n */\n\n\nfunction videoCodec(videoCodecType) {\n  return new VideoCodecAction(videoCodecType);\n}\n\nvar Transcode = {\n  bitRate: bitRate,\n  audioCodec: audioCodec,\n  audioFrequency: audioFrequency,\n  fps: fps,\n  fpsRange: fpsRange,\n  keyframeInterval: keyframeInterval,\n  streamingProfile: streamingProfile,\n  toAnimated: toAnimated,\n  videoCodec: videoCodec\n};\nexport { Transcode, bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/transcode.js"],"names":["BitRateAction","AudioCodecAction","AudioFrequencyAction","FPSAction","FPSRangeAction","KeyframeIntervalsAction","StreamingProfileAction","ToAnimatedAction","VideoCodecAction","audioFrequency","freq","audioCodec","codec","bitRate","fps","from","fpsRange","to","keyframeInterval","interval","streamingProfile","profile","toAnimated","animatedFormat","videoCodec","videoCodecType","Transcode"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,2BAA1B;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,uBAAP,MAAoC,qCAApC;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8B;AAC1B,SAAO,IAAIR,oBAAJ,CAAyBQ,IAAzB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACvB,SAAO,IAAIX,gBAAJ,CAAqBW,KAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiBA,OAAjB,EAA0B;AACtB,SAAO,IAAIb,aAAJ,CAAkBa,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,GAAT,CAAaC,IAAb,EAAmB;AACf,SAAO,IAAIZ,SAAJ,CAAcY,IAAd,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,CAAkBD,IAAlB,EAAwBE,EAAxB,EAA4B;AACxB,SAAO,IAAIb,cAAJ,CAAmBW,IAAnB,EAAyBE,EAAzB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;AAChC,SAAO,IAAId,uBAAJ,CAA4Bc,QAA5B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AAC/B,SAAO,IAAIf,sBAAJ,CAA2Be,OAA3B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,cAApB,EAAoC;AAChC,SAAO,IAAIhB,gBAAJ,CAAqBgB,cAArB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,UAAT,CAAoBC,cAApB,EAAoC;AAChC,SAAO,IAAIjB,gBAAJ,CAAqBiB,cAArB,CAAP;AACH;;AACD,IAAMC,SAAS,GAAG;AAAEb,EAAAA,OAAO,EAAPA,OAAF;AAAWF,EAAAA,UAAU,EAAVA,UAAX;AAAuBF,EAAAA,cAAc,EAAdA,cAAvB;AAAuCK,EAAAA,GAAG,EAAHA,GAAvC;AAA4CE,EAAAA,QAAQ,EAARA,QAA5C;AAAsDE,EAAAA,gBAAgB,EAAhBA,gBAAtD;AAAwEE,EAAAA,gBAAgB,EAAhBA,gBAAxE;AAA0FE,EAAAA,UAAU,EAAVA,UAA1F;AAAsGE,EAAAA,UAAU,EAAVA;AAAtG,CAAlB;AACA,SAASE,SAAT,EAAoBb,OAApB,EAA6BF,UAA7B,EAAyCF,cAAzC,EAAyDK,GAAzD,EAA8DE,QAA9D,EAAwEE,gBAAxE,EAA0FE,gBAA1F,EAA4GE,UAA5G,EAAwHE,UAAxH","sourcesContent":["import BitRateAction from \"./transcode/BitRateAction\";\nimport AudioCodecAction from \"./transcode/AudioCodecAction\";\nimport AudioFrequencyAction from \"./transcode/AudioFrequencyAction\";\nimport FPSAction from \"./transcode/FPSAction\";\nimport FPSRangeAction from \"./transcode/FPSRangeAction\";\nimport KeyframeIntervalsAction from \"./transcode/KeyframeIntervalsAction\";\nimport StreamingProfileAction from \"./transcode/StreamingProfile\";\nimport ToAnimatedAction from \"./transcode/ToAnimatedAction\";\nimport { VideoCodecAction } from \"./transcode/VideoCodecAction\";\n/**\n * @description Defines how to transcode a video to another format\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats | Transcoding video to other formats}\n * @memberOf Actions\n * @namespace Transcode\n * @example\n * // See examples under each method\n */\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio sample frequency.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#audio_frequency_control | Audio frequency control}\n * @param {string|number} freq The audio frequency.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {FREQ11025} from '@cloudinary/base/qualifiers/audioFrequency'\n * import {audioFrequency} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode(audioFrequency(FREQ11025()))\n * @return {Actions.Transcode.AudioFrequencyAction}\n *\n */\nfunction audioFrequency(freq) {\n    return new AudioFrequencyAction(freq);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the audio codec or removes the audio channel.\n * @param {string} codec The audio codec or \"none\".\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {aac} from '@cloudinary/base/qualifiers/audioCodec'\n * import {audioCodec} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( audioCodec( aac() ) );\n * @return {Actions.Transcode.AudioCodecAction}\n */\nfunction audioCodec(codec) {\n    return new AudioCodecAction(codec);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video bitrate.\n * Supported codecs: h264, h265 (MPEG-4); vp8, vp9 (WebM).\n *\n * <b>Learn more:</b>\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control | Bitrate control}\n *\n * @param {string|number}  bitRate The number of bits used to represent the video data per second. By default the video\n *                             uses a variable bitrate (VBR), with this value indicating the maximum bitrate.\n *                             The value can be an integer e.g. 120000, or a string supporting \"k\" and \"m\"\n *                             (kilobits and megabits respectively) e.g. 250k or 2m.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {bitRate} from '@cloudinary/base/actions/transcode'\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( bitRate(500).constant() );\n * @return {Actions.Transcode.BitRateAction}\n */\nfunction bitRate(bitRate) {\n    return new BitRateAction(bitRate);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @param {number} from frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {fps} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fps(15) );\n * @return {Actions.Transcode.FPSAction}\n */\nfunction fps(from) {\n    return new FPSAction(from);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the range of acceptable FPS (Frames Per Second) to ensure that video (even when optimized) is\n * delivered with an expected FPS level (helps with sync to audio).\n * @param {number} from frame rate\n * @param {number} to frame rate\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {fpsRange} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( fpsRange( 20, 25 ) );\n * @return {Actions.Transcode.FPSRangeAction}\n */\nfunction fpsRange(from, to) {\n    return new FPSRangeAction(from, to);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the keyframe interval of the delivered video.\n * @param {number | string} interval The keyframe interval in seconds.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {keyframeInterval} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( keyframeInterval( 0.5 ) );\n * @return {Actions.Transcode.KeyframeIntervalsAction}\n */\nfunction keyframeInterval(interval) {\n    return new KeyframeIntervalsAction(interval);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Sets the streaming profile to apply to an HLS or MPEG-DASH adaptive bitrate streaming video.\n * The value can be one of the pre-defined streaming profiles or a custom-defined one.\n * You can use the streaming profiles methods of StreamingProfilesTrait to get a list of the available streaming\n * profiles or to create new custom profiles.\n * @param {string} profile The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {fullHd} from \"@cloudinary/base/qualifiers/streamingProfile\";\n * import {streamingProfile} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( streamingProfile( fullHd() ) );\n * @return {Actions.Transcode.StreamingProfileAction}\n */\nfunction streamingProfile(profile) {\n    return new StreamingProfileAction(profile);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Converts a video to animated image.\n * @param {string} animatedFormat The streaming profile.\n * @example\n * import {Cloudinary} from \"@cloudinary/base/instance/Cloudinary\";\n * import {gif} from '@cloudinary/base/qualifiers/animatedFormat'\n * import {toAnimated} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( toAnimated( gif() ) );\n * @return {Actions.Transcode.ToAnimatedAction}\n */\nfunction toAnimated(animatedFormat) {\n    return new ToAnimatedAction(animatedFormat);\n}\n/**\n * @summary action\n * @memberOf Actions.Transcode\n * @description Controls the video codec.\n * @param {Qualifiers.VideoCodec.VideoCodecType | Qualifiers.VideoCodec.AdvVideoCodecType} videoCodecType CodecType\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {vp9} from '@cloudinary/base/qualifiers/videoCodec'\n * import {videoCodec} from '@cloudinary/base/actions/transcode'\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.transcode( videoCodec( vp9() ) );\n * @return {Actions.Transcode.VideoCodecAction}\n */\nfunction videoCodec(videoCodecType) {\n    return new VideoCodecAction(videoCodecType);\n}\nconst Transcode = { bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\nexport { Transcode, bitRate, audioCodec, audioFrequency, fps, fpsRange, keyframeInterval, streamingProfile, toAnimated, videoCodec };\n"]},"metadata":{},"sourceType":"module"}