{"ast":null,"code":"import { BaseSource } from \"../BaseSource\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters\";\nimport { Action } from \"../../../internal/Action\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\n\nclass BaseTextSource extends BaseSource {\n  constructor(text, textStyle) {\n    super();\n    this.type = 'text';\n    this.text = text;\n    this._textStyle = textStyle;\n  }\n\n  encodeText(text) {\n    return serializeCloudinaryCharacters(text);\n  }\n\n  textColor(color) {\n    this._textColor = color;\n    return this;\n  }\n\n  backgroundColor(bgColor) {\n    this._backgroundColor = bgColor;\n    return this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  getOpenSourceString(layerType) {\n    const layerParam = [this.type, this._textStyle && this._textStyle.toString(), this.encodeText(this.text)].filter(a => a).join(':');\n    const tmpAction = new Action();\n    tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n    this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n    this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n    return tmpAction.toString();\n  }\n\n}\n\nexport { BaseTextSource };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/BaseTextSource.js"],"names":["BaseSource","serializeCloudinaryCharacters","Action","Qualifier","prepareColor","BaseTextSource","constructor","text","textStyle","type","_textStyle","encodeText","textColor","color","_textColor","backgroundColor","bgColor","_backgroundColor","getOpenSourceString","layerType","layerParam","toString","filter","a","join","tmpAction","addQualifier"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,6BAAT,QAA8C,uDAA9C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAN,SAA6BL,UAA7B,CAAwC;AACpCM,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkB;AACzB;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,UAAL,GAAkBF,SAAlB;AACH;;AACDG,EAAAA,UAAU,CAACJ,IAAD,EAAO;AACb,WAAON,6BAA6B,CAACM,IAAD,CAApC;AACH;;AACDK,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,SAAKC,UAAL,GAAkBD,KAAlB;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,eAAe,CAACC,OAAD,EAAU;AACrB,SAAKC,gBAAL,GAAwBD,OAAxB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,mBAAmB,CAACC,SAAD,EAAY;AAC3B,UAAMC,UAAU,GAAG,CACf,KAAKX,IADU,EAEf,KAAKC,UAAL,IAAmB,KAAKA,UAAL,CAAgBW,QAAhB,EAFJ,EAGf,KAAKV,UAAL,CAAgB,KAAKJ,IAArB,CAHe,EAIjBe,MAJiB,CAITC,CAAD,IAAOA,CAJG,EAIAC,IAJA,CAIK,GAJL,CAAnB;AAKA,UAAMC,SAAS,GAAG,IAAIvB,MAAJ,EAAlB;AACAuB,IAAAA,SAAS,CAACC,YAAV,CAAuB,IAAIvB,SAAJ,CAAcgB,SAAd,EAAyBC,UAAzB,CAAvB;AACA,SAAKN,UAAL,IAAmBW,SAAS,CAACC,YAAV,CAAuB,IAAIvB,SAAJ,CAAc,IAAd,EAAoBC,YAAY,CAAC,KAAKU,UAAN,CAAhC,CAAvB,CAAnB;AACA,SAAKG,gBAAL,IAAyBQ,SAAS,CAACC,YAAV,CAAuB,IAAIvB,SAAJ,CAAc,GAAd,EAAmBC,YAAY,CAAC,KAAKa,gBAAN,CAA/B,CAAvB,CAAzB;AACA,WAAOQ,SAAS,CAACJ,QAAV,EAAP;AACH;;AAnCmC;;AAqCxC,SAAShB,cAAT","sourcesContent":["import { BaseSource } from \"../BaseSource\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters\";\nimport { Action } from \"../../../internal/Action\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\nclass BaseTextSource extends BaseSource {\n    constructor(text, textStyle) {\n        super();\n        this.type = 'text';\n        this.text = text;\n        this._textStyle = textStyle;\n    }\n    encodeText(text) {\n        return serializeCloudinaryCharacters(text);\n    }\n    textColor(color) {\n        this._textColor = color;\n        return this;\n    }\n    backgroundColor(bgColor) {\n        this._backgroundColor = bgColor;\n        return this;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const layerParam = [\n            this.type,\n            this._textStyle && this._textStyle.toString(),\n            this.encodeText(this.text)\n        ].filter((a) => a).join(':');\n        const tmpAction = new Action();\n        tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n        this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n        this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n        return tmpAction.toString();\n    }\n}\nexport { BaseTextSource };\n"]},"metadata":{},"sourceType":"module"}