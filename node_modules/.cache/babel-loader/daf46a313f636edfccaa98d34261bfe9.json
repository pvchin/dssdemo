{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\PayRunTable.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useMemo } from \"react\";\nimport { Button } from \"@chakra-ui/react\";\nimport { useTable, useRowSelect } from \"react-table\";\nimport { useEmployees } from \"./employees/useEmployees\"; // const Styles = styled.div`\n//   padding: 1rem;\n//   table {\n//     border-spacing: 0;\n//     border: 1px solid black;\n//     tr {\n//       :last-child {\n//         td {\n//           border-bottom: 0;\n//         }\n//       }\n//     }\n//     th,\n//     td {\n//       margin: 0;\n//       padding: 0.5rem;\n//       border-bottom: 1px solid black;\n//       border-right: 1px solid black;\n//       :last-child {\n//         border-right: 0;\n//       }\n//     }\n//   }\n// `;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IndeterminateCheckbox = /*#__PURE__*/React.forwardRef(_c = _s(({\n  indeterminate,\n  ...rest\n}, ref) => {\n  _s();\n\n  const defaultRef = React.useRef();\n  const resolvedRef = ref || defaultRef;\n  React.useEffect(() => {\n    resolvedRef.current.indeterminate = indeterminate;\n  }, [resolvedRef, indeterminate]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      ref: resolvedRef,\n      ...rest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\"));\n_c2 = IndeterminateCheckbox;\n\nfunction Table({\n  columns,\n  data\n}) {\n  _s2();\n\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    selectedFlatRows,\n    state: {\n      selectedRowIds\n    }\n  } = useTable({\n    columns,\n    data\n  }, useRowSelect, hooks => {\n    hooks.visibleColumns.push(columns => [// Let's make a column for selection\n    {\n      id: \"selection\",\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...row.getToggleRowSelectedProps()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)\n    }, ...columns]);\n  }); // Render the UI for your table\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render(\"Header\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: rows.slice(0, 10).map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render(\"Cell\")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s2(Table, \"p7jPIHBIMBMry6oPsJDs3ZNSfns=\", false, function () {\n  return [useTable];\n});\n\n_c3 = Table;\n\nfunction PayRunTable() {\n  _s3();\n\n  const columns = React.useMemo(() => [{\n    Header: \"Name\",\n    accessor: \"name\"\n  }]);\n  const {\n    employees\n  } = useEmployees();\n  return /*#__PURE__*/_jsxDEV(Table, {\n    columns: columns,\n    data: employees\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(PayRunTable, \"kKXgpDxlzKf4I+fA+fUJsfNZem8=\", false, function () {\n  return [useEmployees];\n});\n\n_c4 = PayRunTable;\nexport default PayRunTable;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"IndeterminateCheckbox$React.forwardRef\");\n$RefreshReg$(_c2, \"IndeterminateCheckbox\");\n$RefreshReg$(_c3, \"Table\");\n$RefreshReg$(_c4, \"PayRunTable\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/PayRunTable.js"],"names":["React","useMemo","Button","useTable","useRowSelect","useEmployees","IndeterminateCheckbox","forwardRef","indeterminate","rest","ref","defaultRef","useRef","resolvedRef","useEffect","current","Table","columns","data","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","selectedFlatRows","state","selectedRowIds","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","slice","i","getRowProps","cells","cell","getCellProps","PayRunTable","accessor","employees"],"mappings":"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","sourcesContent":["import React, { useMemo } from \"react\";\r\nimport { Button} from \"@chakra-ui/react\"\r\nimport { useTable, useRowSelect } from \"react-table\";\r\n\r\nimport { useEmployees } from \"./employees/useEmployees\";\r\n\r\n// const Styles = styled.div`\r\n//   padding: 1rem;\r\n\r\n//   table {\r\n//     border-spacing: 0;\r\n//     border: 1px solid black;\r\n\r\n//     tr {\r\n//       :last-child {\r\n//         td {\r\n//           border-bottom: 0;\r\n//         }\r\n//       }\r\n//     }\r\n\r\n//     th,\r\n//     td {\r\n//       margin: 0;\r\n//       padding: 0.5rem;\r\n//       border-bottom: 1px solid black;\r\n//       border-right: 1px solid black;\r\n\r\n//       :last-child {\r\n//         border-right: 0;\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\nconst IndeterminateCheckbox = React.forwardRef(\r\n  ({ indeterminate, ...rest }, ref) => {\r\n    const defaultRef = React.useRef();\r\n    const resolvedRef = ref || defaultRef;\r\n\r\n    React.useEffect(() => {\r\n      resolvedRef.current.indeterminate = indeterminate;\r\n    }, [resolvedRef, indeterminate]);\r\n\r\n    return (\r\n      <>\r\n        <input type=\"checkbox\" ref={resolvedRef} {...rest} />\r\n      </>\r\n    );\r\n  }\r\n);\r\n\r\nfunction Table({ columns, data }) {\r\n  // Use the state and functions returned from useTable to build your UI\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n    selectedFlatRows,\r\n    state: { selectedRowIds },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n    },\r\n    useRowSelect,\r\n    (hooks) => {\r\n      hooks.visibleColumns.push((columns) => [\r\n        // Let's make a column for selection\r\n        {\r\n          id: \"selection\",\r\n          // The header can use the table's getToggleAllRowsSelectedProps method\r\n          // to render a checkbox\r\n          Header: ({ getToggleAllRowsSelectedProps }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\r\n            </div>\r\n          ),\r\n          // The cell can use the individual row's getToggleRowSelectedProps method\r\n          // to the render a checkbox\r\n          Cell: ({ row }) => (\r\n            <div>\r\n              <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\r\n            </div>\r\n          ),\r\n        },\r\n        ...columns,\r\n      ]);\r\n    }\r\n  );\r\n\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map((column) => (\r\n                <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {rows.slice(0, 10).map((row, i) => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map((cell) => {\r\n                  return (\r\n                    <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      {/* <p>Selected Rows: {Object.keys(selectedRowIds).length}</p>\r\n      <pre>\r\n        <code>\r\n          {JSON.stringify(\r\n            {\r\n              selectedRowIds: selectedRowIds,\r\n              \"selectedFlatRows[].original\": selectedFlatRows.map(\r\n                (d) => d.original\r\n              ),\r\n            },\r\n            null,\r\n            2\r\n          )}\r\n        </code>\r\n      </pre> */}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction PayRunTable() {\r\n  const columns = React.useMemo(() => [\r\n    {\r\n      Header: \"Name\",\r\n      accessor: \"name\",\r\n    },\r\n  ]);\r\n\r\n  const { employees } = useEmployees();\r\n\r\n  return (\r\n    <Table columns={columns} data={employees} />\r\n  )\r\n}\r\n\r\nexport default PayRunTable;\r\n"]},"metadata":{},"sourceType":"module"}