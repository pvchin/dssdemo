{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { DeliveryAction } from \"./DeliveryAction\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\n\nvar DeliveryQualityAction = /*#__PURE__*/function (_DeliveryAction) {\n  _inherits(DeliveryQualityAction, _DeliveryAction);\n\n  var _super = _createSuper(DeliveryQualityAction);\n\n  /**\n   * @param {Qualifiers.Quality} qualityValue a Quality value\n   */\n  function DeliveryQualityAction(qualityValue) {\n    var _this;\n\n    _classCallCheck(this, DeliveryQualityAction);\n\n    _this = _super.call(this, 'q', qualityValue.toString());\n    _this.qualityValue = qualityValue;\n    return _this;\n  }\n  /**\n   * Selet the Chroma sub sampling</br>\n   * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_transformations#toggling_chroma_subsampling | Toggling chroma subsampling}\n   * @param {420 | 444 | number} type The chroma sub sampling type\n   */\n\n\n  _createClass(DeliveryQualityAction, [{\n    key: \"chromaSubSampling\",\n    value: function chromaSubSampling(type) {\n      var qualityWithSubSampling = new QualifierValue([this.qualityValue, type]);\n      qualityWithSubSampling.setDelimiter(':'); // We either have chroma or quantization, but not both\n\n      return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n    }\n    /**\n     * Controls the final quality by setting a maximum quantization percentage\n     * @param {number} val\n     */\n\n  }, {\n    key: \"quantization\",\n    value: function quantization(val) {\n      var qualityWithQuantization = new QualifierValue([this.qualityValue, \"qmax_\".concat(val)]);\n      qualityWithQuantization.setDelimiter(':'); // We either have chroma or quantization, but not both\n\n      return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n    }\n  }]);\n\n  return DeliveryQualityAction;\n}(DeliveryAction);\n\nexport { DeliveryQualityAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/delivery/DeliveryQuality.js"],"names":["QualifierValue","Qualifier","DeliveryAction","DeliveryQualityAction","qualityValue","toString","type","qualityWithSubSampling","setDelimiter","addQualifier","val","qualityWithQuantization"],"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,yCAA/B;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,qB;;;;;AACF;AACJ;AACA;AACI,iCAAYC,YAAZ,EAA0B;AAAA;;AAAA;;AACtB,8BAAM,GAAN,EAAWA,YAAY,CAACC,QAAb,EAAX;AACA,UAAKD,YAAL,GAAoBA,YAApB;AAFsB;AAGzB;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,2BAAkBE,IAAlB,EAAwB;AACpB,UAAMC,sBAAsB,GAAG,IAAIP,cAAJ,CAAmB,CAAC,KAAKI,YAAN,EAAoBE,IAApB,CAAnB,CAA/B;AACAC,MAAAA,sBAAsB,CAACC,YAAvB,CAAoC,GAApC,EAFoB,CAGpB;;AACA,aAAO,KAAKC,YAAL,CAAkB,IAAIR,SAAJ,CAAc,GAAd,EAAmBM,sBAAnB,CAAlB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,sBAAaG,GAAb,EAAkB;AACd,UAAMC,uBAAuB,GAAG,IAAIX,cAAJ,CAAmB,CAAC,KAAKI,YAAN,iBAA4BM,GAA5B,EAAnB,CAAhC;AACAC,MAAAA,uBAAuB,CAACH,YAAxB,CAAqC,GAArC,EAFc,CAGd;;AACA,aAAO,KAAKC,YAAL,CAAkB,IAAIR,SAAJ,CAAc,GAAd,EAAmBU,uBAAnB,CAAlB,CAAP;AACH;;;;EA5B+BT,c;;AA8BpC,SAASC,qBAAT","sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { DeliveryAction } from \"./DeliveryAction\";\n/**\n * @description Controls the quality of the delivered image or video.\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryQualityAction extends DeliveryAction {\n    /**\n     * @param {Qualifiers.Quality} qualityValue a Quality value\n     */\n    constructor(qualityValue) {\n        super('q', qualityValue.toString());\n        this.qualityValue = qualityValue;\n    }\n    /**\n     * Selet the Chroma sub sampling</br>\n     * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_transformations#toggling_chroma_subsampling | Toggling chroma subsampling}\n     * @param {420 | 444 | number} type The chroma sub sampling type\n     */\n    chromaSubSampling(type) {\n        const qualityWithSubSampling = new QualifierValue([this.qualityValue, type]);\n        qualityWithSubSampling.setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\n    }\n    /**\n     * Controls the final quality by setting a maximum quantization percentage\n     * @param {number} val\n     */\n    quantization(val) {\n        const qualityWithQuantization = new QualifierValue([this.qualityValue, `qmax_${val}`]);\n        qualityWithQuantization.setDelimiter(':');\n        // We either have chroma or quantization, but not both\n        return this.addQualifier(new Qualifier('q', qualityWithQuantization));\n    }\n}\nexport { DeliveryQualityAction };\n"]},"metadata":{},"sourceType":"module"}