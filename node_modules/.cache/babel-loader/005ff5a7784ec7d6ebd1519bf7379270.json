{"ast":null,"code":"var _jsxFileName = \"D:\\\\react-myprojects\\\\hrms-airtable\\\\src\\\\components\\\\OnLeavesViewStaff.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { List, ListItem, ListItemText, Grid } from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport axios from \"axios\"; //import { useAsync } from \"react-async\";\n\nimport { selector, useRecoilState } from \"recoil\";\nimport { loginLevelState } from \"./data/atomdata\";\nimport { leaves_url } from \"../utils/constants\";\nimport { useLeavesContext } from \"../context/leaves_context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst drawerWidth = 240;\nconst columns = [{\n  title: \"Name\",\n  field: \"name\",\n  editable: \"never\"\n}, {\n  title: \"From Data\",\n  field: \"from_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"To Data\",\n  field: \"to_date\",\n  type: \"date\",\n  dateSetting: {\n    locale: \"en-GB\"\n  },\n  editable: \"never\"\n}, {\n  title: \"Status\",\n  field: \"status\",\n  editable: \"never\"\n}]; // export const onleavesdatastate = atom({\n//   key: \"onleavesdatastate\",\n//   default: [],\n// });\n// const fetchOnLeavesDetails = selector({\n//   key: \"onLeaveDetailsSelector\",\n//   get: async ({ get }) => {\n//     try {\n//       const { data } = await axios.get(leaves_url);\n//       const onleavesdata = data;\n//       return data;\n//     } catch (error) {\n//       throw error;\n//     }\n//   },\n// });\n\nconst OnLeavesViewStaff = () => {\n  _s();\n\n  const classes = useStyles(); //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\n  //const [userdata, setUserdata] = useState([]);\n\n  const [loginLevel] = useRecoilState(loginLevelState);\n  const {\n    loadEmpLeaves,\n    singlebatch_leave_loading,\n    singlebatch_leave_error,\n    singlebatch_leave\n  } = useLeavesContext();\n  useEffect(() => {\n    loadEmpLeaves(loginLevel.loginUserId);\n  }, []); //const [userdata, setUserdata] = useRecoilState(userdatastate);\n  //const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\n\n  if (singlebatch_leave_loading) return \"Loading...\";\n  if (singlebatch_leave_error) return `Internet connections problem!`;\n  if (singlebatch_leave) return /*#__PURE__*/_jsxDEV(List, {\n    className: classes.roow,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      children: singlebatch_leave.map(row => {\n        return /*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 4,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              children: row.from_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 4,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              children: row.to_date\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            sm: 4,\n            align: \"center\",\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              children: row.status\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 17\n          }, this)]\n        }, row.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 7\n  }, this);\n};\n\n_s(OnLeavesViewStaff, \"pms+crDIDwbV4Vb4NObNzNzdS8k=\", false, function () {\n  return [useStyles, useRecoilState, useLeavesContext];\n});\n\n_c = OnLeavesViewStaff;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: \"2\"\n  },\n  paper: {\n    padding: theme.spacing(1),\n    //grid padding\n    textAlign: \"center\",\n    color: theme.palette.text.secondary\n  }\n}));\nexport default OnLeavesViewStaff;\n\nvar _c;\n\n$RefreshReg$(_c, \"OnLeavesViewStaff\");","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/components/OnLeavesViewStaff.js"],"names":["React","useState","useEffect","makeStyles","List","ListItem","ListItemText","Grid","clsx","axios","selector","useRecoilState","loginLevelState","leaves_url","useLeavesContext","drawerWidth","columns","title","field","editable","type","dateSetting","locale","OnLeavesViewStaff","classes","useStyles","loginLevel","loadEmpLeaves","singlebatch_leave_loading","singlebatch_leave_error","singlebatch_leave","loginUserId","roow","map","row","from_date","to_date","status","id","theme","root","padding","paper","spacing","textAlign","color","palette","text","secondary"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { List, ListItem, ListItemText, Grid } from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport axios from \"axios\";\r\n//import { useAsync } from \"react-async\";\r\nimport { selector, useRecoilState } from \"recoil\";\r\nimport { loginLevelState } from \"./data/atomdata\";\r\nimport { leaves_url } from \"../utils/constants\";\r\nimport { useLeavesContext } from \"../context/leaves_context\";\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    field: \"name\",\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"From Data\",\r\n    field: \"from_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"To Data\",\r\n    field: \"to_date\",\r\n    type: \"date\",\r\n    dateSetting: { locale: \"en-GB\" },\r\n    editable: \"never\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    field: \"status\",\r\n    editable: \"never\",\r\n  },\r\n];\r\n\r\n// export const onleavesdatastate = atom({\r\n//   key: \"onleavesdatastate\",\r\n//   default: [],\r\n// });\r\n\r\n// const fetchOnLeavesDetails = selector({\r\n//   key: \"onLeaveDetailsSelector\",\r\n//   get: async ({ get }) => {\r\n//     try {\r\n//       const { data } = await axios.get(leaves_url);\r\n//       const onleavesdata = data;\r\n\r\n//       return data;\r\n//     } catch (error) {\r\n//       throw error;\r\n//     }\r\n//   },\r\n// });\r\n\r\n\r\nconst OnLeavesViewStaff = () => {\r\n  const classes = useStyles();\r\n  //const fixedHeightPaper = clsx(classes.paper, classes.fixedHeight);\r\n  //const [userdata, setUserdata] = useState([]);\r\n  const [loginLevel] = useRecoilState(loginLevelState);\r\n\r\n  const {\r\n    \r\n    loadEmpLeaves,\r\n    singlebatch_leave_loading,\r\n    singlebatch_leave_error,\r\n    singlebatch_leave,\r\n  } = useLeavesContext();\r\n\r\n  useEffect(() => {\r\n    loadEmpLeaves(loginLevel.loginUserId);\r\n  }, []);\r\n\r\n  //const [userdata, setUserdata] = useRecoilState(userdatastate);\r\n  //const onLeavesDetails = useRecoilValueLoadable(fetchOnLeavesDetails);\r\n\r\n  if (singlebatch_leave_loading) return \"Loading...\";\r\n  if (singlebatch_leave_error) return `Internet connections problem!`;\r\n  if (singlebatch_leave)\r\n    return (\r\n      <List className={classes.roow}>\r\n        <Grid container direction=\"row\">\r\n          {singlebatch_leave.map((row) => {\r\n            return (\r\n              <ListItem key={row.id}>\r\n                <Grid item sm={4} align=\"center\">\r\n                  <ListItemText>{row.from_date}</ListItemText>\r\n                </Grid>\r\n                <Grid item sm={4} align=\"center\">\r\n                  <ListItemText>{row.to_date}</ListItemText>\r\n                </Grid>\r\n                <Grid item sm={4} align=\"center\">\r\n                  <ListItemText>{row.status}</ListItemText>\r\n                </Grid>\r\n              </ListItem>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </List>\r\n    );\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    padding: \"2\",\r\n  },\r\n\r\n  paper: {\r\n    padding: theme.spacing(1), //grid padding\r\n    textAlign: \"center\",\r\n    color: theme.palette.text.secondary,\r\n  },\r\n}));\r\n\r\nexport default OnLeavesViewStaff;\r\n"]},"metadata":{},"sourceType":"module"}