{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BaseSource } from \"../BaseSource\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters\";\nimport { Action } from \"../../../internal/Action\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\n\nvar BaseTextSource = /*#__PURE__*/function (_BaseSource) {\n  _inherits(BaseTextSource, _BaseSource);\n\n  var _super = _createSuper(BaseTextSource);\n\n  function BaseTextSource(text, textStyle) {\n    var _this;\n\n    _classCallCheck(this, BaseTextSource);\n\n    _this = _super.call(this);\n    _this.type = 'text';\n    _this.text = text;\n    _this._textStyle = textStyle;\n    return _this;\n  }\n\n  _createClass(BaseTextSource, [{\n    key: \"encodeText\",\n    value: function encodeText(text) {\n      return serializeCloudinaryCharacters(text);\n    }\n  }, {\n    key: \"textColor\",\n    value: function textColor(color) {\n      this._textColor = color;\n      return this;\n    }\n  }, {\n    key: \"backgroundColor\",\n    value: function backgroundColor(bgColor) {\n      this._backgroundColor = bgColor;\n      return this;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getOpenSourceString\",\n    value: function getOpenSourceString(layerType) {\n      var layerParam = [this.type, this._textStyle && this._textStyle.toString(), this.encodeText(this.text)].filter(function (a) {\n        return a;\n      }).join(':');\n      var tmpAction = new Action();\n      tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n      this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n      this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n      return tmpAction.toString();\n    }\n  }]);\n\n  return BaseTextSource;\n}(BaseSource);\n\nexport { BaseTextSource };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/BaseTextSource.js"],"names":["BaseSource","serializeCloudinaryCharacters","Action","Qualifier","prepareColor","BaseTextSource","text","textStyle","type","_textStyle","color","_textColor","bgColor","_backgroundColor","layerType","layerParam","toString","encodeText","filter","a","join","tmpAction","addQualifier"],"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,6BAAT,QAA8C,uDAA9C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,YAAT,QAA6B,sCAA7B;AACA;AACA;AACA;AACA;AACA;;IACMC,c;;;;;AACF,0BAAYC,IAAZ,EAAkBC,SAAlB,EAA6B;AAAA;;AAAA;;AACzB;AACA,UAAKC,IAAL,GAAY,MAAZ;AACA,UAAKF,IAAL,GAAYA,IAAZ;AACA,UAAKG,UAAL,GAAkBF,SAAlB;AAJyB;AAK5B;;;;WACD,oBAAWD,IAAX,EAAiB;AACb,aAAOL,6BAA6B,CAACK,IAAD,CAApC;AACH;;;WACD,mBAAUI,KAAV,EAAiB;AACb,WAAKC,UAAL,GAAkBD,KAAlB;AACA,aAAO,IAAP;AACH;;;WACD,yBAAgBE,OAAhB,EAAyB;AACrB,WAAKC,gBAAL,GAAwBD,OAAxB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,6BAAoBE,SAApB,EAA+B;AAC3B,UAAMC,UAAU,GAAG,CACf,KAAKP,IADU,EAEf,KAAKC,UAAL,IAAmB,KAAKA,UAAL,CAAgBO,QAAhB,EAFJ,EAGf,KAAKC,UAAL,CAAgB,KAAKX,IAArB,CAHe,EAIjBY,MAJiB,CAIV,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAJU,EAIAC,IAJA,CAIK,GAJL,CAAnB;AAKA,UAAMC,SAAS,GAAG,IAAInB,MAAJ,EAAlB;AACAmB,MAAAA,SAAS,CAACC,YAAV,CAAuB,IAAInB,SAAJ,CAAcW,SAAd,EAAyBC,UAAzB,CAAvB;AACA,WAAKJ,UAAL,IAAmBU,SAAS,CAACC,YAAV,CAAuB,IAAInB,SAAJ,CAAc,IAAd,EAAoBC,YAAY,CAAC,KAAKO,UAAN,CAAhC,CAAvB,CAAnB;AACA,WAAKE,gBAAL,IAAyBQ,SAAS,CAACC,YAAV,CAAuB,IAAInB,SAAJ,CAAc,GAAd,EAAmBC,YAAY,CAAC,KAAKS,gBAAN,CAA/B,CAAvB,CAAzB;AACA,aAAOQ,SAAS,CAACL,QAAV,EAAP;AACH;;;;EAnCwBhB,U;;AAqC7B,SAASK,cAAT","sourcesContent":["import { BaseSource } from \"../BaseSource\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters\";\nimport { Action } from \"../../../internal/Action\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\nclass BaseTextSource extends BaseSource {\n    constructor(text, textStyle) {\n        super();\n        this.type = 'text';\n        this.text = text;\n        this._textStyle = textStyle;\n    }\n    encodeText(text) {\n        return serializeCloudinaryCharacters(text);\n    }\n    textColor(color) {\n        this._textColor = color;\n        return this;\n    }\n    backgroundColor(bgColor) {\n        this._backgroundColor = bgColor;\n        return this;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const layerParam = [\n            this.type,\n            this._textStyle && this._textStyle.toString(),\n            this.encodeText(this.text)\n        ].filter((a) => a).join(':');\n        const tmpAction = new Action();\n        tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n        this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n        this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n        return tmpAction.toString();\n    }\n}\nexport { BaseTextSource };\n"]},"metadata":{},"sourceType":"module"}