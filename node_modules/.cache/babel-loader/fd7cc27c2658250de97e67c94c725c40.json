{"ast":null,"code":"import cloneDeep from 'lodash/cloneDeep';\nimport { PLACEHOLDER_IMAGE_OPTIONS, singleTransparentPixel } from '../utils/internalConstants';\nimport { isBrowser } from \"../utils/isBrowser\";\nimport { isImage } from \"../utils/isImage\";\n/**\n * @namespace\n * @description Displays a placeholder image until the original image loads.\n * @param mode {PlaceholderMode} The type of placeholder image to display. Possible modes: 'vectorize' | 'pixelate' | 'blur' | 'predominant-color'. Default: 'vectorize'.\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins=[(placeholder('blur'))]/>\n */\n\nexport function placeholder(mode) {\n  if (mode === void 0) {\n    mode = 'vectorize';\n  }\n\n  return placeholderPlugin.bind(null, mode);\n}\n/**\n * @description Placeholder plugin\n * @param mode {placeholderMode} The type of placeholder image to display. Possible modes: 'vectorize' | 'pixelate' | 'blur' | 'predominant-color'. Default: 'vectorize'.\n * @param element {HTMLImageElement} The image element.\n * @param pluginCloudinaryImage {CloudinaryImage}\n * @param htmlPluginState {htmlPluginState} Holds cleanup callbacks and event subscriptions.\n */\n\nfunction placeholderPlugin(mode, element, pluginCloudinaryImage, htmlPluginState) {\n  if (!isBrowser()) return;\n  if (!isImage(element)) return;\n  var placeholderTransformation = preparePlaceholderTransformation(mode, pluginCloudinaryImage);\n  element.src = placeholderTransformation.toURL(); //if placeholder does not load, load a single transparent pixel\n\n  element.onerror = function () {\n    element.src = singleTransparentPixel;\n  };\n  /*\n  Placeholder image loads first. Once it loads, the promise is resolved and the\n  larger image will load. Once the larger image loads, promised and plugin is resolved.\n   */\n\n\n  return new Promise(function (resolve) {\n    element.onload = function () {\n      resolve();\n    };\n  }).then(function () {\n    return new Promise(function (resolve) {\n      htmlPluginState.cleanupCallbacks.push(function () {\n        element.src = singleTransparentPixel;\n        resolve('canceled');\n      }); // load image once placeholder is done loading\n\n      var largeImage = new Image();\n      largeImage.src = pluginCloudinaryImage.toURL();\n\n      largeImage.onload = function () {\n        resolve();\n      }; // image does not load, resolve\n\n\n      largeImage.onerror = function () {\n        resolve();\n      };\n    });\n  });\n}\n/**\n * Prepares placeholder transformation by appending a placeholder-type transformation to the end of the URL\n * @param mode {PlaceholderMode} The type of placeholder image to display. Possible modes: 'vectorize' | 'pixelate' | 'blur' | 'predominant-color'. Default: 'vectorize'.\n * @param pluginCloudinaryImage {CloudinaryImage}\n */\n\n\nfunction preparePlaceholderTransformation(mode, pluginCloudinaryImage) {\n  var placeholderClonedImage = cloneDeep(pluginCloudinaryImage); // @ts-ignore\n\n  if (!PLACEHOLDER_IMAGE_OPTIONS[mode]) {\n    mode = 'vectorize';\n  } //appends a placeholder transformation on placeholderClonedImage\n  // @ts-ignore\n\n\n  PLACEHOLDER_IMAGE_OPTIONS[mode].actions.forEach(function (transformation) {\n    placeholderClonedImage.addAction(transformation);\n  });\n  return placeholderClonedImage;\n}","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/html/plugins/placeholder.js"],"names":["cloneDeep","PLACEHOLDER_IMAGE_OPTIONS","singleTransparentPixel","isBrowser","isImage","placeholder","mode","placeholderPlugin","bind","element","pluginCloudinaryImage","htmlPluginState","placeholderTransformation","preparePlaceholderTransformation","src","toURL","onerror","Promise","resolve","onload","then","cleanupCallbacks","push","largeImage","Image","placeholderClonedImage","actions","forEach","transformation","addAction"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,kBAAtB;AACA,SAASC,yBAAT,EAAoCC,sBAApC,QAAkE,4BAAlE;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AAC9B,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,WAAP;AAAqB;;AAC5C,SAAOC,iBAAiB,CAACC,IAAlB,CAAuB,IAAvB,EAA6BF,IAA7B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BD,IAA3B,EAAiCG,OAAjC,EAA0CC,qBAA1C,EAAiEC,eAAjE,EAAkF;AAC9E,MAAI,CAACR,SAAS,EAAd,EACI;AACJ,MAAI,CAACC,OAAO,CAACK,OAAD,CAAZ,EACI;AACJ,MAAIG,yBAAyB,GAAGC,gCAAgC,CAACP,IAAD,EAAOI,qBAAP,CAAhE;AACAD,EAAAA,OAAO,CAACK,GAAR,GAAcF,yBAAyB,CAACG,KAA1B,EAAd,CAN8E,CAO9E;;AACAN,EAAAA,OAAO,CAACO,OAAR,GAAkB,YAAY;AAC1BP,IAAAA,OAAO,CAACK,GAAR,GAAcZ,sBAAd;AACH,GAFD;AAGA;AACJ;AACA;AACA;;;AACI,SAAO,IAAIe,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AAClCT,IAAAA,OAAO,CAACU,MAAR,GAAiB,YAAY;AACzBD,MAAAA,OAAO;AACV,KAFD;AAGH,GAJM,EAIJE,IAJI,CAIC,YAAY;AAChB,WAAO,IAAIH,OAAJ,CAAY,UAAUC,OAAV,EAAmB;AAClCP,MAAAA,eAAe,CAACU,gBAAhB,CAAiCC,IAAjC,CAAsC,YAAY;AAC9Cb,QAAAA,OAAO,CAACK,GAAR,GAAcZ,sBAAd;AACAgB,QAAAA,OAAO,CAAC,UAAD,CAAP;AACH,OAHD,EADkC,CAKlC;;AACA,UAAIK,UAAU,GAAG,IAAIC,KAAJ,EAAjB;AACAD,MAAAA,UAAU,CAACT,GAAX,GAAiBJ,qBAAqB,CAACK,KAAtB,EAAjB;;AACAQ,MAAAA,UAAU,CAACJ,MAAX,GAAoB,YAAY;AAC5BD,QAAAA,OAAO;AACV,OAFD,CARkC,CAWlC;;;AACAK,MAAAA,UAAU,CAACP,OAAX,GAAqB,YAAY;AAC7BE,QAAAA,OAAO;AACV,OAFD;AAGH,KAfM,CAAP;AAgBH,GArBM,CAAP;AAsBH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASL,gCAAT,CAA0CP,IAA1C,EAAgDI,qBAAhD,EAAuE;AACnE,MAAIe,sBAAsB,GAAGzB,SAAS,CAACU,qBAAD,CAAtC,CADmE,CAEnE;;AACA,MAAI,CAACT,yBAAyB,CAACK,IAAD,CAA9B,EAAsC;AAClCA,IAAAA,IAAI,GAAG,WAAP;AACH,GALkE,CAMnE;AACA;;;AACAL,EAAAA,yBAAyB,CAACK,IAAD,CAAzB,CAAgCoB,OAAhC,CAAwCC,OAAxC,CAAgD,UAAUC,cAAV,EAA0B;AACtEH,IAAAA,sBAAsB,CAACI,SAAvB,CAAiCD,cAAjC;AACH,GAFD;AAGA,SAAOH,sBAAP;AACH","sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport { PLACEHOLDER_IMAGE_OPTIONS, singleTransparentPixel } from '../utils/internalConstants';\nimport { isBrowser } from \"../utils/isBrowser\";\nimport { isImage } from \"../utils/isImage\";\n/**\n * @namespace\n * @description Displays a placeholder image until the original image loads.\n * @param mode {PlaceholderMode} The type of placeholder image to display. Possible modes: 'vectorize' | 'pixelate' | 'blur' | 'predominant-color'. Default: 'vectorize'.\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins=[(placeholder('blur'))]/>\n */\nexport function placeholder(mode) {\n    if (mode === void 0) { mode = 'vectorize'; }\n    return placeholderPlugin.bind(null, mode);\n}\n/**\n * @description Placeholder plugin\n * @param mode {placeholderMode} The type of placeholder image to display. Possible modes: 'vectorize' | 'pixelate' | 'blur' | 'predominant-color'. Default: 'vectorize'.\n * @param element {HTMLImageElement} The image element.\n * @param pluginCloudinaryImage {CloudinaryImage}\n * @param htmlPluginState {htmlPluginState} Holds cleanup callbacks and event subscriptions.\n */\nfunction placeholderPlugin(mode, element, pluginCloudinaryImage, htmlPluginState) {\n    if (!isBrowser())\n        return;\n    if (!isImage(element))\n        return;\n    var placeholderTransformation = preparePlaceholderTransformation(mode, pluginCloudinaryImage);\n    element.src = placeholderTransformation.toURL();\n    //if placeholder does not load, load a single transparent pixel\n    element.onerror = function () {\n        element.src = singleTransparentPixel;\n    };\n    /*\n    Placeholder image loads first. Once it loads, the promise is resolved and the\n    larger image will load. Once the larger image loads, promised and plugin is resolved.\n     */\n    return new Promise(function (resolve) {\n        element.onload = function () {\n            resolve();\n        };\n    }).then(function () {\n        return new Promise(function (resolve) {\n            htmlPluginState.cleanupCallbacks.push(function () {\n                element.src = singleTransparentPixel;\n                resolve('canceled');\n            });\n            // load image once placeholder is done loading\n            var largeImage = new Image();\n            largeImage.src = pluginCloudinaryImage.toURL();\n            largeImage.onload = function () {\n                resolve();\n            };\n            // image does not load, resolve\n            largeImage.onerror = function () {\n                resolve();\n            };\n        });\n    });\n}\n/**\n * Prepares placeholder transformation by appending a placeholder-type transformation to the end of the URL\n * @param mode {PlaceholderMode} The type of placeholder image to display. Possible modes: 'vectorize' | 'pixelate' | 'blur' | 'predominant-color'. Default: 'vectorize'.\n * @param pluginCloudinaryImage {CloudinaryImage}\n */\nfunction preparePlaceholderTransformation(mode, pluginCloudinaryImage) {\n    var placeholderClonedImage = cloneDeep(pluginCloudinaryImage);\n    // @ts-ignore\n    if (!PLACEHOLDER_IMAGE_OPTIONS[mode]) {\n        mode = 'vectorize';\n    }\n    //appends a placeholder transformation on placeholderClonedImage\n    // @ts-ignore\n    PLACEHOLDER_IMAGE_OPTIONS[mode].actions.forEach(function (transformation) {\n        placeholderClonedImage.addAction(transformation);\n    });\n    return placeholderClonedImage;\n}\n"]},"metadata":{},"sourceType":"module"}