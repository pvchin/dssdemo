{"ast":null,"code":"import _slicedToArray from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { generateTransformationString } from \"./generateTransformationString\";\nimport { finalize_resource_type } from \"./utils/finalizeResourceType\";\nimport { finalize_source } from \"./utils/finalize_source\";\nimport { unsigned_url_prefix } from \"./utils/unsigned_url_prefix\";\nexport function createCloudinaryV1URL(public_id, transformationOptions) {\n  // Path format\n  if (transformationOptions.type === \"fetch\") {\n    if (transformationOptions.fetch_format == null) {\n      transformationOptions.fetch_format = transformationOptions.format;\n    }\n  }\n\n  var source_to_sign;\n  var type = transformationOptions.type;\n  var resource_type = transformationOptions.resource_type || 'image';\n  var version = transformationOptions.version;\n  var force_version = typeof transformationOptions.force_version === 'boolean' ? transformationOptions.force_version : true;\n  var long_url_signature = !!transformationOptions.long_url_signature;\n  var format = transformationOptions.format;\n  var cloud_name = transformationOptions.cloud_name;\n\n  if (!cloud_name) {\n    throw \"cloud_name must be provided in the configuration\";\n  }\n\n  var private_cdn = transformationOptions.private_cdn;\n  var secure_distribution = transformationOptions.secure_distribution;\n  var secure = typeof transformationOptions.secure === 'boolean' ? transformationOptions.secure : true;\n  var cdn_subdomain = transformationOptions.cdn_subdomain;\n  var secure_cdn_subdomain = transformationOptions.secure_cdn_subdomain;\n  var cname = transformationOptions.cname;\n  var shorten = transformationOptions.shorten;\n  var sign_url = transformationOptions.sign_url;\n  var api_secret = transformationOptions.api_secret;\n  var url_suffix = transformationOptions.url_suffix;\n  var use_root_path = transformationOptions.use_root_path;\n  var auth_token = transformationOptions.auth_token;\n  var preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n\n  if (preloaded) {\n    resource_type = preloaded[1];\n    type = preloaded[2];\n    version = preloaded[3];\n    public_id = preloaded[4];\n  }\n\n  var original_source = public_id;\n\n  if (public_id == null) {\n    return original_source;\n  }\n\n  public_id = public_id.toString();\n\n  if (type === null && public_id.match(/^https?:\\//i)) {\n    return original_source;\n  }\n\n  var _finalize_resource_ty = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n\n  var _finalize_resource_ty2 = _slicedToArray(_finalize_resource_ty, 2);\n\n  resource_type = _finalize_resource_ty2[0];\n  type = _finalize_resource_ty2[1];\n\n  var _finalize_source = finalize_source(public_id, format, url_suffix);\n\n  var _finalize_source2 = _slicedToArray(_finalize_source, 2);\n\n  public_id = _finalize_source2[0];\n  source_to_sign = _finalize_source2[1];\n\n  if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n    version = 1;\n  }\n\n  if (version != null) {\n    version = \"v\".concat(version);\n  } else {\n    version = null;\n  }\n\n  var transformation = generateTransformationString(transformationOptions).replace(/([^:])\\/\\//g, '$1/');\n  ;\n\n  if (sign_url && !auth_token) {\n    var to_sign = [transformation, source_to_sign].filter(function (part) {\n      return part != null && part !== '';\n    }).join('/');\n\n    try {\n      for (var i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n        to_sign = decodeURIComponent(to_sign);\n      } // eslint-disable-next-line no-empty\n\n    } catch (error) {} // No support for Auth Token\n    // const shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');\n    // shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n    // signature = shasum.digest('base64').replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n    // signature = `s--${signature}--`;\n\n  }\n\n  var prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n  var resultUrl = [prefix, resource_type, type, transformation, version, public_id].filter(function (part) {\n    return part != null && part !== '';\n  }).join('/').replace(' ', '%20');\n  return resultUrl;\n}","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/backwards/createCloudinaryURL.js"],"names":["generateTransformationString","finalize_resource_type","finalize_source","unsigned_url_prefix","createCloudinaryV1URL","public_id","transformationOptions","type","fetch_format","format","source_to_sign","resource_type","version","force_version","long_url_signature","cloud_name","private_cdn","secure_distribution","secure","cdn_subdomain","secure_cdn_subdomain","cname","shorten","sign_url","api_secret","url_suffix","use_root_path","auth_token","preloaded","exec","original_source","toString","match","indexOf","transformation","replace","to_sign","filter","part","join","i","decodeURIComponent","error","prefix","resultUrl"],"mappings":"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","sourcesContent":["import { generateTransformationString } from \"./generateTransformationString\";\nimport { finalize_resource_type } from \"./utils/finalizeResourceType\";\nimport { finalize_source } from \"./utils/finalize_source\";\nimport { unsigned_url_prefix } from \"./utils/unsigned_url_prefix\";\nexport function createCloudinaryV1URL(public_id, transformationOptions) {\n    // Path format\n    if (transformationOptions.type === \"fetch\") {\n        if (transformationOptions.fetch_format == null) {\n            transformationOptions.fetch_format = transformationOptions.format;\n        }\n    }\n    let source_to_sign;\n    let type = transformationOptions.type;\n    let resource_type = transformationOptions.resource_type || 'image';\n    let version = transformationOptions.version;\n    const force_version = typeof transformationOptions.force_version === 'boolean' ? transformationOptions.force_version : true;\n    const long_url_signature = !!transformationOptions.long_url_signature;\n    const format = transformationOptions.format;\n    const cloud_name = transformationOptions.cloud_name;\n    if (!cloud_name) {\n        throw \"cloud_name must be provided in the configuration\";\n    }\n    const private_cdn = transformationOptions.private_cdn;\n    const secure_distribution = transformationOptions.secure_distribution;\n    const secure = typeof transformationOptions.secure === 'boolean' ? transformationOptions.secure : true;\n    const cdn_subdomain = transformationOptions.cdn_subdomain;\n    const secure_cdn_subdomain = transformationOptions.secure_cdn_subdomain;\n    const cname = transformationOptions.cname;\n    const shorten = transformationOptions.shorten;\n    const sign_url = transformationOptions.sign_url;\n    const api_secret = transformationOptions.api_secret;\n    const url_suffix = transformationOptions.url_suffix;\n    const use_root_path = transformationOptions.use_root_path;\n    const auth_token = transformationOptions.auth_token;\n    const preloaded = /^(image|raw)\\/([a-z0-9_]+)\\/v(\\d+)\\/([^#]+)$/.exec(public_id);\n    if (preloaded) {\n        resource_type = preloaded[1];\n        type = preloaded[2];\n        version = preloaded[3];\n        public_id = preloaded[4];\n    }\n    const original_source = public_id;\n    if (public_id == null) {\n        return original_source;\n    }\n    public_id = public_id.toString();\n    if (type === null && public_id.match(/^https?:\\//i)) {\n        return original_source;\n    }\n    [resource_type, type] = finalize_resource_type(resource_type, type, url_suffix, use_root_path, shorten);\n    [public_id, source_to_sign] = finalize_source(public_id, format, url_suffix);\n    if (version == null && force_version && source_to_sign.indexOf(\"/\") >= 0 && !source_to_sign.match(/^v[0-9]+/) && !source_to_sign.match(/^https?:\\//)) {\n        version = 1;\n    }\n    if (version != null) {\n        version = `v${version}`;\n    }\n    else {\n        version = null;\n    }\n    const transformation = generateTransformationString(transformationOptions).replace(/([^:])\\/\\//g, '$1/');\n    ;\n    if (sign_url && !auth_token) {\n        let to_sign = [transformation, source_to_sign].filter(function (part) {\n            return (part != null) && part !== '';\n        }).join('/');\n        try {\n            for (let i = 0; to_sign !== decodeURIComponent(to_sign) && i < 10; i++) {\n                to_sign = decodeURIComponent(to_sign);\n            }\n            // eslint-disable-next-line no-empty\n        }\n        catch (error) {\n        }\n        // No support for Auth Token\n        // const shasum = crypto.createHash(long_url_signature ? 'sha256' : 'sha1');\n        // shasum.update(utf8_encode(to_sign + api_secret), 'binary');\n        // signature = shasum.digest('base64').replace(/\\//g, '_').replace(/\\+/g, '-').substring(0, long_url_signature ? 32 : 8);\n        // signature = `s--${signature}--`;\n    }\n    const prefix = unsigned_url_prefix(public_id, cloud_name, private_cdn, cdn_subdomain, secure_cdn_subdomain, cname, secure, secure_distribution);\n    const resultUrl = [prefix, resource_type, type, transformation, version, public_id].filter(function (part) {\n        return (part != null) && part !== '';\n    }).join('/').replace(' ', '%20');\n    return resultUrl;\n}\n"]},"metadata":{},"sourceType":"module"}