{"ast":null,"code":"/**\n * @description Defines flags that you can use to alter the default transformation behavior.\n * @namespace Flag\n * @memberOf Qualifiers\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier\";\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\n * Plays all frames rather than just delivering the first one as a static image.\n * Use this flag in addition to the flag or parameter controlling the delivery format,\n * for example f_auto or fl_awebp.\n\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\nfunction animated() {\n  return new FlagQualifier('animated');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated WebPs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction animatedWebP() {\n  return new FlagQualifier('awebp');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used together with automatic quality (q_auto):\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction anyFormat() {\n  return new FlagQualifier('any_format');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated PNGs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction animatedPng() {\n  return new FlagQualifier('apng');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image\n * (e.g., manually created using PhotoShop).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction clip() {\n  return new FlagQualifier('clip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\n * using PhotoShop)\n * using an evenodd clipping rule.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction clipEvenOdd() {\n  return new FlagQualifier('clip_evenodd');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\n * transformation.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction forceStrip() {\n  return new FlagQualifier('force_strip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Allows custom flag\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction custom(value) {\n  return new FlagQualifier(value);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction forceIcc() {\n  return new FlagQualifier('force_icc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Delivers the image as an attachment.\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction attachment(filename) {\n  return new FlagQualifier('attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\n * transformed image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction getInfo() {\n  return new FlagQualifier('getinfo');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\n * Delivering in this format requires a private CDN configuration.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction hlsv3() {\n  return new FlagQualifier('hlsv3');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Sets the cache-control to immutable for the asset.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction immutableCache() {\n  return new FlagQualifier('immutable_cache');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\n * recalculated to maintain the aspect ratio of the original image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction ignoreInitialAspectRatio() {\n  return new FlagQualifier('ignore_aspect_ratio');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps the copyright related fields when stripping meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction keepAttribution() {\n  return new FlagQualifier('keep_attribution');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * Keep the Display Aspect Ratio metadata of the uploaded video (if itâ€™s different from the current video\n * dimensions).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction keepDar() {\n  return new FlagQualifier('keep_dar');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps all meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction keepIptc() {\n  return new FlagQualifier('keep_iptc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\n * overlay or underlay instead of applying on the containing image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction layerApply() {\n  return new FlagQualifier('layer_apply');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Automatically use lossy compression when delivering animated GIF files.\n *\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\n * format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction lossy() {\n  return new FlagQualifier('lossy');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Convert the audio channel to mono\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction mono() {\n  return new FlagQualifier('mono');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow | Overflow in overlays}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction noOverflow() {\n  return new FlagQualifier('no_overflow');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction noStream() {\n  return new FlagQualifier('no_stream');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png24 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction png24() {\n  return new FlagQualifier('png24');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png32 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction png32() {\n  return new FlagQualifier('png32');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the PNG8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction png8() {\n  return new FlagQualifier('png8');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\n * delivered in PNG format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction preserveTransparency() {\n  return new FlagQualifier('preserve_transparency');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\n *\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\n * image is loaded.\n *\n * @param {string} mode The mode to determine a specific progressive outcome as follows:\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\n *          (less iterations). This is the default mode when using q_auto.\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\n *           the required resolution.\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\n *           a specific value for quality.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction progressive(mode) {\n  return new FlagQualifier('progressive', mode);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction regionRelative() {\n  return new FlagQualifier('region_relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\n * order to enable\n * PDF resizing and overlay manipulations.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction rasterize() {\n  return new FlagQualifier('rasterize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction relative() {\n  return new FlagQualifier('relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction sanitize() {\n  return new FlagQualifier('sanitize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\n * overlay.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction splice() {\n  return new FlagQualifier('splice');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction stripProfile() {\n  return new FlagQualifier('strip_profile');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description If the requested video transformation has already been generated, this flag works identically to\n * Flag::attachment.\n *\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\n * to begin immediately, streaming it as a fragmented video file.\n *\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\n * the download will begin only after the complete transformed video has been generated.\n *\n * Most standard video players successfully play fragmented video files without issue.\n *\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction streamingAttachment(filename) {\n  return new FlagQualifier('streaming_attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction tiff8Lzw() {\n  return new FlagQualifier('tiff8_lzw');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays | Tiling overlay}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction tiled() {\n  return new FlagQualifier('tiled');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\n * includes a directive to play only a section of the video).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction truncateTS() {\n  return new FlagQualifier('truncate_ts');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction waveform() {\n  return new FlagQualifier('waveform');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\n\n\nfunction ignoreMaskChannels() {\n  return new FlagQualifier('ignore_mask_channels');\n}\n\nvar Flag = {\n  animated: animated,\n  anyFormat: anyFormat,\n  animatedPng: animatedPng,\n  animatedWebP: animatedWebP,\n  clipEvenOdd: clipEvenOdd,\n  lossy: lossy,\n  preserveTransparency: preserveTransparency,\n  png8: png8,\n  png24: png24,\n  png32: png32,\n  progressive: progressive,\n  rasterize: rasterize,\n  sanitize: sanitize,\n  stripProfile: stripProfile,\n  tiff8Lzw: tiff8Lzw,\n  attachment: attachment,\n  forceIcc: forceIcc,\n  forceStrip: forceStrip,\n  getInfo: getInfo,\n  immutableCache: immutableCache,\n  keepAttribution: keepAttribution,\n  keepIptc: keepIptc,\n  custom: custom,\n  streamingAttachment: streamingAttachment,\n  hlsv3: hlsv3,\n  keepDar: keepDar,\n  noStream: noStream,\n  mono: mono,\n  layerApply: layerApply,\n  relative: relative,\n  regionRelative: regionRelative,\n  splice: splice,\n  truncateTS: truncateTS,\n  waveform: waveform,\n  ignoreInitialAspectRatio: ignoreInitialAspectRatio,\n  clip: clip,\n  tiled: tiled,\n  noOverflow: noOverflow,\n  ignoreMaskChannels: ignoreMaskChannels\n};\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/flag.js"],"names":["FlagQualifier","animated","animatedWebP","anyFormat","animatedPng","clip","clipEvenOdd","forceStrip","custom","value","forceIcc","attachment","filename","getInfo","hlsv3","immutableCache","ignoreInitialAspectRatio","keepAttribution","keepDar","keepIptc","layerApply","lossy","mono","noOverflow","noStream","png24","png32","png8","preserveTransparency","progressive","mode","regionRelative","rasterize","relative","sanitize","splice","stripProfile","streamingAttachment","tiff8Lzw","tiled","truncateTS","waveform","ignoreMaskChannels","Flag"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,sBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,GAAoB;AAChB,SAAO,IAAID,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,YAAT,GAAwB;AACpB,SAAO,IAAIF,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,SAAT,GAAqB;AACjB,SAAO,IAAIH,aAAJ,CAAkB,YAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,WAAT,GAAuB;AACnB,SAAO,IAAIJ,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,IAAT,GAAgB;AACZ,SAAO,IAAIL,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,WAAT,GAAuB;AACnB,SAAO,IAAIN,aAAJ,CAAkB,cAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,UAAT,GAAsB;AAClB,SAAO,IAAIP,aAAJ,CAAkB,aAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,MAAT,CAAgBC,KAAhB,EAAuB;AACnB,SAAO,IAAIT,aAAJ,CAAkBS,KAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,QAAT,GAAoB;AAChB,SAAO,IAAIV,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAO,IAAIZ,aAAJ,CAAkB,YAAlB,EAAgCY,QAAhC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,GAAmB;AACf,SAAO,IAAIb,aAAJ,CAAkB,SAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASc,KAAT,GAAiB;AACb,SAAO,IAAId,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,cAAT,GAA0B;AACtB,SAAO,IAAIf,aAAJ,CAAkB,iBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgB,wBAAT,GAAoC;AAChC,SAAO,IAAIhB,aAAJ,CAAkB,qBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiB,eAAT,GAA2B;AACvB,SAAO,IAAIjB,aAAJ,CAAkB,kBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,OAAT,GAAmB;AACf,SAAO,IAAIlB,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmB,QAAT,GAAoB;AAChB,SAAO,IAAInB,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoB,UAAT,GAAsB;AAClB,SAAO,IAAIpB,aAAJ,CAAkB,aAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqB,KAAT,GAAiB;AACb,SAAO,IAAIrB,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsB,IAAT,GAAgB;AACZ,SAAO,IAAItB,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuB,UAAT,GAAsB;AAClB,SAAO,IAAIvB,aAAJ,CAAkB,aAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASwB,QAAT,GAAoB;AAChB,SAAO,IAAIxB,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyB,KAAT,GAAiB;AACb,SAAO,IAAIzB,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS0B,KAAT,GAAiB;AACb,SAAO,IAAI1B,aAAJ,CAAkB,OAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2B,IAAT,GAAgB;AACZ,SAAO,IAAI3B,aAAJ,CAAkB,MAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4B,oBAAT,GAAgC;AAC5B,SAAO,IAAI5B,aAAJ,CAAkB,uBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6B,WAAT,CAAqBC,IAArB,EAA2B;AACvB,SAAO,IAAI9B,aAAJ,CAAkB,aAAlB,EAAiC8B,IAAjC,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,GAA0B;AACtB,SAAO,IAAI/B,aAAJ,CAAkB,iBAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgC,SAAT,GAAqB;AACjB,SAAO,IAAIhC,aAAJ,CAAkB,WAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiC,QAAT,GAAoB;AAChB,SAAO,IAAIjC,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkC,QAAT,GAAoB;AAChB,SAAO,IAAIlC,aAAJ,CAAkB,UAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,MAAT,GAAkB;AACd,SAAO,IAAInC,aAAJ,CAAkB,QAAlB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoC,YAAT,GAAwB;AACpB,SAAO,IAAIpC,aAAJ,CA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","sourcesContent":["/**\n * @description Defines flags that you can use to alter the default transformation behavior.\n * @namespace Flag\n * @memberOf Qualifiers\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier\";\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\n * Plays all frames rather than just delivering the first one as a static image.\n * Use this flag in addition to the flag or parameter controlling the delivery format,\n * for example f_auto or fl_awebp.\n\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animated() {\n    return new FlagQualifier('animated');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated WebPs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animatedWebP() {\n    return new FlagQualifier('awebp');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used together with automatic quality (q_auto):\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction anyFormat() {\n    return new FlagQualifier('any_format');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\n * original\n * animated file instead of only from the first still frame.\n *\n * Note that animated PNGs are not supported in all browsers and versions.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction animatedPng() {\n    return new FlagQualifier('apng');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image\n * (e.g., manually created using PhotoShop).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction clip() {\n    return new FlagQualifier('clip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\n * using PhotoShop)\n * using an evenodd clipping rule.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction clipEvenOdd() {\n    return new FlagQualifier('clip_evenodd');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\n * transformation.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction forceStrip() {\n    return new FlagQualifier('force_strip');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Allows custom flag\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction custom(value) {\n    return new FlagQualifier(value);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction forceIcc() {\n    return new FlagQualifier('force_icc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Delivers the image as an attachment.\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction attachment(filename) {\n    return new FlagQualifier('attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\n * transformed image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction getInfo() {\n    return new FlagQualifier('getinfo');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\n * Delivering in this format requires a private CDN configuration.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction hlsv3() {\n    return new FlagQualifier('hlsv3');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Sets the cache-control to immutable for the asset.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction immutableCache() {\n    return new FlagQualifier('immutable_cache');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\n * recalculated to maintain the aspect ratio of the original image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction ignoreInitialAspectRatio() {\n    return new FlagQualifier('ignore_aspect_ratio');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps the copyright related fields when stripping meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepAttribution() {\n    return new FlagQualifier('keep_attribution');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * Keep the Display Aspect Ratio metadata of the uploaded video (if itâ€™s different from the current video\n * dimensions).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepDar() {\n    return new FlagQualifier('keep_dar');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Keeps all meta-data.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction keepIptc() {\n    return new FlagQualifier('keep_iptc');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\n * overlay or underlay instead of applying on the containing image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction layerApply() {\n    return new FlagQualifier('layer_apply');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Automatically use lossy compression when delivering animated GIF files.\n *\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\n * format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction lossy() {\n    return new FlagQualifier('lossy');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Convert the audio channel to mono\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction mono() {\n    return new FlagQualifier('mono');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow | Overflow in overlays}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction noOverflow() {\n    return new FlagQualifier('no_overflow');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction noStream() {\n    return new FlagQualifier('no_stream');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png24 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png24() {\n    return new FlagQualifier('png24');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the png32 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png32() {\n    return new FlagQualifier('png32');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generate PNG images in the PNG8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction png8() {\n    return new FlagQualifier('png8');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\n * delivered in PNG format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction preserveTransparency() {\n    return new FlagQualifier('preserve_transparency');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\n *\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\n * image is loaded.\n *\n * @param {string} mode The mode to determine a specific progressive outcome as follows:\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\n *          (less iterations). This is the default mode when using q_auto.\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\n *           the required resolution.\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\n *           a specific value for quality.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction progressive(mode) {\n    return new FlagQualifier('progressive', mode);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction regionRelative() {\n    return new FlagQualifier('region_relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\n * order to enable\n * PDF resizing and overlay manipulations.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction rasterize() {\n    return new FlagQualifier('rasterize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction relative() {\n    return new FlagQualifier('relative');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction sanitize() {\n    return new FlagQualifier('sanitize');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\n * overlay.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction splice() {\n    return new FlagQualifier('splice');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction stripProfile() {\n    return new FlagQualifier('strip_profile');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description If the requested video transformation has already been generated, this flag works identically to\n * Flag::attachment.\n *\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\n * to begin immediately, streaming it as a fragmented video file.\n *\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\n * the download will begin only after the complete transformed video has been generated.\n *\n * Most standard video players successfully play fragmented video files without issue.\n *\n * @param {string} filename The attachment's filename\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction streamingAttachment(filename) {\n    return new FlagQualifier('streaming_attachment', filename);\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction tiff8Lzw() {\n    return new FlagQualifier('tiff8_lzw');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#tiling_overlays | Tiling overlay}\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction tiled() {\n    return new FlagQualifier('tiled');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\n * includes a directive to play only a section of the video).\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction truncateTS() {\n    return new FlagQualifier('truncate_ts');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction waveform() {\n    return new FlagQualifier('waveform');\n}\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Flag\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\n * @return {Qualifiers.Flag.FlagQualifier}\n */\nfunction ignoreMaskChannels() {\n    return new FlagQualifier('ignore_mask_channels');\n}\nconst Flag = {\n    animated, anyFormat, animatedPng, animatedWebP,\n    clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize,\n    sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache,\n    keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono,\n    layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip,\n    tiled, noOverflow, ignoreMaskChannels\n};\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };\n"]},"metadata":{},"sourceType":"module"}