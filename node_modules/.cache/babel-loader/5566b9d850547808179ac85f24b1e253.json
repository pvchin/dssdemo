{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { base64Encode } from \"../../internal/utils/base64Encode\";\nimport { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @memberOf Actions.CustomFunction\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\n */\n\nvar CustomFunctionAction = /*#__PURE__*/function (_Action) {\n  _inherits(CustomFunctionAction, _Action);\n\n  var _super = _createSuper(CustomFunctionAction);\n\n  /**\n   *\n   * @param {string} fn The custom function to use, can be a URL or a publicID\n   */\n  function CustomFunctionAction(fn) {\n    var _this;\n\n    _classCallCheck(this, CustomFunctionAction);\n\n    _this = _super.call(this);\n    _this.fn = fn;\n    return _this;\n  }\n\n  _createClass(CustomFunctionAction, [{\n    key: \"encodeCustomFunctionString\",\n    value: function encodeCustomFunctionString(fn) {\n      var encodedSource = base64Encode(fn);\n      return encodedSource;\n    }\n    /**\n     * Use a WASM as a custom function,\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n     */\n\n  }, {\n    key: \"asWasm\",\n    value: function asWasm() {\n      this.mode = 'wasm';\n      return this;\n    }\n    /**\n     * Use a remote URL as a custom function\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n     */\n\n  }, {\n    key: \"asRemote\",\n    value: function asRemote() {\n      this.mode = 'remote';\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      this.encodedFn = this.fn;\n\n      if (this.mode === 'remote') {\n        this.encodedFn = this.encodeCustomFunctionString(this.fn);\n      }\n\n      return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return _get(_getPrototypeOf(CustomFunctionAction.prototype), \"toString\", this).call(this).replace(/\\//g, ':');\n    }\n  }]);\n\n  return CustomFunctionAction;\n}(Action);\n\nexport default CustomFunctionAction;","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/customFunction/CustomFunctionAction.js"],"names":["base64Encode","Action","QualifierValue","Qualifier","CustomFunctionAction","fn","encodedSource","mode","encodedFn","encodeCustomFunctionString","addQualifier","pre","replace"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,mCAA7B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA;AACA;AACA;AACA;;IACMC,oB;;;;;AACF;AACJ;AACA;AACA;AACI,gCAAYC,EAAZ,EAAgB;AAAA;;AAAA;;AACZ;AACA,UAAKA,EAAL,GAAUA,EAAV;AAFY;AAGf;;;;WACD,oCAA2BA,EAA3B,EAA+B;AAC3B,UAAMC,aAAa,GAAGN,YAAY,CAACK,EAAD,CAAlC;AACA,aAAOC,aAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,kBAAS;AACL,WAAKC,IAAL,GAAY,MAAZ;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,oBAAW;AACP,WAAKA,IAAL,GAAY,QAAZ;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAChB,WAAKC,SAAL,GAAiB,KAAKH,EAAtB;;AACA,UAAI,KAAKE,IAAL,KAAc,QAAlB,EAA4B;AACxB,aAAKC,SAAL,GAAiB,KAAKC,0BAAL,CAAgC,KAAKJ,EAArC,CAAjB;AACH;;AACD,aAAO,KAAKK,YAAL,CAAkB,IAAIP,SAAJ,CAAc,IAAd,EAAoB,IAAID,cAAJ,CAAmB,CAAC,KAAKS,GAAN,EAAW,KAAKJ,IAAhB,EAAsB,KAAKC,SAA3B,CAAnB,CAApB,CAAlB,CAAP;AACH;;;WACD,oBAAW;AACP,aAAO,mFACFI,OADE,CACM,KADN,EACa,GADb,CAAP;AAEH;;;;EAvC8BX,M;;AAyCnC,eAAeG,oBAAf","sourcesContent":["import { base64Encode } from \"../../internal/utils/base64Encode\";\nimport { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @memberOf Actions.CustomFunction\n * @see Visit {@link Actions.CustomFunction|Custom functions} for an example\n */\nclass CustomFunctionAction extends Action {\n    /**\n     *\n     * @param {string} fn The custom function to use, can be a URL or a publicID\n     */\n    constructor(fn) {\n        super();\n        this.fn = fn;\n    }\n    encodeCustomFunctionString(fn) {\n        const encodedSource = base64Encode(fn);\n        return encodedSource;\n    }\n    /**\n     * Use a WASM as a custom function,\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n     */\n    asWasm() {\n        this.mode = 'wasm';\n        return this;\n    }\n    /**\n     * Use a remote URL as a custom function\n     * Used with the builders of `remote` and `wasm` from {@link Actions.CustomFunction|Custom functions}\n     */\n    asRemote() {\n        this.mode = 'remote';\n        return this;\n    }\n    prepareQualifiers() {\n        this.encodedFn = this.fn;\n        if (this.mode === 'remote') {\n            this.encodedFn = this.encodeCustomFunctionString(this.fn);\n        }\n        return this.addQualifier(new Qualifier('fn', new QualifierValue([this.pre, this.mode, this.encodedFn])));\n    }\n    toString() {\n        return super.toString()\n            .replace(/\\//g, ':');\n    }\n}\nexport default CustomFunctionAction;\n"]},"metadata":{},"sourceType":"module"}