{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nvar VectorizeEffectAction = /*#__PURE__*/function (_Action) {\n  _inherits(VectorizeEffectAction, _Action);\n\n  var _super = _createSuper(VectorizeEffectAction);\n\n  function VectorizeEffectAction() {\n    _classCallCheck(this, VectorizeEffectAction);\n\n    return _super.call(this);\n  }\n  /**\n   * @description The number of colors. (Range: 2 to 30, Server default: 10)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  _createClass(VectorizeEffectAction, [{\n    key: \"numOfColors\",\n    value: function numOfColors(num) {\n      this._numOfColors = num;\n      return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n\n  }, {\n    key: \"detailsLevel\",\n    value: function detailsLevel(num) {\n      this._detailsLevel = num;\n      return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n\n  }, {\n    key: \"despeckleLevel\",\n    value: function despeckleLevel(num) {\n      this._despeckleLevel = num;\n      return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n\n  }, {\n    key: \"cornersLevel\",\n    value: function cornersLevel(num) {\n      this._cornersLevel = num;\n      return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n\n  }, {\n    key: \"paths\",\n    value: function paths(num) {\n      this._paths = num;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      var str = 'vectorize';\n\n      if (this._numOfColors) {\n        str += \":\".concat(new QualifierValue(\"colors:\".concat(this._numOfColors)).toString());\n      }\n\n      if (this._detailsLevel) {\n        str += \":\".concat(new QualifierValue(\"detail:\".concat(this._detailsLevel)).toString());\n      }\n\n      if (this._despeckleLevel) {\n        str += \":\".concat(new QualifierValue(\"despeckle:\".concat(this._despeckleLevel)).toString());\n      }\n\n      if (this._paths) {\n        str += \":\".concat(new QualifierValue(\"paths:\".concat(this._paths)).toString());\n      }\n\n      if (this._cornersLevel) {\n        str += \":\".concat(new QualifierValue(\"corners:\".concat(this._cornersLevel)).toString());\n      }\n\n      this.addQualifier(new Qualifier('e', str));\n    }\n  }]);\n\n  return VectorizeEffectAction;\n}(Action);\n\nexport { VectorizeEffectAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/effect/vectorize.js"],"names":["Action","Qualifier","QualifierValue","VectorizeEffectAction","num","_numOfColors","_detailsLevel","_despeckleLevel","_cornersLevel","_paths","str","toString","addQualifier"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,qB;;;;;AACF,mCAAc;AAAA;;AAAA;AAEb;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,qBAAYC,GAAZ,EAAiB;AACb,WAAKC,YAAL,GAAoBD,GAApB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,sBAAaA,GAAb,EAAkB;AACd,WAAKE,aAAL,GAAqBF,GAArB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,wBAAeA,GAAf,EAAoB;AAChB,WAAKG,eAAL,GAAuBH,GAAvB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,sBAAaA,GAAb,EAAkB;AACd,WAAKI,aAAL,GAAqBJ,GAArB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,eAAMA,GAAN,EAAW;AACP,WAAKK,MAAL,GAAcL,GAAd;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAChB,UAAIM,GAAG,GAAG,WAAV;;AACA,UAAI,KAAKL,YAAT,EAAuB;AACnBK,QAAAA,GAAG,eAAQ,IAAIR,cAAJ,kBAA6B,KAAKG,YAAlC,GAAkDM,QAAlD,EAAR,CAAH;AACH;;AACD,UAAI,KAAKL,aAAT,EAAwB;AACpBI,QAAAA,GAAG,eAAQ,IAAIR,cAAJ,kBAA6B,KAAKI,aAAlC,GAAmDK,QAAnD,EAAR,CAAH;AACH;;AACD,UAAI,KAAKJ,eAAT,EAA0B;AACtBG,QAAAA,GAAG,eAAQ,IAAIR,cAAJ,qBAAgC,KAAKK,eAArC,GAAwDI,QAAxD,EAAR,CAAH;AACH;;AACD,UAAI,KAAKF,MAAT,EAAiB;AACbC,QAAAA,GAAG,eAAQ,IAAIR,cAAJ,iBAA4B,KAAKO,MAAjC,GAA2CE,QAA3C,EAAR,CAAH;AACH;;AACD,UAAI,KAAKH,aAAT,EAAwB;AACpBE,QAAAA,GAAG,eAAQ,IAAIR,cAAJ,mBAA8B,KAAKM,aAAnC,GAAoDG,QAApD,EAAR,CAAH;AACH;;AACD,WAAKC,YAAL,CAAkB,IAAIX,SAAJ,CAAc,GAAd,EAAmBS,GAAnB,CAAlB;AACH;;;;EAnE+BV,M;;AAqEpC,SAASG,qBAAT","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\n     * @param {number | string} num\n     * @return {this}\n     */\n    numOfColors(num) {\n        this._numOfColors = num;\n        return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n    detailsLevel(num) {\n        this._detailsLevel = num;\n        return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n    despeckleLevel(num) {\n        this._despeckleLevel = num;\n        return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n    cornersLevel(num) {\n        this._cornersLevel = num;\n        return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n    paths(num) {\n        this._paths = num;\n        return this;\n    }\n    prepareQualifiers() {\n        let str = 'vectorize';\n        if (this._numOfColors) {\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n        }\n        if (this._detailsLevel) {\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n        }\n        if (this._despeckleLevel) {\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n        }\n        if (this._paths) {\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n        }\n        if (this._cornersLevel) {\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n}\nexport { VectorizeEffectAction };\n"]},"metadata":{},"sourceType":"module"}