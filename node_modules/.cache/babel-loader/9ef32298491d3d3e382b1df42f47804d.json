{"ast":null,"code":"import { CONDITIONAL_OPERATORS } from \"../internal/internalConstants\";\nimport { ExpressionQualifier } from \"./expression/ExpressionQualifier\";\n/**\n * @description\n * Used for variable or conditional expressions\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/user_defined_variables#arithmetic_expressions | Arithmetic expressions }\n * @namespace Expression\n * @memberOf Qualifiers\n */\n\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Expression\n * @return {Qualifiers.Expression.ExpressionQualifier}\n */\n\nfunction expression(exp) {\n  return new ExpressionQualifier(exp.toString().split(\" \").map(function (val) {\n    return CONDITIONAL_OPERATORS[val] || val;\n  }).join(\"_\"));\n} // as a namespace\n\n\nvar Expression = {\n  expression: expression\n};\nexport { Expression, expression };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/expression.js"],"names":["CONDITIONAL_OPERATORS","ExpressionQualifier","expression","exp","toString","split","map","val","join","Expression"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,+BAAtC;AACA,SAASC,mBAAT,QAAoC,kCAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACrB,SAAO,IAAIF,mBAAJ,CAAwBE,GAAG,CAC7BC,QAD0B,GAE1BC,KAF0B,CAEpB,GAFoB,EAG1BC,GAH0B,CAGtB,UAACC,GAAD;AAAA,WAASP,qBAAqB,CAACO,GAAD,CAArB,IAA8BA,GAAvC;AAAA,GAHsB,EAI1BC,IAJ0B,CAIrB,GAJqB,CAAxB,CAAP;AAKH,C,CACD;;;AACA,IAAMC,UAAU,GAAG;AACfP,EAAAA,UAAU,EAAVA;AADe,CAAnB;AAGA,SAASO,UAAT,EAAqBP,UAArB","sourcesContent":["import { CONDITIONAL_OPERATORS } from \"../internal/internalConstants\";\nimport { ExpressionQualifier } from \"./expression/ExpressionQualifier\";\n/**\n * @description\n * Used for variable or conditional expressions\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/user_defined_variables#arithmetic_expressions | Arithmetic expressions }\n * @namespace Expression\n * @memberOf Qualifiers\n */\n/**\n * @summary qualifier\n * @memberOf Qualifiers.Expression\n * @return {Qualifiers.Expression.ExpressionQualifier}\n */\nfunction expression(exp) {\n    return new ExpressionQualifier(exp\n        .toString()\n        .split(\" \")\n        .map((val) => CONDITIONAL_OPERATORS[val] || val)\n        .join(\"_\"));\n}\n// as a namespace\nconst Expression = {\n    expression\n};\nexport { Expression, expression };\n"]},"metadata":{},"sourceType":"module"}