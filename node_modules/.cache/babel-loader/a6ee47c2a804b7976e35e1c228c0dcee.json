{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\n *                The class implements the Builder pattern, where strength() and preserveColor()\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nvar StyleTransfer = /*#__PURE__*/function (_Action) {\n  _inherits(StyleTransfer, _Action);\n\n  var _super = _createSuper(StyleTransfer);\n\n  /**\n   * The Image Source used to create the style transfer,\n   * Use the Image Source builder to quickly create a source:\n   * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/base/qualifiers/sources';}\n   * </br>Create: `Source.image('dog')`\n   * @param {ImageSource} imageSource\n   */\n  function StyleTransfer(imageSource) {\n    var _this;\n\n    _classCallCheck(this, StyleTransfer);\n\n    _this = _super.call(this);\n    _this.imageSource = imageSource;\n    return _this;\n  }\n  /**\n   * Determines the strength in which the styleTransfer is applied.\n   * @param {number} [effectStrength] - The strength level, 1-100, default: 100\n   * @return {this}\n   */\n\n\n  _createClass(StyleTransfer, [{\n    key: \"strength\",\n    value: function strength() {\n      var effectStrength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.effectStrength = effectStrength;\n      return this;\n    }\n    /**\n     * More aggressively preserves the colors of the the target photo,\n     * Can be used with `strength()` to enhance this behaviour\n     * @param {boolean} bool\n     * @return {this}\n     */\n\n  }, {\n    key: \"preserveColor\",\n    value: function preserveColor() {\n      var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.preserve = bool;\n      return this;\n    }\n    /**\n     * The `build` phase of the Action, used internally to concat all the options received into a single string.\n     * The result of this method is the toString() of the imageLayer provided in the constructor.\n     * @return {string}\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var NAME = 'style_transfer';\n      var PRES = this.preserve ? 'preserve_color' : null;\n      var STRENGTH = this.effectStrength; // Create the style effect\n\n      var styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH])); // Handle the source for publicID,\n\n      var sourceOpenString = this.imageSource.getOpenSourceString('l'); // Handle source transformation\n\n      var imgTx = this.imageSource.getTransformation();\n      var sourceTransformation = imgTx ? imgTx.toString() : '';\n      return [sourceOpenString, sourceTransformation, \"\".concat(styleEffect, \",fl_layer_apply\")].filter(function (a) {\n        return a;\n      }).join('/');\n    }\n  }]);\n\n  return StyleTransfer;\n}(Action);\n\nexport { StyleTransfer };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/effect/styleTransfer.js"],"names":["QualifierValue","Action","Qualifier","StyleTransfer","imageSource","effectStrength","bool","preserve","NAME","PRES","STRENGTH","styleEffect","sourceOpenString","getOpenSourceString","imgTx","getTransformation","sourceTransformation","toString","filter","a","join"],"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,yCAA/B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,a;;;;;AACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACI,yBAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AACrB;AACA,UAAKA,WAAL,GAAmBA,WAAnB;AAFqB;AAGxB;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,oBAAgC;AAAA,UAAvBC,cAAuB,uEAAN,IAAM;AAC5B,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;;WACI,yBAA2B;AAAA,UAAbC,IAAa,uEAAN,IAAM;AACvB,WAAKC,QAAL,GAAgBD,IAAhB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,oBAAW;AACP,UAAME,IAAI,GAAG,gBAAb;AACA,UAAMC,IAAI,GAAG,KAAKF,QAAL,GAAgB,gBAAhB,GAAmC,IAAhD;AACA,UAAMG,QAAQ,GAAG,KAAKL,cAAtB,CAHO,CAIP;;AACA,UAAMM,WAAW,GAAG,IAAIT,SAAJ,CAAc,GAAd,EAAmB,IAAIF,cAAJ,CAAmB,CAACQ,IAAD,EAAOC,IAAP,EAAaC,QAAb,CAAnB,CAAnB,CAApB,CALO,CAMP;;AACA,UAAME,gBAAgB,GAAG,KAAKR,WAAL,CAAiBS,mBAAjB,CAAqC,GAArC,CAAzB,CAPO,CAQP;;AACA,UAAMC,KAAK,GAAG,KAAKV,WAAL,CAAiBW,iBAAjB,EAAd;AACA,UAAMC,oBAAoB,GAAGF,KAAK,GAAGA,KAAK,CAACG,QAAN,EAAH,GAAsB,EAAxD;AACA,aAAO,CACHL,gBADG,EAEHI,oBAFG,YAGAL,WAHA,sBAILO,MAJK,CAIE,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAJF,EAIYC,IAJZ,CAIiB,GAJjB,CAAP;AAKH;;;;EApDuBnB,M;;AAsD5B,SAASE,aAAT","sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Action } from \"../../internal/Action\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description - This Action, while belonging to Effect, acts as a modified overlay.\n *                The class implements the Builder pattern, where strength() and preserveColor()\n *                are applied to the instance, and toString() is responsible to combining them into the right result.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass StyleTransfer extends Action {\n    /**\n     * The Image Source used to create the style transfer,\n     * Use the Image Source builder to quickly create a source:\n     * </br>Import: {@link Qualifiers.Source|import Sources from '@cloudinary/base/qualifiers/sources';}\n     * </br>Create: `Source.image('dog')`\n     * @param {ImageSource} imageSource\n     */\n    constructor(imageSource) {\n        super();\n        this.imageSource = imageSource;\n    }\n    /**\n     * Determines the strength in which the styleTransfer is applied.\n     * @param {number} [effectStrength] - The strength level, 1-100, default: 100\n     * @return {this}\n     */\n    strength(effectStrength = null) {\n        this.effectStrength = effectStrength;\n        return this;\n    }\n    /**\n     * More aggressively preserves the colors of the the target photo,\n     * Can be used with `strength()` to enhance this behaviour\n     * @param {boolean} bool\n     * @return {this}\n     */\n    preserveColor(bool = true) {\n        this.preserve = bool;\n        return this;\n    }\n    /**\n     * The `build` phase of the Action, used internally to concat all the options received into a single string.\n     * The result of this method is the toString() of the imageLayer provided in the constructor.\n     * @return {string}\n     */\n    toString() {\n        const NAME = 'style_transfer';\n        const PRES = this.preserve ? 'preserve_color' : null;\n        const STRENGTH = this.effectStrength;\n        // Create the style effect\n        const styleEffect = new Qualifier('e', new QualifierValue([NAME, PRES, STRENGTH]));\n        // Handle the source for publicID,\n        const sourceOpenString = this.imageSource.getOpenSourceString('l');\n        // Handle source transformation\n        const imgTx = this.imageSource.getTransformation();\n        const sourceTransformation = imgTx ? imgTx.toString() : '';\n        return [\n            sourceOpenString,\n            sourceTransformation,\n            `${styleEffect},fl_layer_apply`\n        ].filter((a) => a).join('/');\n    }\n}\nexport { StyleTransfer };\n"]},"metadata":{},"sourceType":"module"}