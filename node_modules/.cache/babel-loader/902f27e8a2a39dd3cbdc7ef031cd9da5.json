{"ast":null,"code":"import { OCR } from \"./gravity/OCR/OCR\";\nimport { CompassGravity } from \"./gravity/compassGravity/CompassGravity\";\nimport { FocusOnGravity } from \"./gravity/focusOnGravity/FocusOnGravity\";\nimport { AutoGravity } from \"./gravity/autoGravity/AutoGravity\";\nimport { XYCenterGravity } from \"./gravity/xyCenterGravity/XYCenterGravity\";\n/**\n * @description Defines the gravity based on directional values from a compass.\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity | Control gravity for images}\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity | Control gravity for videos}\n * @param {Qualifiers.Compass} direction A compass Values\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {compass} from \"@cloudinary/base/qualifiers/gravity\";\n * import {north} from \"@cloudinary/base/qualifiers/compass\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n * @return {CompassGravity}\n */\n\nfunction compass(direction) {\n  return new CompassGravity(direction);\n}\n/**\n * @summary qualifier\n * @description Specifies what to focus on, for example: faces, objects, eyes, etc.\n * @param {...Qualifier.FocusOn} args One or more objects to focus on\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {focusOn} from \"@cloudinary/base/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n * import {cat} from \"@cloudinary/base/qualifiers/focusOn\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(focusOn(cat())))\n * @return {FocusOnGravity}\n */\n\n\nfunction focusOn(...args) {\n  const res = [...args];\n  return new FocusOnGravity(res);\n}\n/**\n * @summary qualifier\n * @description Automatically identifies the most interesting regions in the asset, can be qualified further by including what to focus on.\n * @memberOf Qualifiers.Gravity\n * @return {Qualifiers.Gravity.AutoGravity}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {autoGravity} from \"@cloudinary/base/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity()))\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {autoGravity} from \"@cloudinary/base/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n * import {cat} from \"@cloudinary/base/qualifiers/focusOn\";\n * import {AutoFocus} from \"@cloudinary/base/qualifiers/autoFocus\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity().autoFocus(AutoFocus.focusOn(cat()))))\n */\n\n\nfunction autoGravity() {\n  return new AutoGravity();\n}\n/**\n * @summary qualifier\n * @description Detect all text elements in an image using the {@link https://cloudinary.com/documentation/image_transformations#control_gravity | OCR Text Detection and Extraction add-on} and use the detected bounding box coordinates as the basis of the transformation.\n * @memberOf Qualifiers.Gravity\n * @return {OCR}\n */\n\n\nfunction ocr() {\n  return new OCR();\n}\n/**\n * @summary qualifier\n * @description Set the center of gravity to the given x & y coordinates.\n * @memberOf Qualifiers.Gravity\n * @return {XYCenterGravity}\n */\n\n\nfunction xyCenter() {\n  return new XYCenterGravity();\n}\n/**\n * @description A qualifier that determines which part of an asset to focus on, and thus which part of the asset to keep, </br>\n *              when any part of the asset is cropped. For overlays, this setting determines where to place the overlay.\n * @namespace Gravity\n * @memberOf Qualifiers\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {compass} from \"@cloudinary/base/qualifiers/gravity\";\n * import {north} from \"@cloudinary/base/qualifiers/compass\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n *\n * // Expand every function separately to see its own example\n */\n\n\nconst Gravity = {\n  compass: compass,\n  autoGravity: autoGravity,\n  focusOn: focusOn,\n  ocr: ocr,\n  xyCenter\n};\nexport { Gravity, compass, autoGravity, focusOn, ocr, xyCenter };","map":{"version":3,"sources":["D:/react-myprojects/dss/node_modules/@cloudinary/base/qualifiers/gravity.js"],"names":["OCR","CompassGravity","FocusOnGravity","AutoGravity","XYCenterGravity","compass","direction","focusOn","args","res","autoGravity","ocr","xyCenter","Gravity"],"mappings":"AAAA,SAASA,GAAT,QAAoB,mBAApB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,SAASC,eAAT,QAAgC,2CAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,SAAjB,EAA4B;AACxB,SAAO,IAAIL,cAAJ,CAAmBK,SAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,CAAiB,GAAGC,IAApB,EAA0B;AACtB,QAAMC,GAAG,GAAG,CAAC,GAAGD,IAAJ,CAAZ;AACA,SAAO,IAAIN,cAAJ,CAAmBO,GAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,GAAuB;AACnB,SAAO,IAAIP,WAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,GAAT,GAAe;AACX,SAAO,IAAIX,GAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,QAAT,GAAoB;AAChB,SAAO,IAAIR,eAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMS,OAAO,GAAG;AACZR,EAAAA,OAAO,EAAEA,OADG;AAEZK,EAAAA,WAAW,EAAEA,WAFD;AAGZH,EAAAA,OAAO,EAAEA,OAHG;AAIZI,EAAAA,GAAG,EAAEA,GAJO;AAKZC,EAAAA;AALY,CAAhB;AAOA,SAASC,OAAT,EAAkBR,OAAlB,EAA2BK,WAA3B,EAAwCH,OAAxC,EAAiDI,GAAjD,EAAsDC,QAAtD","sourcesContent":["import { OCR } from \"./gravity/OCR/OCR\";\nimport { CompassGravity } from \"./gravity/compassGravity/CompassGravity\";\nimport { FocusOnGravity } from \"./gravity/focusOnGravity/FocusOnGravity\";\nimport { AutoGravity } from \"./gravity/autoGravity/AutoGravity\";\nimport { XYCenterGravity } from \"./gravity/xyCenterGravity/XYCenterGravity\";\n/**\n * @description Defines the gravity based on directional values from a compass.\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity | Control gravity for images}\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#control_gravity | Control gravity for videos}\n * @param {Qualifiers.Compass} direction A compass Values\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {compass} from \"@cloudinary/base/qualifiers/gravity\";\n * import {north} from \"@cloudinary/base/qualifiers/compass\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n * @return {CompassGravity}\n */\nfunction compass(direction) {\n    return new CompassGravity(direction);\n}\n/**\n * @summary qualifier\n * @description Specifies what to focus on, for example: faces, objects, eyes, etc.\n * @param {...Qualifier.FocusOn} args One or more objects to focus on\n * @memberOf Qualifiers.Gravity\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {focusOn} from \"@cloudinary/base/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n * import {cat} from \"@cloudinary/base/qualifiers/focusOn\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(focusOn(cat())))\n * @return {FocusOnGravity}\n */\nfunction focusOn(...args) {\n    const res = [...args];\n    return new FocusOnGravity(res);\n}\n/**\n * @summary qualifier\n * @description Automatically identifies the most interesting regions in the asset, can be qualified further by including what to focus on.\n * @memberOf Qualifiers.Gravity\n * @return {Qualifiers.Gravity.AutoGravity}\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {autoGravity} from \"@cloudinary/base/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity()))\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {autoGravity} from \"@cloudinary/base/qualifiers/gravity\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n * import {cat} from \"@cloudinary/base/qualifiers/focusOn\";\n * import {AutoFocus} from \"@cloudinary/base/qualifiers/autoFocus\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(autoGravity().autoFocus(AutoFocus.focusOn(cat()))))\n */\nfunction autoGravity() {\n    return new AutoGravity();\n}\n/**\n * @summary qualifier\n * @description Detect all text elements in an image using the {@link https://cloudinary.com/documentation/image_transformations#control_gravity | OCR Text Detection and Extraction add-on} and use the detected bounding box coordinates as the basis of the transformation.\n * @memberOf Qualifiers.Gravity\n * @return {OCR}\n */\nfunction ocr() {\n    return new OCR();\n}\n/**\n * @summary qualifier\n * @description Set the center of gravity to the given x & y coordinates.\n * @memberOf Qualifiers.Gravity\n * @return {XYCenterGravity}\n */\nfunction xyCenter() {\n    return new XYCenterGravity();\n}\n/**\n * @description A qualifier that determines which part of an asset to focus on, and thus which part of the asset to keep, </br>\n *              when any part of the asset is cropped. For overlays, this setting determines where to place the overlay.\n * @namespace Gravity\n * @memberOf Qualifiers\n * @example\n * import {Cloudinary} from \"@cloudinary/base\";\n * import {compass} from \"@cloudinary/base/qualifiers/gravity\";\n * import {north} from \"@cloudinary/base/qualifiers/compass\";\n * import {crop} from \"@cloudinary/base/actions/resize\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.resize(crop().width(300).gravity(compass(north())))\n *\n * // Expand every function separately to see its own example\n */\nconst Gravity = {\n    compass: compass,\n    autoGravity: autoGravity,\n    focusOn: focusOn,\n    ocr: ocr,\n    xyCenter\n};\nexport { Gravity, compass, autoGravity, focusOn, ocr, xyCenter };\n"]},"metadata":{},"sourceType":"module"}