{"ast":null,"code":"import { scale } from \"@cloudinary/base/actions/resize\";\nimport debounce from 'lodash.debounce';\nimport { isNum } from '../utils/isNum';\nimport { isBrowser } from \"../utils/isBrowser\";\nimport { Action } from \"@cloudinary/base/internal/Action\";\nimport { isImage } from \"../utils/isImage\";\n/**\n * @namespace\n * @description Updates the src with the size of the parent element and triggers a resize event for\n * subsequent resizing.\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins=[(responsive(100))] plugins=[(responsive([800, 1000, 1400]))] />\n */\n\nexport function responsive(steps) {\n  return responsivePlugin.bind(null, steps);\n}\n/**\n * @description Responsive plugin\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @param element {HTMLImageElement} The image element\n * @param responsiveImage {CloudinaryImage}\n * @param htmlPluginState {HtmlPluginState} holds cleanup callbacks and event subscriptions\n */\n\nfunction responsivePlugin(steps, element, responsiveImage, htmlPluginState) {\n  if (!isBrowser()) return;\n  if (!isImage(element)) return;\n  return new Promise(function (resolve) {\n    htmlPluginState.cleanupCallbacks.push(function () {\n      window.removeEventListener(\"resize\", resizeRef);\n      resolve('canceled');\n    });\n    var containerSize = element.parentElement.clientWidth;\n    responsiveImage.resize(scale().width(containerSize).setActionTag('responsive'));\n    var resizeRef;\n    htmlPluginState.pluginEventSubscription.push(function () {\n      window.addEventListener('resize', resizeRef = debounce(function () {\n        onResize(steps, element, responsiveImage);\n      }, 100));\n    });\n    resolve();\n  });\n}\n/**\n * On resize updates image src\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @param element {HTMLImageElement} The image element\n * @param responsiveImage {CloudinaryImage}\n */\n\n\nfunction onResize(steps, element, responsiveImage) {\n  updateByContainerWidth(steps, element, responsiveImage);\n  element.src = responsiveImage.toURL();\n}\n/**\n * Updates the responsiveImage by container width.\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @param element {HTMLImageElement} The image element\n * @param responsiveImage {CloudinaryImage}\n */\n\n\nfunction updateByContainerWidth(steps, element, responsiveImage) {\n  var resizeValue = element.parentElement.clientWidth;\n\n  if (isNum(steps)) {\n    resizeValue = Math.ceil(resizeValue / steps) * steps;\n  } else if (Array.isArray(steps)) {\n    resizeValue = steps.reduce(function (prev, curr) {\n      return Math.abs(curr - resizeValue) < Math.abs(prev - resizeValue) ? curr : prev;\n    });\n  }\n\n  responsiveImage.transformation.actions.forEach(function (action, index) {\n    if (action instanceof Action && action.getActionTag() === 'responsive') {\n      responsiveImage.transformation.actions[index] = scale(resizeValue).setActionTag('responsive');\n    }\n  });\n}","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/html/plugins/responsive.js"],"names":["scale","debounce","isNum","isBrowser","Action","isImage","responsive","steps","responsivePlugin","bind","element","responsiveImage","htmlPluginState","Promise","resolve","cleanupCallbacks","push","window","removeEventListener","resizeRef","containerSize","parentElement","clientWidth","resize","width","setActionTag","pluginEventSubscription","addEventListener","onResize","updateByContainerWidth","src","toURL","resizeValue","Math","ceil","Array","isArray","reduce","prev","curr","abs","transformation","actions","forEach","action","index","getActionTag"],"mappings":"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","sourcesContent":["import { scale } from \"@cloudinary/base/actions/resize\";\nimport debounce from 'lodash.debounce';\nimport { isNum } from '../utils/isNum';\nimport { isBrowser } from \"../utils/isBrowser\";\nimport { Action } from \"@cloudinary/base/internal/Action\";\nimport { isImage } from \"../utils/isImage\";\n/**\n * @namespace\n * @description Updates the src with the size of the parent element and triggers a resize event for\n * subsequent resizing.\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @return {Plugin}\n * @example\n * <AdvancedImage cldImg={img} plugins=[(responsive(100))] plugins=[(responsive([800, 1000, 1400]))] />\n */\nexport function responsive(steps) {\n    return responsivePlugin.bind(null, steps);\n}\n/**\n * @description Responsive plugin\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @param element {HTMLImageElement} The image element\n * @param responsiveImage {CloudinaryImage}\n * @param htmlPluginState {HtmlPluginState} holds cleanup callbacks and event subscriptions\n */\nfunction responsivePlugin(steps, element, responsiveImage, htmlPluginState) {\n    if (!isBrowser())\n        return;\n    if (!isImage(element))\n        return;\n    return new Promise(function (resolve) {\n        htmlPluginState.cleanupCallbacks.push(function () {\n            window.removeEventListener(\"resize\", resizeRef);\n            resolve('canceled');\n        });\n        var containerSize = element.parentElement.clientWidth;\n        responsiveImage.resize(scale().width(containerSize).setActionTag('responsive'));\n        var resizeRef;\n        htmlPluginState.pluginEventSubscription.push(function () {\n            window.addEventListener('resize', resizeRef = debounce(function () {\n                onResize(steps, element, responsiveImage);\n            }, 100));\n        });\n        resolve();\n    });\n}\n/**\n * On resize updates image src\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @param element {HTMLImageElement} The image element\n * @param responsiveImage {CloudinaryImage}\n */\nfunction onResize(steps, element, responsiveImage) {\n    updateByContainerWidth(steps, element, responsiveImage);\n    element.src = responsiveImage.toURL();\n}\n/**\n * Updates the responsiveImage by container width.\n * @param steps {number | number[]} The step size in pixels.\n * | number[] A set of image sizes in pixels.\n * @param element {HTMLImageElement} The image element\n * @param responsiveImage {CloudinaryImage}\n */\nfunction updateByContainerWidth(steps, element, responsiveImage) {\n    var resizeValue = element.parentElement.clientWidth;\n    if (isNum(steps)) {\n        resizeValue = Math.ceil(resizeValue / steps) * steps;\n    }\n    else if (Array.isArray(steps)) {\n        resizeValue = steps.reduce(function (prev, curr) {\n            return (Math.abs(curr - resizeValue) < Math.abs(prev - resizeValue) ? curr : prev);\n        });\n    }\n    responsiveImage.transformation.actions.forEach(function (action, index) {\n        if (action instanceof Action && action.getActionTag() === 'responsive') {\n            responsiveImage.transformation.actions[index] = scale(resizeValue).setActionTag('responsive');\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"module"}