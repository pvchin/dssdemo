{"ast":null,"code":"/* eslint no-fallthrough: off */\nimport * as dates from \"date-arithmetic\";\nexport { milliseconds, seconds, minutes, hours, month, startOf, endOf, add, eq, neq, gte, gt, lte, lt, inRange, min, max } from \"date-arithmetic\";\nconst MILLI = {\n  seconds: 1000,\n  minutes: 1000 * 60,\n  hours: 1000 * 60 * 60,\n  day: 1000 * 60 * 60 * 24\n};\nconst MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\nexport function monthsInYear(year) {\n  let date = new Date(year, 0, 1);\n  return MONTHS.map(i => dates.month(date, i));\n}\nexport function firstVisibleDay(date, localizer) {\n  let firstOfMonth = dates.startOf(date, \"month\");\n  return dates.startOf(firstOfMonth, \"week\", localizer.startOfWeek());\n}\nexport function lastVisibleDay(date, localizer) {\n  let endOfMonth = dates.endOf(date, \"month\");\n  return dates.endOf(endOfMonth, \"week\", localizer.startOfWeek());\n}\nexport function visibleDays(date, localizer) {\n  let current = firstVisibleDay(date, localizer),\n      last = lastVisibleDay(date, localizer),\n      days = [];\n\n  while (dates.lte(current, last, \"day\")) {\n    days.push(current);\n    current = dates.add(current, 1, \"day\");\n  }\n\n  return days;\n}\nexport function ceil(date, unit) {\n  let floor = dates.startOf(date, unit);\n  return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit);\n}\nexport function range(start, end, unit = \"day\") {\n  let current = start,\n      days = [];\n\n  while (dates.lte(current, end, unit)) {\n    days.push(current);\n    current = dates.add(current, 1, unit);\n  }\n\n  return days;\n}\nexport function merge(date, time) {\n  if (time == null && date == null) return null;\n  if (time == null) time = new Date();\n  if (date == null) date = new Date();\n  date = dates.startOf(date, \"day\");\n  date = dates.hours(date, dates.hours(time));\n  date = dates.minutes(date, dates.minutes(time));\n  date = dates.seconds(date, dates.seconds(time));\n  return dates.milliseconds(date, dates.milliseconds(time));\n}\nexport function eqTime(dateA, dateB) {\n  return dates.hours(dateA) === dates.hours(dateB) && dates.minutes(dateA) === dates.minutes(dateB) && dates.seconds(dateA) === dates.seconds(dateB);\n}\nexport function isJustDate(date) {\n  return dates.hours(date) === 0 && dates.minutes(date) === 0 && dates.seconds(date) === 0 && dates.milliseconds(date) === 0;\n}\nexport function duration(start, end, unit, firstOfWeek) {\n  if (unit === \"day\") unit = \"date\";\n  return Math.abs( // eslint-disable-next-line import/namespace\n  dates[unit](start, undefined, firstOfWeek) - // eslint-disable-next-line import/namespace\n  dates[unit](end, undefined, firstOfWeek));\n}\nexport function diff(dateA, dateB, unit) {\n  if (!unit || unit === \"milliseconds\") return Math.abs(+dateA - +dateB); // the .round() handles an edge case\n  // with DST where the total won't be exact\n  // since one day in the range may be shorter/longer by an hour\n\n  return Math.round(Math.abs(+dates.startOf(dateA, unit) / MILLI[unit] - +dates.startOf(dateB, unit) / MILLI[unit]));\n}\nexport function total(date, unit) {\n  let ms = date.getTime(),\n      div = 1;\n\n  switch (unit) {\n    case \"week\":\n      div *= 7;\n\n    case \"day\":\n      div *= 24;\n\n    case \"hours\":\n      div *= 60;\n\n    case \"minutes\":\n      div *= 60;\n\n    case \"seconds\":\n      div *= 1000;\n  }\n\n  return ms / div;\n}\nexport function week(date) {\n  var d = new Date(date);\n  d.setHours(0, 0, 0);\n  d.setDate(d.getDate() + 4 - (d.getDay() || 7));\n  return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\n}\nexport function today() {\n  return dates.startOf(new Date(), \"day\");\n}\nexport function yesterday() {\n  return dates.add(dates.startOf(new Date(), \"day\"), -1, \"day\");\n}\nexport function tomorrow() {\n  return dates.add(dates.startOf(new Date(), \"day\"), 1, \"day\");\n}","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/src/utils/dates.js"],"names":["dates","milliseconds","seconds","minutes","hours","month","startOf","endOf","add","eq","neq","gte","gt","lte","lt","inRange","min","max","MILLI","day","MONTHS","monthsInYear","year","date","Date","map","i","firstVisibleDay","localizer","firstOfMonth","startOfWeek","lastVisibleDay","endOfMonth","visibleDays","current","last","days","push","ceil","unit","floor","range","start","end","merge","time","eqTime","dateA","dateB","isJustDate","duration","firstOfWeek","Math","abs","undefined","diff","round","total","ms","getTime","div","week","d","setHours","setDate","getDate","getDay","getFullYear","today","yesterday","tomorrow"],"mappings":"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","sourcesContent":["/* eslint no-fallthrough: off */\r\nimport * as dates from \"date-arithmetic\";\r\n\r\nexport {\r\n  milliseconds,\r\n  seconds,\r\n  minutes,\r\n  hours,\r\n  month,\r\n  startOf,\r\n  endOf,\r\n  add,\r\n  eq,\r\n  neq,\r\n  gte,\r\n  gt,\r\n  lte,\r\n  lt,\r\n  inRange,\r\n  min,\r\n  max,\r\n} from \"date-arithmetic\";\r\n\r\nconst MILLI = {\r\n  seconds: 1000,\r\n  minutes: 1000 * 60,\r\n  hours: 1000 * 60 * 60,\r\n  day: 1000 * 60 * 60 * 24,\r\n};\r\n\r\nconst MONTHS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];\r\n\r\nexport function monthsInYear(year) {\r\n  let date = new Date(year, 0, 1);\r\n\r\n  return MONTHS.map((i) => dates.month(date, i));\r\n}\r\n\r\nexport function firstVisibleDay(date, localizer) {\r\n  let firstOfMonth = dates.startOf(date, \"month\");\r\n\r\n  return dates.startOf(firstOfMonth, \"week\", localizer.startOfWeek());\r\n}\r\n\r\nexport function lastVisibleDay(date, localizer) {\r\n  let endOfMonth = dates.endOf(date, \"month\");\r\n\r\n  return dates.endOf(endOfMonth, \"week\", localizer.startOfWeek());\r\n}\r\n\r\nexport function visibleDays(date, localizer) {\r\n  let current = firstVisibleDay(date, localizer),\r\n    last = lastVisibleDay(date, localizer),\r\n    days = [];\r\n\r\n  while (dates.lte(current, last, \"day\")) {\r\n    days.push(current);\r\n    current = dates.add(current, 1, \"day\");\r\n  }\r\n\r\n  return days;\r\n}\r\n\r\nexport function ceil(date, unit) {\r\n  let floor = dates.startOf(date, unit);\r\n\r\n  return dates.eq(floor, date) ? floor : dates.add(floor, 1, unit);\r\n}\r\n\r\nexport function range(start, end, unit = \"day\") {\r\n  let current = start,\r\n    days = [];\r\n\r\n  while (dates.lte(current, end, unit)) {\r\n    days.push(current);\r\n    current = dates.add(current, 1, unit);\r\n  }\r\n\r\n  return days;\r\n}\r\n\r\nexport function merge(date, time) {\r\n  if (time == null && date == null) return null;\r\n\r\n  if (time == null) time = new Date();\r\n  if (date == null) date = new Date();\r\n\r\n  date = dates.startOf(date, \"day\");\r\n  date = dates.hours(date, dates.hours(time));\r\n  date = dates.minutes(date, dates.minutes(time));\r\n  date = dates.seconds(date, dates.seconds(time));\r\n  return dates.milliseconds(date, dates.milliseconds(time));\r\n}\r\n\r\nexport function eqTime(dateA, dateB) {\r\n  return (\r\n    dates.hours(dateA) === dates.hours(dateB) &&\r\n    dates.minutes(dateA) === dates.minutes(dateB) &&\r\n    dates.seconds(dateA) === dates.seconds(dateB)\r\n  );\r\n}\r\n\r\nexport function isJustDate(date) {\r\n  return (\r\n    dates.hours(date) === 0 &&\r\n    dates.minutes(date) === 0 &&\r\n    dates.seconds(date) === 0 &&\r\n    dates.milliseconds(date) === 0\r\n  );\r\n}\r\n\r\nexport function duration(start, end, unit, firstOfWeek) {\r\n  if (unit === \"day\") unit = \"date\";\r\n  return Math.abs(\r\n    // eslint-disable-next-line import/namespace\r\n    dates[unit](start, undefined, firstOfWeek) -\r\n      // eslint-disable-next-line import/namespace\r\n      dates[unit](end, undefined, firstOfWeek)\r\n  );\r\n}\r\n\r\nexport function diff(dateA, dateB, unit) {\r\n  if (!unit || unit === \"milliseconds\") return Math.abs(+dateA - +dateB);\r\n\r\n  // the .round() handles an edge case\r\n  // with DST where the total won't be exact\r\n  // since one day in the range may be shorter/longer by an hour\r\n  return Math.round(\r\n    Math.abs(\r\n      +dates.startOf(dateA, unit) / MILLI[unit] -\r\n        +dates.startOf(dateB, unit) / MILLI[unit]\r\n    )\r\n  );\r\n}\r\n\r\nexport function total(date, unit) {\r\n  let ms = date.getTime(),\r\n    div = 1;\r\n\r\n  switch (unit) {\r\n    case \"week\":\r\n      div *= 7;\r\n    case \"day\":\r\n      div *= 24;\r\n    case \"hours\":\r\n      div *= 60;\r\n    case \"minutes\":\r\n      div *= 60;\r\n    case \"seconds\":\r\n      div *= 1000;\r\n  }\r\n\r\n  return ms / div;\r\n}\r\n\r\nexport function week(date) {\r\n  var d = new Date(date);\r\n  d.setHours(0, 0, 0);\r\n  d.setDate(d.getDate() + 4 - (d.getDay() || 7));\r\n  return Math.ceil(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);\r\n}\r\n\r\nexport function today() {\r\n  return dates.startOf(new Date(), \"day\");\r\n}\r\n\r\nexport function yesterday() {\r\n  return dates.add(dates.startOf(new Date(), \"day\"), -1, \"day\");\r\n}\r\n\r\nexport function tomorrow() {\r\n  return dates.add(dates.startOf(new Date(), \"day\"), 1, \"day\");\r\n}\r\n"]},"metadata":{},"sourceType":"module"}