{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { BaseTextSource } from \"./BaseTextSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\n\nvar SubtitlesSource = /*#__PURE__*/function (_BaseTextSource) {\n  _inherits(SubtitlesSource, _BaseTextSource);\n\n  var _super = _createSuper(SubtitlesSource);\n\n  function SubtitlesSource(fileName) {\n    var _this;\n\n    _classCallCheck(this, SubtitlesSource);\n\n    _this = _super.call(this, fileName);\n    _this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n\n    return _this;\n  }\n  /**\n   * @description Set the textStyle for the subtitles layer\n   * @param {TextStyle} textStyle\n   */\n\n\n  _createClass(SubtitlesSource, [{\n    key: \"textStyle\",\n    value: function textStyle(_textStyle) {\n      this._textStyle = _textStyle;\n      return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n\n  }, {\n    key: \"encodeText\",\n    value: function encodeText(text) {\n      return text.replace(/\\//g, ':');\n    }\n  }]);\n\n  return SubtitlesSource;\n}(BaseTextSource);\n\nexport { SubtitlesSource };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/qualifiers/source/sourceTypes/SubtitlesSource.js"],"names":["BaseTextSource","SubtitlesSource","fileName","type","textStyle","_textStyle","text","replace"],"mappings":";;;;AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA;AACA;AACA;AACA;AACA;;IACMC,e;;;;;AACF,2BAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AAClB,8BAAMA,QAAN;AACA,UAAKC,IAAL,GAAY,WAAZ,CAFkB,CAEO;;AAFP;AAGrB;AACD;AACJ;AACA;AACA;;;;;WACI,mBAAUC,UAAV,EAAqB;AACjB,WAAKC,UAAL,GAAkBD,UAAlB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,oBAAWE,IAAX,EAAiB;AACb,aAAOA,IAAI,CAACC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACH;;;;EAvByBP,c;;AAyB9B,SAASC,eAAT","sourcesContent":["import { BaseTextSource } from \"./BaseTextSource\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.SubtitlesSource}\n * @description Defines how to manipulate a Subtitles layer\n */\nclass SubtitlesSource extends BaseTextSource {\n    constructor(fileName) {\n        super(fileName);\n        this.type = 'subtitles'; // used within TextSource for l/u_subtitles:\n    }\n    /**\n     * @description Set the textStyle for the subtitles layer\n     * @param {TextStyle} textStyle\n     */\n    textStyle(textStyle) {\n        this._textStyle = textStyle;\n        return this;\n    }\n    /**\n     *\n     * @description Used within getOpenSourceString of TextSource, this function overwrites the default encoding behaviour\n     * Subtitle file names require a different encoding than texts\n     * @param text\n     * @example\n     * encodeText('foo/bar'); // -> foo:bar\n     */\n    encodeText(text) {\n        return text.replace(/\\//g, ':');\n    }\n}\nexport { SubtitlesSource };\n"]},"metadata":{},"sourceType":"module"}