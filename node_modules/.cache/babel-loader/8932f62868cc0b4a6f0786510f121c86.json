{"ast":null,"code":"import _classCallCheck from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:/react-myprojects/hrms-airtable/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#replace_color_effect | Replace colors example}\n * @memberOf Actions.Adjust\n */\n\nvar ReplaceColorAction = /*#__PURE__*/function (_Action) {\n  _inherits(ReplaceColorAction, _Action);\n\n  var _super = _createSuper(ReplaceColorAction);\n\n  /**\n   * @description Sets the target output color.\n   * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\n   */\n  function ReplaceColorAction(toColor) {\n    var _this;\n\n    _classCallCheck(this, ReplaceColorAction);\n\n    _this = _super.call(this);\n    _this.targetColor = toColor;\n    return _this;\n  }\n  /**\n   * @description Sets the tolerance threshold.\n   * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\n   *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\n   *                                  Larger values result in replacing more colors within the image. </br>\n   *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\n   * @return {this}\n   */\n\n\n  _createClass(ReplaceColorAction, [{\n    key: \"tolerance\",\n    value: function tolerance(toleranceLevel) {\n      this.toleranceLevel = toleranceLevel;\n      return this;\n    }\n    /**\n     * @description Sets the base input color to map.\n     * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\n     * @return {this}\n     */\n\n  }, {\n    key: \"fromColor\",\n    value: function fromColor(baseColor) {\n      this.baseColor = baseColor;\n      return this;\n    }\n  }, {\n    key: \"prepareQualifiers\",\n    value: function prepareQualifiers() {\n      // Target color and base color might not exist at this point (optional qualifiers)\n      // If they exist, ensure that any # for RGB are removed from the resulting string\n      var targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\n      var baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\n      var qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\n      this.addQualifier(new Qualifier('e', qualifierValue));\n      return this;\n    }\n  }]);\n\n  return ReplaceColorAction;\n}(Action);\n\nexport { ReplaceColorAction };","map":{"version":3,"sources":["D:/react-myprojects/hrms-airtable/node_modules/@cloudinary/base/actions/adjust/ReplaceColorAction.js"],"names":["Action","QualifierValue","Qualifier","ReplaceColorAction","toColor","targetColor","toleranceLevel","baseColor","toString","replace","qualifierValue","addQualifier"],"mappings":";;;;AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,kB;;;;;AACF;AACJ;AACA;AACA;AACI,8BAAYC,OAAZ,EAAqB;AAAA;;AAAA;;AACjB;AACA,UAAKC,WAAL,GAAmBD,OAAnB;AAFiB;AAGpB;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;;;WACI,mBAAUE,cAAV,EAA0B;AACtB,WAAKA,cAAL,GAAsBA,cAAtB;AACA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,mBAAUC,SAAV,EAAqB;AACjB,WAAKA,SAAL,GAAiBA,SAAjB;AACA,aAAO,IAAP;AACH;;;WACD,6BAAoB;AAChB;AACA;AACA,UAAMF,WAAW,GAAG,KAAKA,WAAL,IAAoB,KAAKA,WAAL,CAAiBG,QAAjB,GAA4BC,OAA5B,CAAoC,GAApC,EAAyC,EAAzC,CAAxC;AACA,UAAMF,SAAS,GAAG,KAAKA,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,GAA0BC,OAA1B,CAAkC,GAAlC,EAAuC,EAAvC,CAApC;AACA,UAAMC,cAAc,GAAG,IAAIT,cAAJ,CAAmB,CAAC,eAAD,EAAkBI,WAAlB,EAA+B,KAAKC,cAApC,EAAoDC,SAApD,CAAnB,CAAvB;AACA,WAAKI,YAAL,CAAkB,IAAIT,SAAJ,CAAc,GAAd,EAAmBQ,cAAnB,CAAlB;AACA,aAAO,IAAP;AACH;;;;EAtC4BV,M;;AAwCjC,SAASG,kBAAT","sourcesContent":["import { Action } from \"../../internal/Action\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier\";\n/**\n * @description\n * Maps an input color and those similar to the input color to corresponding shades of a specified output color, taking luminosity and chroma into account, in order to recolor objects in your image in a natural way.</br>\n * More highly saturated input colors usually give the best results. It is recommended to avoid input colors approaching white, black, or gray.</br>\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_transformations#replace_color_effect | Replace colors example}\n * @memberOf Actions.Adjust\n */\nclass ReplaceColorAction extends Action {\n    /**\n     * @description Sets the target output color.\n     * @param {string} toColor - The HTML name or RGB/A hex code of the target output color.\n     */\n    constructor(toColor) {\n        super();\n        this.targetColor = toColor;\n    }\n    /**\n     * @description Sets the tolerance threshold.\n     * @param {number} toleranceLevel - The tolerance threshold (a radius in the LAB color space) from the input color, </br>\n     *                                  representing the span of colors that should be replaced with a correspondingly adjusted version of the target output color. </br>\n     *                                  Larger values result in replacing more colors within the image. </br>\n     *                                  The more saturated the original input color, the more a change in value will impact the result (Server default: 50).\n     * @return {this}\n     */\n    tolerance(toleranceLevel) {\n        this.toleranceLevel = toleranceLevel;\n        return this;\n    }\n    /**\n     * @description Sets the base input color to map.\n     * @param {string} baseColor - The HTML name or RGB/A hex code of the base input color to map (Server default: the most prominent high-saturation color in the image).\n     * @return {this}\n     */\n    fromColor(baseColor) {\n        this.baseColor = baseColor;\n        return this;\n    }\n    prepareQualifiers() {\n        // Target color and base color might not exist at this point (optional qualifiers)\n        // If they exist, ensure that any # for RGB are removed from the resulting string\n        const targetColor = this.targetColor && this.targetColor.toString().replace('#', '');\n        const baseColor = this.baseColor && this.baseColor.toString().replace('#', '');\n        const qualifierValue = new QualifierValue(['replace_color', targetColor, this.toleranceLevel, baseColor]);\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\nexport { ReplaceColorAction };\n"]},"metadata":{},"sourceType":"module"}